{"version":3,"sources":["sources://./src/components/Network.vue","webpack-generated:///./src/components/Network.vue?7d91","webpack-generated:///./src/components/Network.vue?cb73","webpack:///./src/components/Network.vue?cdcd","webpack-generated:///./src/components/Network.vue?26d8"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAGwD;AAEwB;AACpD;AACqD;AACnB;AACJ;AAG1D,IAAM,OAAO,eAAb,MAAM,OAAQ,SAAQ,0DAAG;IAAzB;;QAGY,mBAAc,GAA4D,EAAE,CAAC;IAySzF,CAAC;IAvSU,KAAK,CAAC,QAAQ,CAAC,EAClB,MAAM,EACN,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EACrC,SAAS,EACT,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EACxC,KAAK,EACL,GAAG,GAAG,CAAC,EACP,mBAAmB,EACnB,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EACnC,IAAI,EACJ,YAAY,EACZ,SAAS,GAaZ;QACG,IAAI,CAAC,CAAC,MAAM,YAAY,KAAK,CAAC,OAAO,CAAC;YAAE,MAAM,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC3E,IAAI,CAAC,CAAC,SAAS,YAAY,KAAK,CAAC,OAAO,CAAC;YAAE,SAAS,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACpF,IAAI,CAAC,CAAC,YAAY,YAAY,KAAK,CAAC,SAAS,CAAC;YAAE,YAAY,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QACjG,IAAI,SAAS,IAAI,CAAC,CAAC,SAAS,YAAY,KAAK,CAAC,SAAS,CAAC;YAAE,SAAS,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAErG,MAAM,8DAAS,EAAE,CAAC;QAElB,IACI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;eACtB,UAAU,KAAK,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK;eACvC,aAAa,KAAK,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK;eAC1C,KAAK,KAAK,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAC1C;YACE,OAAO,IAAI,KAAK,CAAC,mBAAmB,CAChC,MAAM,EACN,UAAU,EACV,SAAS,EACT,aAAa,EACb,KAAK,EACL,GAAG,EACH,mBAAmB,EACnB,KAAK,EACL,IAAI,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC,EACzB,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,CAC9F,CAAC;SACL;aAAM;YACH,OAAO,IAAI,KAAK,CAAC,gBAAgB,CAC7B,YAAY,EACZ,SAAS,EACT,KAAK,EACL,GAAG,EACH,mBAAmB,EACnB,SAAS,CACZ,CAAC;SACL;IACL,CAAC;IAEM,KAAK,CAAC,yBAAyB,CAAC,EAAqB;QACxD,MAAM,8DAAS,EAAE,CAAC,CAAC,8BAA8B;QAEjD,MAAM,WAAW,GAAI,KAAK,CAAC,OAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAI3F,CAAC;QACF,MAAM,kBAAkB,GAAG,WAAW,IAAI,WAAW;YACjD,CAAC,CAAC,WAAW,CAAC,SAAS;YACvB,CAAC,CAAC,kBAAkB,IAAI,WAAW;gBAC/B,CAAC,CAAC,WAAW,CAAC,gBAAgB;gBAC9B,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1E,MAAM,YAAY,GAAG,WAAW,IAAI,WAAW;YAC3C,CAAC,CAAC,WAAW,CAAC,SAAS;YACvB,CAAC,CAAC,kBAAkB,IAAI,WAAW;gBAC/B,CAAC,CAAC,WAAW,CAAC,gBAAgB;gBAC9B,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAE1E,MAAM,MAAM,GAAsB;YAC9B,YAAY,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC;YACrD,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE;YAEvB,GAAG,EAAE;gBACD,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC;gBAC9D,SAAS,EAAE,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,YAAY,CAAC;gBAElD,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,qBAAqB,EAAE;gBACzC,UAAU,EAAE,EAAE,CAAC,UAAU;gBAEzB,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,qBAAqB,EAAE;gBAC/C,aAAa,EAAE,EAAE,CAAC,aAAa;gBAE/B,KAAK,EAAE,EAAE,CAAC,KAAK;gBACf,GAAG,EAAE,EAAE,CAAC,GAAG;gBACX,mBAAmB,EAAE,EAAE,CAAC,mBAAmB;gBAE3C,SAAS,EAAE,EAAE,CAAC,IAAI;gBAClB,KAAK,EAAE,EAAE,CAAC,KAAK;gBACf,SAAS,EAAE,EAAE,CAAC,SAAS;gBACvB,KAAK,EAAE,EAAE,CAAC,KAAK;aAClB;SACJ,CAAC;QAEF,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,aAAa,CAAC,EAAqB;QAC5C,MAAM,8DAAS,EAAE,CAAC,CAAC,8BAA8B;QAEjD,4GAA4G;QAC5G,uGAAuG;QACvG,uGAAuG;QACvG,IAAI,uBAAuB,GAAG,sEAAiB,CAAC,SAAO,CAAC,kCAAkC,CAAC,IAAI,EAAE,CAAC;QAClG,MAAM,UAAU,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;QACxC,uBAAuB,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QACrD,sEAAiB,CAAC,SAAO,CAAC,kCAAkC,EAAE,uBAAuB,CAAC,CAAC;QAEvF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC;QAC1D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAE7C,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,GAAG,EAAE;YAChD,YAAY,EAAE,QAAQ,CAAC,GAAG,CAAC,eAAe;YAC1C,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC;YACvD,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC;SACtD,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,WAAW,CACC,CAAC;QAE3D,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;SACvD;QAED,IAAI,OAAO,CAAC,KAAK,KAAK,KAAK,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;SAC3D;QAED,uBAAuB,GAAG,sEAAiB,CAAC,SAAO,CAAC,kCAAkC,CAAC,CAAC;QACxF,OAAO,uBAAuB,CAAC,UAAU,CAAC,CAAC;QAC3C,sEAAiB,CAAC,SAAO,CAAC,kCAAkC,EAAE,uBAAuB,CAAC,CAAC;QAEvF,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEM,wBAAwB,CAAC,MAU/B;QACG,IAAI,CAAC,sEAAiB,CAAC,SAAO,CAAC,kCAAkC,CAAC;YAAE,OAAO,EAAE,CAAC;QAC9E,MAAM,sBAAsB,GACtB,MAAM,CAAC,MAAM,CAAC,sEAAiB,CAAC,SAAO,CAAC,kCAAkC,CAAC,CAAC,CAAC;QACnF,MAAM,YAAY,GAAG,sBAAsB,CAAC,GAAG,CAAC,CAAC,YAAwB,EAAE,EAAE,CACzE,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,MAAM;YAAE,OAAO,YAAY,CAAC;QACjC,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,EAAqB,EAAE,EAAE,CACjD,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,IAAI,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;eAC7D,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,EAAE,CAAC,UAAU,KAAK,MAAM,CAAC,UAAU,CAAC;eACxE,CAAC,MAAM,CAAC,SAAS,KAAK,SAAS,IAAI,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;eACzE,CAAC,MAAM,CAAC,aAAa,KAAK,SAAS,IAAI,EAAE,CAAC,aAAa,KAAK,MAAM,CAAC,aAAa,CAAC;eACjF,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,EAAE,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,CAAC;eACzD,CAAC,MAAM,CAAC,GAAG,KAAK,SAAS,IAAI,EAAE,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC;eACnD,CAAC,MAAM,CAAC,mBAAmB,KAAK,SAAS,IAAI,EAAE,CAAC,mBAAmB,KAAK,MAAM,CAAC,mBAAmB,CAAC;eACnG,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,EAAE,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,CAAC;eACzD,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,IAAI,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CACnF,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,mBAAmB;QAC5B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC7C,IAAI,SAAO,CAAC,2BAA2B;YAAE,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;QACvE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAClF,yGAAyG;QACzG,yGAAyG;QACzG,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAwB,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACrG,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,SAAmB;QACxC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC7C,OAAO,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,0BAA0B;QACnC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC7C,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,0BAA0B,EAAE,CAAC;QAE5D,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,qEAAmB,CACtD,iFAAoB,EAAE,EACtB,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAC1C,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,EACxC,QAAQ,CAAC,KAAK,EACd,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,EACjD,QAAQ,CAAC,UAAU,EACnB,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CACrD,CAAC,CAAC;IACP,CAAC;IAEM,KAAK,CAAC,gBAAgB;QACzB,IAAI,CAAC,mEAAa,CAAC,WAAW,EAAE,EAAE;YAC9B,mEAAa,CAAC,cAAc,CAAC,8CAAM,CAAC,eAAe,CAAC,CAAC;SACxD;QACD,sCAAsC;QACtC,MAAM,mEAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEpC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,SAAS,EACxD,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,QAAQ,EACvD,CAAC,CAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,iBAAiB,EAChE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,qBAAqB,EACpE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,cAAc,EAC7D,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,aAAa,EAC5D,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,gBAAgB,EAC/D,CAAC,QAA6B,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC9F,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,mBAAmB,EAClE,CAAC,MAAyC,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3G,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,mBAAmB,EAClE,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC,CAAC;YAC5E,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,iBAAiB,EAChE,CAAC,MAAgC,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;YAChG,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,mBAAmB,EAClE,CAAC,MAAyC,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3G,IAAI,CAAC,wBAAwB,CAAC,mEAAa,CAAC,MAAM,CAAC,WAAW,EAC1D,CAAC,QAAkD,EAAE,EAAE,CACnD,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE1D,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;QAED,OAAO,mEAAa,CAAC,QAAQ,CAAC;IAClC,CAAC;IAEO,OAAO;QACX,IAAI,CAAC,GAAG,CAAC,SAAO,CAAC,MAAM,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAChD,SAAO,CAAC,2BAA2B,GAAG,IAAI,CAAC;QAC/C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,SAAO,CAAC,MAAM,CAAC,cAAc,EAAE,GAAG,EAAE;YACzC,SAAO,CAAC,2BAA2B,GAAG,KAAK,CAAC;QAChD,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,SAAS;QACb,IAAI,CAAC,mEAAa,CAAC,WAAW,EAAE;YAAE,OAAO;QACzC,KAAK,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE;YACjD,mEAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC/C;IACL,CAAC;IAEO,wBAAwB,CAAC,KAA2B,EAAE,QAAkC;QAC5F,IAAI,CAAC,mEAAa,CAAC,WAAW,EAAE;YAAE,OAAO,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;QAChG,mEAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC3C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IAChD,CAAC;IAEO,kBAAkB;QACtB,IAAI,CAAC,mEAAa,CAAC,WAAW,EAAE;YAAE,OAAO;QACzC,MAAM,aAAa,GAAG,mEAAa,CAAC,QAAQ,CAAC;QAC7C,IAAI,aAAa,CAAC,eAAe,KAAK,OAAO;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;aAC/E,IAAI,aAAa,CAAC,eAAe,KAAK,QAAQ;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEzF,IAAI,aAAa,CAAC,cAAc,KAAK,SAAS;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;aACxF,IAAI,aAAa,CAAC,cAAc,KAAK,aAAa;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;aACrG,IAAI,aAAa,CAAC,cAAc,KAAK,MAAM;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAC5F,SAAO,CAAC,2BAA2B,GAAG,SAAO,CAAC,2BAA2B;eAClE,aAAa,CAAC,cAAc,KAAK,aAAa,CAAC;QAEtD,IAAI,aAAa,CAAC,SAAS,KAAK,CAAC;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;QAErG,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,gBAAgB,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;QAE3G,KAAK,MAAM,EAAE,IAAI,aAAa,CAAC,mBAAmB;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QACvG,KAAK,MAAM,MAAM,IAAI,aAAa,CAAC,mBAAmB;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;QAC/G,KAAK,MAAM,EAAE,IAAI,aAAa,CAAC,iBAAiB;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;QACnG,KAAK,MAAM,EAAE,IAAI,aAAa,CAAC,mBAAmB;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QAEvG,IAAI,aAAa,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC;YAAE,IAAI,CAAC,KAAK,CAAC,SAAO,CAAC,MAAM,CAAC,WAAW,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC5G,CAAC;CACJ;AA3SkB,mCAA2B,GAAG,KAAK,CAAC;AADjD,OAAO;IADZ,gEAAS;GACJ,OAAO,CA4SZ;AAED,WAAU,OAAO;IACb,IAAkB,MAajB;IAbD,WAAkB,MAAM;QACpB,iCAAuB;QACvB,+BAAqB;QACrB,iDAAuC;QACvC,yDAA+C;QAC/C,2CAAiC;QACjC,sCAA4B;QAC5B,uCAA6B;QAC7B,qDAA2C;QAC3C,qDAA2C;QAC3C,iDAAuC;QACvC,qDAA2C;QAC3C,qCAA2B;IAC/B,CAAC,EAbiB,MAAM,GAAN,cAAM,KAAN,cAAM,QAavB;IAED,IAAkB,MAGjB;IAHD,WAAkB,MAAM;QACpB,wDAA8C;QAC9C,sEAA4D;IAChE,CAAC,EAHiB,MAAM,GAAN,cAAM,KAAN,cAAM,QAGvB;IAEY,0CAAkC,GAAG,gCAAgC,CAAC;AACvF,CAAC,EAtBS,OAAO,KAAP,OAAO,QAsBhB;AAEc,sEAAO,EAAC;;;;;;;;;;;;;AClVvB;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAsF;AAC3B;AACL;;;AAGtD;AAC0F;AAC1F,gBAAgB,2GAAU;AAC1B,EAAE,6EAAM;AACR,EAAE,kFAAM;AACR,EAAE,2FAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACe,gF;;;;;;;;;;;;ACtCf;AAAA;AAAA,wCAAwR,CAAgB,0UAAG,EAAC,C;;;;;;;;;;;;ACA5S;AAAA;AAAA;AAAA;AAAA;AAAA","file":"js/add-vesting-contract~cashlink~checkout~migrate~refund-swap-ledger~sign-transaction~sign-transaction-~c250bbd7.js","sourcesContent":["\n\n\nimport { Component, Vue } from 'vue-property-decorator';\nimport { SignedTransaction } from '../lib/PublicRequestTypes';\nimport { NetworkClient, DetailedPlainTransaction } from '@nimiq/network-client';\nimport Config from 'config';\nimport { loadNimiq, setHistoryStorage, getHistoryStorage } from '../lib/Helpers';\nimport { labelVestingContract } from '../lib/LabelingMachine';\nimport { VestingContractInfo } from '../lib/ContractInfo';\n\n@Component\nclass Network extends Vue {\n    private static _hasOrSyncsOnTopOfConsensus = false;\n\n    private boundListeners: Array<[NetworkClient.Events, (...args: any[]) => void]> = [];\n\n    public async createTx({\n        sender,\n        senderType = Nimiq.Account.Type.BASIC,\n        recipient,\n        recipientType = Nimiq.Account.Type.BASIC,\n        value,\n        fee = 0,\n        validityStartHeight,\n        flags = Nimiq.Transaction.Flag.NONE,\n        data,\n        signerPubKey,\n        signature,\n    }: {\n        sender: Nimiq.Address | Uint8Array,\n        senderType?: Nimiq.Account.Type,\n        recipient: Nimiq.Address | Uint8Array,\n        recipientType?: Nimiq.Account.Type,\n        value: number,\n        fee?: number,\n        validityStartHeight: number,\n        flags?: number,\n        data?: Uint8Array,\n        signerPubKey: Nimiq.PublicKey | Uint8Array,\n        signature?: Nimiq.Signature | Uint8Array,\n    }): Promise<Nimiq.Transaction> {\n        if (!(sender instanceof Nimiq.Address)) sender = new Nimiq.Address(sender);\n        if (!(recipient instanceof Nimiq.Address)) recipient = new Nimiq.Address(recipient);\n        if (!(signerPubKey instanceof Nimiq.PublicKey)) signerPubKey = new Nimiq.PublicKey(signerPubKey);\n        if (signature && !(signature instanceof Nimiq.Signature)) signature = new Nimiq.Signature(signature);\n\n        await loadNimiq();\n\n        if (\n            (data && data.length > 0)\n            || senderType !== Nimiq.Account.Type.BASIC\n            || recipientType !== Nimiq.Account.Type.BASIC\n            || flags !== Nimiq.Transaction.Flag.NONE\n        ) {\n            return new Nimiq.ExtendedTransaction(\n                sender,\n                senderType,\n                recipient,\n                recipientType,\n                value,\n                fee,\n                validityStartHeight,\n                flags,\n                data || new Uint8Array(0),\n                signature ? Nimiq.SignatureProof.singleSig(signerPubKey, signature).serialize() : undefined,\n            );\n        } else {\n            return new Nimiq.BasicTransaction(\n                signerPubKey,\n                recipient,\n                value,\n                fee,\n                validityStartHeight,\n                signature,\n            );\n        }\n    }\n\n    public async makeSignTransactionResult(tx: Nimiq.Transaction): Promise<SignedTransaction> {\n        await loadNimiq(); // needed for hash computation\n\n        const parsedProof = (Nimiq.Account as any).TYPE_MAP.get(tx.senderType).proofToPlain(tx.proof) as ReturnType<\n            typeof Nimiq.BasicAccount.proofToPlain\n            | typeof Nimiq.HashedTimeLockedContract.proofToPlain\n            | typeof Nimiq.VestingContract.proofToPlain\n        >;\n        const signerPublicKeyHex = 'publicKey' in parsedProof\n            ? parsedProof.publicKey\n            : 'creatorPublicKey' in parsedProof\n                ? parsedProof.creatorPublicKey\n                : (() => { throw new Error('Unsupported transaction proof'); })();\n        const signatureHex = 'signature' in parsedProof\n            ? parsedProof.signature\n            : 'creatorSignature' in parsedProof\n                ? parsedProof.creatorSignature\n                : (() => { throw new Error('Unsupported transaction proof'); })();\n\n        const result: SignedTransaction = {\n            serializedTx: Nimiq.BufferUtils.toHex(tx.serialize()),\n            hash: tx.hash().toHex(),\n\n            raw: {\n                signerPublicKey: Nimiq.BufferUtils.fromHex(signerPublicKeyHex),\n                signature: Nimiq.BufferUtils.fromHex(signatureHex),\n\n                sender: tx.sender.toUserFriendlyAddress(),\n                senderType: tx.senderType,\n\n                recipient: tx.recipient.toUserFriendlyAddress(),\n                recipientType: tx.recipientType,\n\n                value: tx.value,\n                fee: tx.fee,\n                validityStartHeight: tx.validityStartHeight,\n\n                extraData: tx.data,\n                flags: tx.flags,\n                networkId: tx.networkId,\n                proof: tx.proof,\n            },\n        };\n\n        return result;\n    }\n\n    /**\n     * Relays the transaction to the network and only resolves when the network\n     * fires its 'transaction-relayed' event for that transaction.\n     */\n    public async sendToNetwork(tx: Nimiq.Transaction): Promise<SignedTransaction> {\n        await loadNimiq(); // needed for hash computation\n\n        // Store the transaction in the history state to be able to resend the transaction when the user reloads the\n        // window in case it failed to relay it to the network. Not using localstorage or sessionstorage as the\n        // transaction should not be broadcast anymore when user closes page, accepting that it failed to send.\n        let unrelayedTransactionMap = getHistoryStorage(Network.HISTORY_KEY_UNRELAYED_TRANSACTIONS) || {};\n        const base64Hash = tx.hash().toBase64();\n        unrelayedTransactionMap[base64Hash] = tx.serialize();\n        setHistoryStorage(Network.HISTORY_KEY_UNRELAYED_TRANSACTIONS, unrelayedTransactionMap);\n\n        const signedTx = await this.makeSignTransactionResult(tx);\n        const client = await this.getNetworkClient();\n\n        const txObjToSend = Object.assign({}, signedTx.raw, {\n            senderPubKey: signedTx.raw.signerPublicKey,\n            value: Nimiq.Policy.satoshisToCoins(signedTx.raw.value),\n            fee: Nimiq.Policy.satoshisToCoins(signedTx.raw.fee),\n        });\n\n        const plainTx = await client.relayTransaction(txObjToSend) as\n            ReturnType<Nimiq.Client.TransactionDetails['toPlain']>;\n\n        if (plainTx.state === 'expired') {\n            throw new Error(Network.Errors.TRANSACTION_EXPIRED);\n        }\n\n        if (plainTx.state === 'new') {\n            throw new Error(Network.Errors.TRANSACTION_NOT_RELAYED);\n        }\n\n        unrelayedTransactionMap = getHistoryStorage(Network.HISTORY_KEY_UNRELAYED_TRANSACTIONS);\n        delete unrelayedTransactionMap[base64Hash];\n        setHistoryStorage(Network.HISTORY_KEY_UNRELAYED_TRANSACTIONS, unrelayedTransactionMap);\n\n        return signedTx;\n    }\n\n    public getUnrelayedTransactions(filter?: {\n        sender?: Nimiq.Address,\n        senderType?: Nimiq.Account.Type,\n        recipient?: Nimiq.Address,\n        recipientType?: Nimiq.Account.Type,\n        value?: number,\n        fee?: number,\n        validityStartHeight?: number,\n        flags?: number,\n        data?: Uint8Array,\n    }): Nimiq.Transaction[] {\n        if (!getHistoryStorage(Network.HISTORY_KEY_UNRELAYED_TRANSACTIONS)) return [];\n        const serializedTransactions: Uint8Array[]\n            = Object.values(getHistoryStorage(Network.HISTORY_KEY_UNRELAYED_TRANSACTIONS));\n        const transactions = serializedTransactions.map((serializedTx: Uint8Array) =>\n            Nimiq.Transaction.unserialize(new Nimiq.SerialBuffer(serializedTx)));\n        if (!filter) return transactions;\n        return transactions.filter((tx: Nimiq.Transaction) =>\n            (filter.sender === undefined || tx.sender.equals(filter.sender))\n            && (filter.senderType === undefined || tx.senderType === filter.senderType)\n            && (filter.recipient === undefined || tx.recipient.equals(filter.recipient))\n            && (filter.recipientType === undefined || tx.recipientType === filter.recipientType)\n            && (filter.value === undefined || tx.value === filter.value)\n            && (filter.fee === undefined || tx.fee === filter.fee)\n            && (filter.validityStartHeight === undefined || tx.validityStartHeight === filter.validityStartHeight)\n            && (filter.flags === undefined || tx.flags === filter.flags)\n            && (filter.data === undefined || Nimiq.BufferUtils.equals(tx.data, filter.data)),\n        );\n    }\n\n    public async getBlockchainHeight(): Promise<number> {\n        const client = await this.getNetworkClient();\n        if (Network._hasOrSyncsOnTopOfConsensus) return client.headInfo.height;\n        return new Promise((resolve) => this.$once(Network.Events.CONSENSUS_ESTABLISHED, () =>\n            // At the time of the consensus event, the new head is not populated yet. Therefore, instead of accessing\n            // client.headInfo we wait for the HEAD_CHANGE which is triggered immediately after CONSENSUS_ESTABLISHED\n            this.$once(Network.Events.HEAD_CHANGE, (head: { height: number }) => resolve(head.height))));\n    }\n\n    public async getBalances(addresses: string[]): Promise<Map<string, number>> {\n        const client = await this.getNetworkClient();\n        return client.getBalance(addresses);\n    }\n\n    public async getGenesisVestingContracts(): Promise<VestingContractInfo[]> {\n        const client = await this.getNetworkClient();\n        const contracts = await client.getGenesisVestingContracts();\n\n        return contracts.map((contract) => new VestingContractInfo(\n            labelVestingContract(),\n            Nimiq.Address.fromString(contract.address),\n            Nimiq.Address.fromString(contract.owner),\n            contract.start,\n            Nimiq.Policy.coinsToSatoshis(contract.stepAmount),\n            contract.stepBlocks,\n            Nimiq.Policy.coinsToSatoshis(contract.totalAmount),\n        ));\n    }\n\n    public async getNetworkClient(): Promise<NetworkClient> {\n        if (!NetworkClient.hasInstance()) {\n            NetworkClient.createInstance(Config.networkEndpoint);\n        }\n        // Make sure the client is initialized\n        await NetworkClient.Instance.init();\n\n        if (this.boundListeners.length === 0) {\n            this._registerNetworkListener(NetworkClient.Events.API_READY,\n                () => this.$emit(Network.Events.API_READY));\n            this._registerNetworkListener(NetworkClient.Events.API_FAIL,\n                (e: Error) => this.$emit(Network.Events.API_FAIL, e));\n            this._registerNetworkListener(NetworkClient.Events.CONSENSUS_SYNCING,\n                () => this.$emit(Network.Events.CONSENSUS_SYNCING));\n            this._registerNetworkListener(NetworkClient.Events.CONSENSUS_ESTABLISHED,\n                () => this.$emit(Network.Events.CONSENSUS_ESTABLISHED));\n            this._registerNetworkListener(NetworkClient.Events.CONSENSUS_LOST,\n                () => this.$emit(Network.Events.CONSENSUS_LOST));\n            this._registerNetworkListener(NetworkClient.Events.PEERS_CHANGED,\n                (count: number) => this.$emit(Network.Events.PEERS_CHANGED, count));\n            this._registerNetworkListener(NetworkClient.Events.BALANCES_CHANGED,\n                (balances: Map<string, number>) => this.$emit(Network.Events.BALANCES_CHANGED, balances));\n            this._registerNetworkListener(NetworkClient.Events.TRANSACTION_PENDING,\n                (txInfo: Partial<DetailedPlainTransaction>) => this.$emit(Network.Events.TRANSACTION_PENDING, txInfo));\n            this._registerNetworkListener(NetworkClient.Events.TRANSACTION_EXPIRED,\n                (hash: string) => this.$emit(Network.Events.TRANSACTION_EXPIRED, hash));\n            this._registerNetworkListener(NetworkClient.Events.TRANSACTION_MINED,\n                (txInfo: DetailedPlainTransaction) => this.$emit(Network.Events.TRANSACTION_MINED, txInfo));\n            this._registerNetworkListener(NetworkClient.Events.TRANSACTION_RELAYED,\n                (txInfo: Partial<DetailedPlainTransaction>) => this.$emit(Network.Events.TRANSACTION_RELAYED, txInfo));\n            this._registerNetworkListener(NetworkClient.Events.HEAD_CHANGE,\n                (headInfo: {height: number, globalHashrate: number}) =>\n                    this.$emit(Network.Events.HEAD_CHANGE, headInfo));\n\n            this._fireInitialEvents();\n        }\n\n        return NetworkClient.Instance;\n    }\n\n    private created() {\n        this.$on(Network.Events.CONSENSUS_ESTABLISHED, () => {\n            Network._hasOrSyncsOnTopOfConsensus = true;\n        });\n        this.$on(Network.Events.CONSENSUS_LOST, () => {\n            Network._hasOrSyncsOnTopOfConsensus = false;\n        });\n    }\n\n    private destroyed() {\n        if (!NetworkClient.hasInstance()) return;\n        for (const [event, listener] of this.boundListeners) {\n            NetworkClient.Instance.off(event, listener);\n        }\n    }\n\n    private _registerNetworkListener(event: NetworkClient.Events, listener: (...args: any[]) => void) {\n        if (!NetworkClient.hasInstance()) console.warn('Using default instance with default endpoint.');\n        NetworkClient.Instance.on(event, listener);\n        this.boundListeners.push([event, listener]);\n    }\n\n    private _fireInitialEvents() {\n        if (!NetworkClient.hasInstance()) return;\n        const networkClient = NetworkClient.Instance;\n        if (networkClient.apiLoadingState === 'ready') this.$emit(Network.Events.API_READY);\n        else if (networkClient.apiLoadingState === 'failed') this.$emit(Network.Events.API_FAIL);\n\n        if (networkClient.consensusState === 'syncing') this.$emit(Network.Events.CONSENSUS_SYNCING);\n        else if (networkClient.consensusState === 'established') this.$emit(Network.Events.CONSENSUS_ESTABLISHED);\n        else if (networkClient.consensusState === 'lost') this.$emit(Network.Events.CONSENSUS_LOST);\n        Network._hasOrSyncsOnTopOfConsensus = Network._hasOrSyncsOnTopOfConsensus\n            || networkClient.consensusState === 'established';\n\n        if (networkClient.peerCount !== 0) this.$emit(Network.Events.PEERS_CHANGED, networkClient.peerCount);\n\n        if (networkClient.balances.size !== 0) this.$emit(Network.Events.BALANCES_CHANGED, networkClient.balances);\n\n        for (const tx of networkClient.pendingTransactions) this.$emit(Network.Events.TRANSACTION_PENDING, tx);\n        for (const txHash of networkClient.expiredTransactions) this.$emit(Network.Events.TRANSACTION_EXPIRED, txHash);\n        for (const tx of networkClient.minedTransactions) this.$emit(Network.Events.TRANSACTION_MINED, tx);\n        for (const tx of networkClient.relayedTransactions) this.$emit(Network.Events.TRANSACTION_RELAYED, tx);\n\n        if (networkClient.headInfo.height !== 0) this.$emit(Network.Events.HEAD_CHANGE, networkClient.headInfo);\n    }\n}\n\nnamespace Network {\n    export const enum Events {\n        API_READY = 'api-ready',\n        API_FAIL = 'api-fail',\n        CONSENSUS_SYNCING = 'consensus-syncing',\n        CONSENSUS_ESTABLISHED = 'consensus-established',\n        CONSENSUS_LOST = 'consensus-lost',\n        PEERS_CHANGED = 'peer-count',\n        BALANCES_CHANGED = 'balances',\n        TRANSACTION_PENDING = 'transaction-pending',\n        TRANSACTION_EXPIRED = 'transaction-expired',\n        TRANSACTION_MINED = 'transaction-mined',\n        TRANSACTION_RELAYED = 'transaction-relayed',\n        HEAD_CHANGE = 'head-change',\n    }\n\n    export const enum Errors {\n        TRANSACTION_EXPIRED = 'Transaction is expired',\n        TRANSACTION_NOT_RELAYED = 'Transaction could not be relayed',\n    }\n\n    export const HISTORY_KEY_UNRELAYED_TRANSACTIONS = 'network-unrelayed-transactions';\n}\n\nexport default Network;\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\")\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./Network.vue?vue&type=template&id=2231c52e&\"\nimport script from \"./Network.vue?vue&type=script&lang=ts&\"\nexport * from \"./Network.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/iesiyok/projects/acc-js/development/nimiq2/hub/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2231c52e')) {\n      api.createRecord('2231c52e', component.options)\n    } else {\n      api.reload('2231c52e', component.options)\n    }\n    module.hot.accept(\"./Network.vue?vue&type=template&id=2231c52e&\", function () {\n      api.rerender('2231c52e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/components/Network.vue\"\nexport default component.exports","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/ts-loader/index.js??ref--12-1!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Network.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/ts-loader/index.js??ref--12-1!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Network.vue?vue&type=script&lang=ts&\"","export * from \"-!../../node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"3e5283d1-vue-loader-template\\\"}!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Network.vue?vue&type=template&id=2231c52e&\""],"sourceRoot":""}