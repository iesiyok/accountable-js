{"version":3,"sources":["sources://./src/views/SetupSwap.vue","sources://./src/views/SetupSwapSuccess.vue","sources://./src/lib/MerkleTreePatch.ts","sources://./src/lib/bitcoin/BitcoinHtlcUtils.ts","webpack-generated:///./src/views/SetupSwap.vue?6be3","webpack:///./src/views/SetupSwap.vue?02a8","webpack-generated:///./src/views/SetupSwapSuccess.vue?fb77","webpack:///./src/views/SetupSwapSuccess.vue?e780"],"names":[],"mappings":"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","file":"js/swap~swap-ledger.js","sourcesContent":["\nimport { Component } from 'vue-property-decorator';\nimport { Getter } from 'vuex-class';\nimport { SmallPage } from '@nimiq/vue-components';\nimport BitcoinSyncBaseView from './BitcoinSyncBaseView.vue';\nimport StatusScreen from '../components/StatusScreen.vue';\nimport GlobalClose from '../components/GlobalClose.vue';\nimport { ParsedSetupSwapRequest } from '../lib/RequestTypes';\nimport { Static } from '../lib/StaticStore';\nimport { WalletInfo } from '../lib/WalletInfo';\nimport { BtcAddressInfo } from '../lib/bitcoin/BtcAddressInfo';\nimport { SwapAsset } from '@nimiq/fastspot-api';\nimport { DEFAULT_KEY_PATH } from '../lib/Constants';\n\n// Import only types to avoid bundling of KeyguardClient in Ledger request if not required.\n// (But note that currently, the KeyguardClient is still always bundled in the RpcApi).\ntype KeyguardSignSwapRequest = import('@nimiq/keyguard-client').SignSwapRequest;\nexport type SwapSetupInfo = Pick<KeyguardSignSwapRequest, 'fund' | 'redeem'>;\n\n@Component({components: {StatusScreen, SmallPage, GlobalClose}}) // including components used in parent class\nexport default class SetupSwap extends BitcoinSyncBaseView {\n    @Static protected request!: ParsedSetupSwapRequest;\n    @Getter protected findWallet!: (id: string) => WalletInfo | undefined;\n    protected _account!: WalletInfo;\n    protected _isDestroyed: boolean = false;\n\n    protected async mounted() {\n        // use mounted instead of created to ensure that SetupSwapLedger has the chance to run its created hook before.\n\n        // existence checked by _hubApiHandler in RpcApi\n        this._account = this.findWallet(this.request.walletId)!;\n\n        try {\n            const swapSetupInfo = await this._collectSwapSetupInfo();\n            if (this._isDestroyed || !swapSetupInfo) return; // destroyed or failed and is displaying an error\n            this._setupSwap(swapSetupInfo);\n        } catch (e) {\n            this.error = e.message || e;\n            if (this.state === this.State.SYNCING_FAILED // keep the error message displayed and offer to retry\n                || this._isDestroyed) return;\n            this.$rpc.reject(e);\n        }\n    }\n\n    protected destroyed() {\n        this._isDestroyed = true;\n    }\n\n    protected _setupSwap(swapSetupInfo: SwapSetupInfo) {\n        // note that this method gets overwritten for SetupSwapLedger\n\n        const keyguardRequest: KeyguardSignSwapRequest = {\n            ...swapSetupInfo,\n\n            appName: this.request.appName,\n\n            keyId: this._account.keyId,\n            keyLabel: this._account.labelForKeyguard,\n\n            swapId: this.request.swapId,\n\n            // Display data\n            fiatCurrency: this.request.fiatCurrency,\n            fundingFiatRate: this.request.fundingFiatRate,\n            redeemingFiatRate: this.request.redeemingFiatRate,\n            fundFees: this.request.fundFees,\n            redeemFees: this.request.redeemFees,\n            serviceSwapFee: this.request.serviceSwapFee,\n            ...(this.request.layout === 'slider' ? {\n                layout: 'slider',\n                nimiqAddresses: this.request.nimiqAddresses!, // existence ensured by RequestParser\n                bitcoinAccount: this.request.bitcoinAccount!,\n            } : {\n                layout: 'standard',\n            }),\n        };\n\n        const client = this.$rpc.createKeyguardClient(true);\n        client.signSwap(keyguardRequest);\n    }\n\n    protected async _collectSwapSetupInfo(): Promise<SwapSetupInfo | null> {\n        // Note that the sync state will only be visible in the UI if the sync is not instant (if we actually sync)\n        this.state = this.State.SYNCING;\n\n        if ((this.request.fund.type === SwapAsset.BTC || this.request.redeem.type === SwapAsset.BTC)\n            && (!this._account.btcXPub || !this._account.btcAddresses || !this._account.btcAddresses.external.length)) {\n            throw new Error(`Account does not have any Bitcoin addresses`);\n        }\n\n        let fundingInfo: SwapSetupInfo['fund'] | null = null;\n        let redeemingInfo: SwapSetupInfo['redeem'] | null = null;\n\n        if (this.request.fund.type === SwapAsset.NIM) {\n            const senderContract = this._account.findContractByAddress(this.request.fund.sender);\n            const signer = this._account.findSignerForAddress(this.request.fund.sender);\n\n            if (!signer) {\n                throw new Error(`Unknown sender ${this.request.fund.sender.toUserFriendlyAddress()}`);\n            }\n\n            fundingInfo = {\n                type: SwapAsset.NIM,\n                keyPath: signer.path,\n                sender: (senderContract || signer).address.serialize(),\n                senderType: senderContract ? senderContract.type : Nimiq.Account.Type.BASIC,\n                senderLabel: (senderContract || signer).label,\n                value: this.request.fund.value,\n                fee: this.request.fund.fee,\n                validityStartHeight: this.request.fund.validityStartHeight,\n            };\n        }\n\n        if (this.request.fund.type === SwapAsset.BTC) {\n            if (!this.request.fund.inputs.length) {\n                throw new Error('No BTC funding inputs provided');\n            }\n\n            const addresses = this.request.fund.inputs\n                .map((input) => input.address)\n                .concat(\n                    this.request.fund.changeOutput ? this.request.fund.changeOutput.address : [],\n                    this.request.fund.refundAddress,\n                );\n            // Only derive BTC addresses once for the account, not multiple times if addresses are fake\n            let didDeriveAddresses = false;\n            const addressInfos: { [address: string]: BtcAddressInfo | null } = {};\n            try {\n                for (const address of addresses) {\n                    let addressInfo = this._account.findBtcAddressInfo(address, !didDeriveAddresses);\n                    if (addressInfo instanceof Promise) {\n                        didDeriveAddresses = true;\n                        addressInfo = await addressInfo;\n                    }\n                    addressInfos[address] = addressInfo;\n                }\n            } catch (e) {\n                this.state = this.State.SYNCING_FAILED;\n                throw e;\n            }\n\n            // Validate that we own the refund address\n            const refundAddressInfo = addressInfos[this.request.fund.refundAddress];\n            if (!refundAddressInfo) {\n                throw new Error(`Refund address not found: ${this.request.fund.refundAddress}`);\n            }\n\n            // Validate that we own the change address\n            if (this.request.fund.changeOutput) {\n                const addressInfo = addressInfos[this.request.fund.changeOutput.address];\n                if (!addressInfo) {\n                    throw new Error(`Change address not found: ${this.request.fund.changeOutput.address}`);\n                }\n            }\n\n            fundingInfo = {\n                type: SwapAsset.BTC,\n                inputs: this.request.fund.inputs.map((input) => {\n                    const addressInfo = addressInfos[input.address];\n                    if (!addressInfo) {\n                        throw new Error(`Input address not found: ${input.address}`);\n                    }\n                    return {\n                        ...input,\n                        keyPath: addressInfo.path,\n                    };\n                }),\n                recipientOutput: this.request.fund.output,\n                ...(this.request.fund.changeOutput ? {\n                    changeOutput: {\n                        ...this.request.fund.changeOutput,\n                        keyPath: addressInfos[this.request.fund.changeOutput.address]!.path,\n                    },\n                } : {}),\n                locktime: this.request.fund.locktime,\n                refundKeyPath: refundAddressInfo.path,\n            };\n        }\n\n        if (this.request.fund.type === SwapAsset.EUR) {\n            fundingInfo = {\n                type: SwapAsset.EUR,\n                amount: this.request.fund.value,\n                fee: this.request.fund.fee,\n                bankLabel: this.request.fund.bankLabel,\n            };\n        }\n\n        if (this.request.redeem.type === SwapAsset.NIM) {\n            const signer = this._account.findSignerForAddress(this.request.redeem.recipient);\n            if (!signer) {\n                throw new Error(`Redeem address not found: ${this.request.redeem.recipient}`);\n            }\n\n            if (!signer.address.equals(this.request.redeem.recipient)) {\n                throw new Error(`Redeem address cannot be a contract`);\n            }\n\n            redeemingInfo = {\n                type: SwapAsset.NIM,\n                keyPath: signer.path,\n                recipient: signer.address.serialize(),\n                recipientLabel: signer.label,\n                value: this.request.redeem.value,\n                fee: this.request.redeem.fee,\n                validityStartHeight: this.request.redeem.validityStartHeight,\n            };\n        }\n\n        if (this.request.redeem.type === SwapAsset.BTC) {\n            let addressInfo: BtcAddressInfo | null;\n            try {\n                addressInfo = await this._account.findBtcAddressInfo(this.request.redeem.output.address);\n            } catch (e) {\n                this.state = this.State.SYNCING_FAILED;\n                throw e;\n            }\n            if (!addressInfo) {\n                throw new Error(`Redeem address not found: ${this.request.redeem.output.address}`);\n            }\n\n            redeemingInfo = {\n                type: SwapAsset.BTC,\n                input: {\n                    ...this.request.redeem.input,\n                    keyPath: addressInfo.path,\n                },\n                output: {\n                    ...this.request.redeem.output,\n                    keyPath: addressInfo.path,\n                },\n            };\n        }\n\n        if (this.request.redeem.type === SwapAsset.EUR) {\n            redeemingInfo = {\n                type: SwapAsset.EUR,\n                keyPath: DEFAULT_KEY_PATH,\n                settlement: this.request.redeem.settlement,\n                amount: this.request.redeem.value,\n                fee: this.request.redeem.fee,\n                bankLabel: this.request.redeem.bankLabel,\n            };\n        }\n\n        if (!fundingInfo || !redeemingInfo) {\n            throw new Error('Funding or redeeming info missing.');\n        }\n\n        this.state = this.State.NONE;\n        return { fund: fundingInfo, redeem: redeemingInfo };\n    }\n}\n","\nimport { Component } from 'vue-property-decorator';\nimport { State, Getter } from 'vuex-class';\nimport { PlainOutput, TransactionDetails as BtcTransactionDetails } from '@nimiq/electrum-client';\nimport { SmallPage } from '@nimiq/vue-components';\nimport BitcoinSyncBaseView from './BitcoinSyncBaseView.vue';\nimport {\n    init as initFastspotApi,\n    SwapAsset,\n    PreSwap,\n    Swap,\n    confirmSwap,\n    getSwap,\n    NimHtlcDetails,\n    BtcHtlcDetails,\n    Contract,\n} from '@nimiq/fastspot-api';\nimport StatusScreen from '../components/StatusScreen.vue';\nimport GlobalClose from '../components/GlobalClose.vue';\nimport Network from '../components/Network.vue';\nimport { SetupSwapResult, SignedBtcTransaction } from '../lib/PublicRequestTypes';\nimport { Static } from '../lib/StaticStore';\nimport { ParsedSetupSwapRequest } from '../lib/RequestTypes';\nimport Config from 'config';\nimport { loadNimiq } from '../lib/Helpers';\nimport { loadBitcoinJS } from '../lib/bitcoin/BitcoinJSLoader';\nimport { getElectrumClient } from '../lib/bitcoin/ElectrumClient';\nimport { decodeBtcScript } from '../lib/bitcoin/BitcoinHtlcUtils';\nimport { WalletInfo } from '../lib/WalletInfo';\nimport patchMerkleTree from '../lib/MerkleTreePatch';\n\n// Import only types to avoid bundling of KeyguardClient in Ledger request if not required.\n// (But note that currently, the KeyguardClient is still always bundled in the RpcApi).\ntype KeyguardSignSwapResult = import('@nimiq/keyguard-client').SignSwapResult;\ntype KeyguardSignSwapTransactionsRequest = import('@nimiq/keyguard-client').SignSwapTransactionsRequest;\nexport type SwapHtlcInfo = Pick<KeyguardSignSwapTransactionsRequest, 'fund' | 'redeem'>;\n\n@Component({components: {SmallPage, StatusScreen, GlobalClose}}) // including components used in parent class\nexport default class SetupSwapSuccess extends BitcoinSyncBaseView {\n    protected get State() {\n        return {\n            ...super.State,\n            FETCHING_SWAP_DATA: 'fetching-swap-data',\n            FETCHING_SWAP_DATA_FAILED: 'fetching-swap-data-failed',\n            SIGNING_TRANSACTIONS: 'signing-transactions',\n        };\n    }\n\n    @Getter protected findWallet!: (id: string) => WalletInfo | undefined;\n    @Static protected request!: ParsedSetupSwapRequest;\n    protected nimiqNetwork: Network = new Network();\n    protected _isDestroyed: boolean = false;\n    @State private keyguardResult?: KeyguardSignSwapResult;\n\n    protected async mounted() {\n        Promise.all([\n            // if nimiq is involved, preload nimiq cryptography used in createTx, makeSignTransactionResult\n            this.request.fund.type === SwapAsset.NIM || this.request.redeem.type === SwapAsset.NIM ? loadNimiq() : null,\n            // if BTC is involved preload BitcoinJS\n            this.request.fund.type === SwapAsset.BTC || this.request.redeem.type === SwapAsset.BTC\n                ? loadBitcoinJS() : null,\n            // if we need to fetch the tx from the network, preload the electrum client\n            this.request.redeem.type === SwapAsset.BTC ? getElectrumClient() : null,\n        ]).catch(() => void 0);\n\n        // use mounted instead of created to ensure that SetupSwapLedger has the chance to run its created hook before.\n        if (!await this._shouldConfirmSwap()) {\n            return; // keep potential error message displayed\n        }\n\n        // Confirm swap to Fastspot and get contract details\n        this.state = this.State.FETCHING_SWAP_DATA;\n        initFastspotApi(Config.fastspot.apiEndpoint, Config.fastspot.apiKey);\n\n        let refundAddress = '';\n        switch (this.request.fund.type) {\n            case SwapAsset.NIM:\n                refundAddress = this.request.fund.sender.toUserFriendlyAddress();\n                break;\n            case SwapAsset.BTC:\n                refundAddress = this.request.fund.refundAddress;\n                break;\n            default: break;\n        }\n\n        let redeemAddress: string | { kty: string, crv: string, x: string } = '';\n        switch (this.request.redeem.type) {\n            case SwapAsset.NIM:\n                redeemAddress = this.request.redeem.recipient.toUserFriendlyAddress();\n                break;\n            case SwapAsset.BTC:\n                redeemAddress = this.request.redeem.output.address;\n                break;\n            case SwapAsset.EUR:\n                // Assemble recipient object\n                redeemAddress = {\n                    kty: 'OKP',\n                    crv: 'Ed25519',\n                    x: this._getOasisRecipientPublicKey(),\n                };\n                break;\n            default: break;\n        }\n\n        // Generate UID to track account limits\n        const walletInfo = this.findWallet(this.request.walletId);\n        if (!walletInfo) throw new Error('UNEXPECTED: Cannot find walletId for swap signing');\n        const uid = await walletInfo.getUid();\n\n        let confirmedSwap: Swap;\n        try {\n            confirmedSwap = await confirmSwap({\n                id: this.request.swapId,\n            } as PreSwap, this.request.redeem.type === SwapAsset.EUR ? {\n                asset: this.request.redeem.type,\n                ...(redeemAddress as { kty: string, crv: string, x: string }),\n            } : {\n                // Redeem\n                asset: this.request.redeem.type,\n                address: (redeemAddress as string),\n            }, {\n                // Refund\n                asset: this.request.fund.type,\n                address: refundAddress,\n            }, uid).catch((error) => {\n                if (error.message === 'The swap was already confirmed before.') {\n                    return getSwap(this.request.swapId) as Promise<Swap>;\n                } else if (error.message.includes('503')) {\n                    throw new Error(this.$t('503 Service unavailable - please try again later') as string);\n                } else {\n                    throw error;\n                }\n            });\n\n            console.debug('Swap:', confirmedSwap);\n        } catch (error) {\n            console.error(error);\n            this.state = this.State.FETCHING_SWAP_DATA_FAILED;\n            this.error = error.message || error;\n            return;\n        }\n\n        if (this._isDestroyed) return;\n\n        // Validate contract details\n        // TODO: Validate timeouts if possible (e.g. not possible for NIM)\n        let hashRoot: string | undefined;\n        let nimiqHtlcHashAlgorithm: Nimiq.Hash.Algorithm | undefined;\n\n        if (confirmedSwap.from.asset === SwapAsset.NIM || confirmedSwap.to.asset === SwapAsset.NIM) {\n            const { data: nimHtlcData } = confirmedSwap.contracts[SwapAsset.NIM]!.htlc as NimHtlcDetails;\n            const decodedNimHtlc = Nimiq.HashedTimeLockedContract.dataToPlain(Nimiq.BufferUtils.fromHex(nimHtlcData));\n\n            if (!('hashRoot' in decodedNimHtlc && 'hashAlgorithm' in decodedNimHtlc && 'hashCount' in decodedNimHtlc\n                && 'sender' in decodedNimHtlc && 'recipient' in decodedNimHtlc)) {\n                this.$rpc.reject(new Error('Invalid Nimiq HTLC data'));\n                return;\n            }\n            const {\n                sender: decodedRefundAddress,\n                recipient: decodedRedeemAddress,\n                hashCount,\n            } = decodedNimHtlc;\n            hashRoot = decodedNimHtlc.hashRoot;\n            nimiqHtlcHashAlgorithm = (Nimiq.Hash.Algorithm as any).fromAny(decodedNimHtlc.hashAlgorithm);\n            const hashSize = Nimiq.Hash.SIZE.get(nimiqHtlcHashAlgorithm!);\n\n            if (nimiqHtlcHashAlgorithm === Nimiq.Hash.Algorithm.ARGON2D) {\n                // argon2d is blacklisted for HTLCs\n                this.$rpc.reject(new Error('Disallowed HTLC hash algorithm argon2d'));\n                return;\n            }\n            if (hashSize !== 32) {\n                // Hash must be 32 bytes, as otherwise it cannot work with the BTC HTLC\n                this.$rpc.reject(new Error('Disallowed HTLC hash length'));\n                return;\n            }\n            if (hashCount !== 1) {\n                // Hash count must be 1 for us to accept the swap\n                this.$rpc.reject(new Error('Disallowed HTLC hash count'));\n                return;\n            }\n\n            if (confirmedSwap.from.asset === SwapAsset.NIM && refundAddress !== decodedRefundAddress) {\n                this.$rpc.reject(new Error('Unknown HTLC refund address'));\n                return;\n            }\n            if (confirmedSwap.to.asset === SwapAsset.NIM && redeemAddress !== decodedRedeemAddress) {\n                this.$rpc.reject(new Error('Unknown HTLC redeem address'));\n                return;\n            }\n        }\n\n        if (confirmedSwap.from.asset === SwapAsset.BTC || confirmedSwap.to.asset === SwapAsset.BTC) {\n            const { script: btcHtlcScript } = confirmedSwap.contracts[SwapAsset.BTC]!.htlc as BtcHtlcDetails;\n            await loadBitcoinJS();\n            const decodedBtcHtlc = await decodeBtcScript(btcHtlcScript);\n\n            if (hashRoot && decodedBtcHtlc.hashRoot !== hashRoot) {\n                this.$rpc.reject(new Error('HTLC hash roots do not match'));\n                return;\n            }\n            hashRoot = decodedBtcHtlc.hashRoot;\n\n            if (confirmedSwap.from.asset === SwapAsset.BTC && refundAddress !== decodedBtcHtlc.refundAddress) {\n                this.$rpc.reject(new Error('Unknown HTLC refund address'));\n                return;\n            }\n            if (confirmedSwap.to.asset === SwapAsset.BTC && redeemAddress !== decodedBtcHtlc.redeemAddress) {\n                this.$rpc.reject(new Error('Unknown HTLC redeem address'));\n                return;\n            }\n        }\n\n        if (confirmedSwap.from.asset === SwapAsset.EUR || confirmedSwap.to.asset === SwapAsset.EUR) {\n            // TODO: Fetch contract from OASIS API and compare instead of trusting Fastspot\n\n            if (hashRoot && confirmedSwap.hash !== hashRoot) {\n                this.$rpc.reject(new Error('HTLC hash roots do not match'));\n                return;\n            }\n            hashRoot = confirmedSwap.hash;\n\n            // TODO: Validate correct recipient public key\n        }\n\n        if (!hashRoot) {\n            this.$rpc.reject(new Error('UNEXPECTED: Could not extract swap hash from contracts'));\n            return;\n        }\n\n        // Construct htlc info\n\n        let fundingHtlcInfo: SwapHtlcInfo['fund'] | null = null;\n        let redeemingHtlcInfo: SwapHtlcInfo['redeem'] | null = null;\n\n        if (this.request.fund.type === SwapAsset.NIM) {\n            const nimHtlcData = confirmedSwap.contracts[SwapAsset.NIM]!.htlc as NimHtlcDetails;\n\n            fundingHtlcInfo = {\n                type: SwapAsset.NIM,\n                htlcData: Nimiq.BufferUtils.fromHex(nimHtlcData.data),\n            };\n        }\n\n        if (this.request.fund.type === SwapAsset.BTC) {\n            const btcHtlcData = confirmedSwap.contracts[SwapAsset.BTC]!.htlc as BtcHtlcDetails;\n\n            fundingHtlcInfo = {\n                type: SwapAsset.BTC,\n                htlcScript: Nimiq.BufferUtils.fromHex(btcHtlcData.script),\n            };\n        }\n\n        if (this.request.fund.type === SwapAsset.EUR) {\n            const eurContract = confirmedSwap.contracts[SwapAsset.EUR] as Contract<SwapAsset.EUR>;\n            const eurHtlcData = eurContract.htlc;\n\n            fundingHtlcInfo = {\n                type: SwapAsset.EUR,\n                hash: hashRoot,\n                timeout: eurContract.timeout,\n                htlcId: eurHtlcData.address,\n            };\n        }\n\n        if (this.request.redeem.type === SwapAsset.NIM) {\n            const nimHtlcData = confirmedSwap.contracts[SwapAsset.NIM]!.htlc as NimHtlcDetails;\n\n            redeemingHtlcInfo = {\n                type: SwapAsset.NIM,\n                htlcData: Nimiq.BufferUtils.fromHex(nimHtlcData.data),\n                htlcAddress: nimHtlcData.address,\n            };\n        }\n\n        if (this.request.redeem.type === SwapAsset.BTC) {\n            const btcHtlcData = confirmedSwap.contracts[SwapAsset.BTC]!.htlc as BtcHtlcDetails;\n\n            // Fetch missing info from the blockchain\n            // BTC tx hash and output data\n\n            try {\n                this.state = this.State.SYNCING;\n                const { transaction, output } = await new Promise<{\n                    transaction: BtcTransactionDetails,\n                    output: PlainOutput,\n                }>(async (resolve, reject) => {\n                    try {\n                        function listener(tx: BtcTransactionDetails) {\n                            const htlcOutput = tx.outputs.find((out) => out.address === btcHtlcData.address);\n                            if (htlcOutput && htlcOutput.value === confirmedSwap.to.amount) {\n                                resolve({\n                                    transaction: tx,\n                                    output: htlcOutput,\n                                });\n                                electrum.removeListener(handle);\n                                return true;\n                            }\n                            return false;\n                        }\n\n                        const electrum = await getElectrumClient();\n\n                        // First subscribe to new transactions\n                        const handle = electrum.addTransactionListener(listener, [btcHtlcData.address]);\n\n                        // Then check history\n                        const history = await electrum.getTransactionsByAddress(btcHtlcData.address);\n                        for (const tx of history) {\n                            if (listener(tx)) return;\n                        }\n                    } catch (error) {\n                        reject(error);\n                    }\n                });\n\n                redeemingHtlcInfo = {\n                    type: SwapAsset.BTC,\n                    htlcScript: Nimiq.BufferUtils.fromHex(btcHtlcData.script),\n                    transactionHash: transaction.transactionHash,\n                    outputIndex: output.index,\n                };\n            } catch (error) {\n                console.error(error);\n                this.state =  this.State.SYNCING_FAILED;\n                this.error = error.message || error;\n                return;\n            }\n        }\n\n        if (this.request.redeem.type === SwapAsset.EUR) {\n            const eurContract = confirmedSwap.contracts[SwapAsset.EUR] as Contract<SwapAsset.EUR>;\n            const eurHtlcData = eurContract.htlc;\n\n            redeemingHtlcInfo = {\n                type: SwapAsset.EUR,\n                hash: hashRoot,\n                timeout: eurContract.timeout,\n                htlcId: eurHtlcData.address,\n            };\n        }\n\n        if (this._isDestroyed) return;\n\n        if (!fundingHtlcInfo || !redeemingHtlcInfo) {\n            this.$rpc.reject(new Error('Funding or redeeming HTLC info missing.'));\n            return;\n        }\n\n        // Sign transactions\n        this.state = this.State.SIGNING_TRANSACTIONS;\n        let nimiqTransaction: Nimiq.Transaction | undefined;\n        let nimiqProxyTransaction: Nimiq.Transaction | undefined;\n        let bitcoinTransaction: SignedBtcTransaction | undefined;\n        let refundTransaction: string | undefined;\n        let euroSettlement: string | undefined;\n        try {\n            const signingResult = await this._signSwapTransactions({\n                fund: fundingHtlcInfo,\n                redeem: redeemingHtlcInfo,\n            });\n            if (!signingResult) return; // failed to sign and an error is getting displayed\n            ({\n                nim: nimiqTransaction,\n                nimProxy: nimiqProxyTransaction,\n                btc: bitcoinTransaction,\n                eur: euroSettlement,\n                refundTx: refundTransaction,\n            } = signingResult);\n        } catch (error) {\n            if (!this._isDestroyed) {\n                this.$rpc.reject(error);\n            }\n            return;\n        }\n\n        if (this._isDestroyed) return;\n\n        if (nimiqTransaction) {\n            // for redeeming nim transaction prepare a htlc proof with a dummy preImage and hashRoot\n            if (this.request.redeem.type === SwapAsset.NIM && redeemingHtlcInfo.type === SwapAsset.NIM\n                && nimiqHtlcHashAlgorithm) {\n                const dummyPreImage = '0000000000000000000000000000000000000000000000000000000000000000';\n                const dummyHashRoot = '66687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f2925'; // sha256\n\n                const proof = new Nimiq.SerialBuffer(3 + 2 * 32 + nimiqTransaction.proof.length);\n                proof.writeUint8(Nimiq.HashedTimeLockedContract.ProofType.REGULAR_TRANSFER);\n                proof.writeUint8(nimiqHtlcHashAlgorithm);\n                proof.writeUint8(1); // hashCount must be 1 for our swaps\n                proof.write(Nimiq.BufferUtils.fromHex(dummyHashRoot));\n                proof.write(Nimiq.BufferUtils.fromHex(dummyPreImage));\n                proof.write(new Nimiq.SerialBuffer(nimiqTransaction.proof)); // Current proof is regular SignatureProof\n                nimiqTransaction.proof = proof;\n            }\n\n            // Validate that transaction is valid\n            patchMerkleTree();\n            if (!nimiqTransaction.verify()) {\n                this.$rpc.reject(new Error('NIM transaction is invalid'));\n                return;\n            }\n        }\n\n        // Construct Hub response\n\n        const result: SetupSwapResult = {\n            nim: nimiqTransaction ? await this.nimiqNetwork.makeSignTransactionResult(nimiqTransaction) : undefined,\n            nimProxy: nimiqProxyTransaction\n                ? await this.nimiqNetwork.makeSignTransactionResult(nimiqProxyTransaction)\n                : undefined,\n            btc: bitcoinTransaction,\n            eur: euroSettlement,\n            refundTx: refundTransaction,\n        };\n\n        this.$rpc.resolve(result);\n    }\n\n    protected destroyed() {\n        this._isDestroyed = true;\n    }\n\n    protected async _shouldConfirmSwap() {\n        // note that this method gets overwritten for SetupSwapLedger\n        return this.keyguardResult && this.keyguardResult.success && !this._isDestroyed;\n    }\n\n    protected _getOasisRecipientPublicKey() {\n        // note that this method gets overwritten for SetupSwapLedger\n        if (!this.keyguardResult || !this.keyguardResult.eurPubKey) {\n            throw new Error('Cannot find OASIS recipient public key');\n        }\n        return Nimiq.BufferUtils.toBase64Url(Nimiq.BufferUtils.fromHex(this.keyguardResult.eurPubKey))\n            .replace(/\\.*$/, ''); // OASIS cannot handle trailing filler dots\n    }\n\n    protected async _signSwapTransactions(htlcInfo: SwapHtlcInfo): Promise<{\n        nim?: Nimiq.Transaction,\n        nimProxy?: Nimiq.Transaction, // only in SetupSwapLedger\n        btc?: SignedBtcTransaction,\n        eur?: string,\n        refundTx?: string,\n    } | null> {\n        // Note that this method gets overwritten for SetupSwapLedger\n        const keyguardRequest: KeyguardSignSwapTransactionsRequest = {\n            ...htlcInfo,\n            swapId: this.request.swapId,\n        };\n\n        const client = this.$rpc.createKeyguardClient();\n        const {\n            nim: nimiqSignatureResult,\n            btc: bitcoinTransaction,\n            eur: euroSettlement,\n            refundTx,\n        } = await client.signSwapTransactions(keyguardRequest);\n\n        // create a nimiq transaction\n        let nimiqTransaction: Nimiq.Transaction | undefined;\n        if (this.request.fund.type === SwapAsset.NIM && htlcInfo.fund.type === SwapAsset.NIM && nimiqSignatureResult) {\n            nimiqTransaction = await this.nimiqNetwork.createTx({\n                ...this.request.fund,\n                recipient: Nimiq.Address.CONTRACT_CREATION,\n                recipientType: Nimiq.Account.Type.HTLC,\n                data: htlcInfo.fund.htlcData,\n                flags: Nimiq.Transaction.Flag.CONTRACT_CREATION,\n                signerPubKey: nimiqSignatureResult.publicKey,\n                signature: nimiqSignatureResult.signature,\n            });\n        } else if (this.request.redeem.type === SwapAsset.NIM && htlcInfo.redeem.type === SwapAsset.NIM\n            && nimiqSignatureResult) {\n            nimiqTransaction = await this.nimiqNetwork.createTx({\n                ...this.request.redeem,\n                sender: Nimiq.Address.fromUserFriendlyAddress(htlcInfo.redeem.htlcAddress),\n                senderType: Nimiq.Account.Type.HTLC,\n                signerPubKey: nimiqSignatureResult.publicKey,\n                signature: nimiqSignatureResult.signature,\n            });\n        }\n\n        return {\n            nim: nimiqTransaction,\n            btc: bitcoinTransaction ? {\n                serializedTx: bitcoinTransaction.raw,\n                hash: bitcoinTransaction.transactionHash,\n            } : undefined,\n            eur: euroSettlement,\n            refundTx,\n        };\n    }\n\n    protected get statusScreenState(): StatusScreen.State {\n        if (this.state === this.State.FETCHING_SWAP_DATA_FAILED) return StatusScreen.State.ERROR;\n        return super.statusScreenState;\n    }\n\n    protected get statusScreenTitle() {\n        switch (this.state) {\n            case this.State.FETCHING_SWAP_DATA_FAILED:\n                return this.$t('Swap Setup Failed') as string;\n            case this.State.SYNCING_FAILED:\n                return this.$t('Syncing Failed') as string;\n            default:\n                return this.$t('Preparing Swap') as string;\n        }\n    }\n\n    protected get statusScreenStatus() {\n        switch (this.state) {\n            case this.State.FETCHING_SWAP_DATA:\n                return this.$t('Fetching swap data...') as string;\n            case this.State.SIGNING_TRANSACTIONS:\n                return this.$t('Signing transactions...') as string;\n            default:\n                return super.statusScreenStatus;\n        }\n    }\n\n    protected get statusScreenMessage() {\n        if (this.state === this.State.FETCHING_SWAP_DATA_FAILED) {\n            return this.$t('Fetching swap data failed: {error}', { error: this.error }) as string;\n        }\n        return super.statusScreenMessage;\n    }\n\n    protected get statusScreenAction() {\n        if (this.state !== this.State.FETCHING_SWAP_DATA_FAILED\n            && this.state !== this.State.SYNCING_FAILED) return '';\n        return this.$t('Retry') as string;\n    }\n\n    protected get isGlobalCloseShown() {\n        return this.state === this.State.FETCHING_SWAP_DATA_FAILED || super.isGlobalCloseShown;\n    }\n}\n","export default function patchMerkleTree() {\n    // Patch the Nimiq core MerkleTree class until it gets actually shipped with the Nimiq core web-offline package.\n    if (typeof Nimiq.MerkleTree !== 'undefined') {\n        console.warn('Nimiq.MerkleTree patch not required anymore and can be removed.');\n    } else {\n        type Hashable = Nimiq.Hash | Uint8Array | { hash: () => Nimiq.Hash } | { serialize: () => Uint8Array };\n\n        class MerkleTree {\n            public static computeRoot(\n                values: Hashable[],\n                fnHash = MerkleTree._hash,\n            ): Nimiq.Hash {\n                return MerkleTree._computeRoot(values, fnHash);\n            }\n\n            private static _computeRoot(values: Hashable[], fnHash: typeof MerkleTree._hash): Nimiq.Hash {\n                const len = values.length;\n                if (len === 0) {\n                    return Nimiq.Hash.light(new Uint8Array(0));\n                }\n                if (len === 1) {\n                    return fnHash(values[0]);\n                }\n\n                const mid = Math.round(len / 2);\n                const left = values.slice(0, mid);\n                const right = values.slice(mid);\n                const leftHash = MerkleTree._computeRoot(left, fnHash);\n                const rightHash = MerkleTree._computeRoot(right, fnHash);\n                return Nimiq.Hash.light(\n                    Nimiq.BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()) as Uint8Array,\n                );\n            }\n\n            private static _hash(o: Hashable): Nimiq.Hash {\n                if (o instanceof Nimiq.Hash) {\n                    return o;\n                }\n                if ('hash' in o && typeof o.hash === 'function') {\n                    return o.hash();\n                }\n                if ('serialize' in o && typeof o.serialize === 'function') {\n                    return Nimiq.Hash.light(o.serialize());\n                }\n                if (o instanceof Uint8Array) {\n                    return Nimiq.Hash.light(o);\n                }\n                throw new Error('MerkleTree objects must be Uint8Array or have a .hash()/.serialize() method');\n            }\n        }\n\n        Nimiq.MerkleTree = MerkleTree;\n    }\n}\n","import { BIP84_ADDRESS_PREFIX } from './BitcoinConstants';\nimport { loadBitcoinJS } from './BitcoinJSLoader';\nimport Config from 'config';\n\nexport async function decodeBtcScript(script: string) {\n    // note that buffer is marked as external module in vue.config.js and internally, the buffer bundled\n    // with BitcoinJS is used, therefore we retrieve it after having BitcoinJS loaded.\n    // TODO change this when we don't prebuild BitcoinJS anymore\n    await loadBitcoinJS();\n    const Buffer = await import('buffer').then((module) => module.Buffer);\n\n    const error = new Error('Invalid BTC HTLC script');\n\n    if (!script || typeof script !== 'string' || !script.length) throw error;\n    const chunks = BitcoinJS.script.decompile(Buffer.from(script, 'hex'));\n    if (!chunks) throw error;\n    const asm = BitcoinJS.script.toASM(chunks).split(' ');\n\n    let branchesVerifiedIndividually = false;\n\n    /* eslint-disable no-plusplus */\n    let i = 0;\n\n    // Start redeem branch\n    if (asm[i] !== 'OP_IF') throw error;\n\n    // Check secret size\n    if (asm[++i] !== 'OP_SIZE' || asm[++i] !== (32).toString(16) || asm[++i] !== 'OP_EQUALVERIFY') throw error;\n\n    // Check hash\n    if (asm[++i] !== 'OP_SHA256' || asm[i + 2] !== 'OP_EQUALVERIFY') throw error;\n    const hashRoot = asm[++i];\n    ++i;\n\n    // Check redeem address\n    if (asm[++i] !== 'OP_DUP' || asm[++i] !== 'OP_HASH160') throw error;\n    const redeemAddressBytes = asm[++i];\n\n    // End redeem branch, start refund branch\n    if (asm[++i] !== 'OP_ELSE') {\n        branchesVerifiedIndividually = true;\n        if (asm[i] !== 'OP_EQUALVERIFY' || asm[++i] !== 'OP_CHECKSIG' || asm[++i] !== 'OP_ELSE') throw error;\n    }\n\n    // Check timeout\n    // Bitcoin HTLC timeouts are backdated 1 hour, to account for Bitcoin's\n    // minimum age for valid transaction locktimes (6 blocks).\n    const timeoutTimestamp = BitcoinJS.script.number.decode(Buffer.from(asm[++i], 'hex')) + (60 * 60);\n    if (asm[++i] !== 'OP_CHECKLOCKTIMEVERIFY' || asm[++i] !== 'OP_DROP') throw error;\n\n    // Check refund address\n    if (asm[++i] !== 'OP_DUP' || asm[++i] !== 'OP_HASH160') throw error;\n    const refundAddressBytes = asm[++i];\n\n    // End refund branch\n    if (branchesVerifiedIndividually) {\n        if (asm[++i] !== 'OP_EQUALVERIFY' || asm[++i] !== 'OP_CHECKSIG' || asm[++i] !== 'OP_ENDIF') throw error;\n    } else {\n        // End contract\n        // eslint-disable-next-line no-lonely-if\n        if (asm[++i] !== 'OP_ENDIF' || asm[++i] !== 'OP_EQUALVERIFY' || asm[++i] !== 'OP_CHECKSIG') throw error;\n    }\n\n    if (asm.length !== ++i) throw error;\n    /* eslint-enable no-plusplus */\n\n    const refundAddress = BitcoinJS.address\n        .toBech32(Buffer.from(refundAddressBytes, 'hex'), 0, BIP84_ADDRESS_PREFIX[Config.bitcoinNetwork]);\n\n    const redeemAddress = BitcoinJS.address\n        .toBech32(Buffer.from(redeemAddressBytes, 'hex'), 0, BIP84_ADDRESS_PREFIX[Config.bitcoinNetwork]);\n\n    return {\n        refundAddress,\n        redeemAddress,\n        hashRoot,\n        timeoutTimestamp,\n    };\n}\n","var render, staticRenderFns\nimport script from \"./SetupSwap.vue?vue&type=script&lang=ts&\"\nexport * from \"./SetupSwap.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/iesiyok/projects/acc-js/development/nimiq2/hub/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('665aa8e6')) {\n      api.createRecord('665aa8e6', component.options)\n    } else {\n      api.reload('665aa8e6', component.options)\n    }\n    \n  }\n}\ncomponent.options.__file = \"src/views/SetupSwap.vue\"\nexport default component.exports","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/ts-loader/index.js??ref--12-1!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SetupSwap.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/ts-loader/index.js??ref--12-1!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SetupSwap.vue?vue&type=script&lang=ts&\"","var render, staticRenderFns\nimport script from \"./SetupSwapSuccess.vue?vue&type=script&lang=ts&\"\nexport * from \"./SetupSwapSuccess.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/iesiyok/projects/acc-js/development/nimiq2/hub/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('90525226')) {\n      api.createRecord('90525226', component.options)\n    } else {\n      api.reload('90525226', component.options)\n    }\n    \n  }\n}\ncomponent.options.__file = \"src/views/SetupSwapSuccess.vue\"\nexport default component.exports","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/ts-loader/index.js??ref--12-1!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SetupSwapSuccess.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/ts-loader/index.js??ref--12-1!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SetupSwapSuccess.vue?vue&type=script&lang=ts&\""],"sourceRoot":""}