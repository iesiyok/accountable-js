{"version":3,"sources":["sources://./node_modules/@nimiq/ledger-api/dist/high-level-api/lazy-chunk-request-get-address-and-public-key-bitcoin.es.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAyE;AACgD;AACrF;;AAEpC,mDAAmD,mEAAc;AACjE;AACA;AACA,oBAAoB,oEAAkB;AACtC;AACA;AACA;AACA;AACA,kCAAkC,wEAAc;AAChD,uCAAuC,sDAAI;AAC3C;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAU,CAAC,2DAAS,8CAA8C,QAAQ,IAAI,eAAe;AACnH;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,aAAa,oEAAkB;AAC/B,aAAa,oEAAkB;AAC/B,aAAa,oEAAkB;AAC/B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAgD;AAC/D;AACA;AACA,SAAS;AACT;AACA,sBAAsB,4DAAU,CAAC,2DAAS;AAC1C;AACA,gBAAgB;AAChB;AACA;;AAEe,mGAAoC,EAAC;AACpD","file":"js/31-legacy.js","sourcesContent":["import { R as RequestBitcoin } from './lazy-chunk-request-bitcoin.es.js';\nimport { RequestTypeBitcoin, parseBip32Path, Coin, ErrorState, ErrorType, AddressTypeBitcoin } from './ledger-api.es.js';\nimport './lazy-chunk-request.es.js';\n\nclass RequestGetAddressAndPublicKeyBitcoin extends RequestBitcoin {\n    constructor(keyPath, display, expectedAddress, expectedWalletId) {\n        super(expectedWalletId);\n        this.type = RequestTypeBitcoin.GET_ADDRESS_AND_PUBLIC_KEY;\n        this.keyPath = keyPath;\n        this.display = display;\n        this.expectedAddress = expectedAddress;\n        try {\n            const parsedKeyPath = parseBip32Path(keyPath);\n            if (parsedKeyPath.coin !== Coin.BITCOIN)\n                throw new Error('Not a Bitcoin bip32 path following bip44');\n            this.network = parsedKeyPath.network;\n            this._addressType = parsedKeyPath.addressType;\n        }\n        catch (e) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, `Invalid keyPath ${keyPath}: ${e.message || e}`, this);\n        }\n    }\n    async call(transport) {\n        const api = await this._getLowLevelApi(transport); // throws LOADING_DEPENDENCIES_FAILED on failure\n        const format = {\n            [AddressTypeBitcoin.LEGACY]: 'legacy',\n            [AddressTypeBitcoin.P2SH_SEGWIT]: 'p2sh',\n            [AddressTypeBitcoin.NATIVE_SEGWIT]: 'bech32',\n        }[this._addressType] || 'bech32';\n        // TODO Requesting the pubic key causes a confirmation screen to be displayed on the Ledger for u2f and WebAuthn\n        //  if the user has this privacy feature enabled. Subsequent requests can provide a permission token to avoid\n        //  this screen (see https://github.com/LedgerHQ/app-bitcoin/blob/master/doc/btc.asc#get-wallet-public-key).\n        //  This token is however not supported in @ledgerhq/hw-app-btc lib and therefore has to be implemented by\n        //  ourselves.\n        const { bitcoinAddress: address, publicKey, chainCode } = await api.getWalletPublicKey(this.keyPath, {\n            verify: this.display,\n            format,\n        });\n        if (this.expectedAddress && this.expectedAddress !== address) {\n            throw new ErrorState(ErrorType.REQUEST_ASSERTION_FAILED, 'Address mismatch', this);\n        }\n        return { address, publicKey, chainCode };\n    }\n}\n\nexport default RequestGetAddressAndPublicKeyBitcoin;\n//# sourceMappingURL=lazy-chunk-request-get-address-and-public-key-bitcoin.es.js.map\n"],"sourceRoot":""}