{"version":3,"sources":["sources://./client/HubApi.ts","sources://./client/RequestBehavior.ts","sources://./client/i18n/i18n.ts","sources://./src/config/config.local.ts","sources://./src/i18n lazy ^\\.\\/.*\\.po$ namespace object","sources://./src/i18n/i18n-setup.ts","sources://./src/lib/AccountInfo.ts","sources://./src/lib/AddressUtils.ts","sources://./src/lib/Cashlink.ts","sources://./src/lib/CashlinkStore.ts","sources://./src/lib/Constants.ts","sources://./src/lib/ContractInfo.ts","sources://./src/lib/CookieJar.ts","sources://./src/lib/Helpers.ts","sources://./src/lib/LabelingMachine.ts","sources://./src/lib/PublicRequestTypes.ts","sources://./src/lib/Sentry.ts","sources://./src/lib/Store.ts","sources://./src/lib/Uid.ts","sources://./src/lib/WalletInfo.ts","sources://./src/lib/WalletInfoCollector.ts","sources://./src/lib/WalletStore.ts","sources://./src/lib/bitcoin/Base58.ts","sources://./src/lib/bitcoin/BitcoinConstants.ts","sources://./src/lib/bitcoin/BitcoinJSLoader.ts","sources://./src/lib/bitcoin/BitcoinUtils.ts","sources://./src/lib/bitcoin/BtcAddressInfo.ts","sources://./src/lib/bitcoin/ElectrumClient.ts","sources://./src/store.ts"],"names":[],"mappings":"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","file":"js/chunk-common.js","sourcesContent":["import {\n    PopupRequestBehavior,\n    IFrameRequestBehavior,\n    RequestBehavior,\n    RedirectRequestBehavior,\n    BehaviorType,\n} from './RequestBehavior';\nimport { RedirectRpcClient } from '@nimiq/rpc';\nimport {\n    RequestType,\n    BasicRequest,\n    SimpleRequest,\n    OnboardRequest,\n    ChooseAddressRequest,\n    ChooseAddressResult,\n    CheckoutRequest,\n    SignTransactionRequest,\n    RenameRequest,\n    SignMessageRequest,\n    ExportRequest,\n    ResultByRequestType,\n    Account,\n    Address,\n    SignedTransaction,\n    SimpleResult,\n    ExportResult,\n    SignedMessage,\n    CreateCashlinkRequest,\n    ManageCashlinkRequest,\n    SignBtcTransactionRequest,\n    SignedBtcTransaction,\n    AddBtcAddressesRequest,\n    AddBtcAddressesResult,\n    Cashlink,\n    CashlinkState,\n    CashlinkTheme,\n    Currency,\n    PaymentType,\n    PaymentState,\n    SetupSwapRequest,\n    SetupSwapResult,\n    RefundSwapRequest,\n} from '../src/lib/PublicRequestTypes';\nimport { WalletType } from '../src/lib/Constants';\n\nexport default class HubApi<\n    DB extends BehaviorType = BehaviorType.POPUP,\n    IB extends BehaviorType = BehaviorType.IFRAME\n> { // DB: Default Behavior, IB: Iframe Behavior\n    // Expose request behaviors and enum values. Not exporting them via regular exports to avoid that users of the umd\n    // build have to use bundle['default'] to access the default export.\n    // Additionally, the types of these are exported in the client's index.d.ts.\n    public static readonly BehaviorType = BehaviorType;\n    public static readonly RequestType = RequestType;\n    public static readonly RedirectRequestBehavior = RedirectRequestBehavior;\n    public static readonly PopupRequestBehavior = PopupRequestBehavior;\n    public static readonly AccountType = WalletType; // tslint:disable-line:variable-name\n    public static readonly CashlinkState = CashlinkState;\n    public static readonly CashlinkTheme = CashlinkTheme;\n    public static readonly Currency = Currency;\n    public static readonly PaymentType = PaymentType;\n    public static readonly PaymentState = PaymentState;\n    public static readonly MSG_PREFIX = '\\x16Nimiq Signed Message:\\n';\n\n    /** @deprecated */\n    public static get PaymentMethod() {\n        console.warn('PaymentMethod has been renamed to PaymentType. Access via HubApi.PaymentMethod will soon '\n            + 'get disabled. Use HubApi.PaymentType instead.');\n        return PaymentType;\n    }\n\n    private static get DEFAULT_ENDPOINT() {\n        const originArray = location.origin.split('.');\n        originArray.shift();\n        const tld = originArray.join('.');\n\n        switch (tld) {\n            case 'nimiq.com':\n                return 'https://hub.nimiq.com';\n            case 'nimiq-testnet.com':\n                return 'https://hub.nimiq-testnet.com';\n            default:\n                return 'http://localhost:8080';\n        }\n    }\n\n    private readonly _endpoint: string;\n    private readonly _defaultBehavior: RequestBehavior<DB>;\n    private readonly _checkoutDefaultBehavior: RequestBehavior<DB>;\n    private readonly _iframeBehavior: IFrameRequestBehavior;\n    private readonly _redirectClient: RedirectRpcClient;\n\n    constructor(endpoint: string = HubApi.DEFAULT_ENDPOINT, defaultBehavior?: RequestBehavior<DB>) {\n        this._endpoint = endpoint;\n        this._defaultBehavior = defaultBehavior || new PopupRequestBehavior(\n            `left=${window.innerWidth / 2 - 400},top=75,width=800,height=850,location=yes,dependent=yes`) as any;\n        // If no default behavior specified, use a default behavior with increased window height for checkout.\n        this._checkoutDefaultBehavior = defaultBehavior || new PopupRequestBehavior(\n            `left=${window.innerWidth / 2 - 400},top=50,width=800,height=895,location=yes,dependent=yes`) as any;\n        this._iframeBehavior = new IFrameRequestBehavior();\n\n        // Check for RPC results in the URL\n        this._redirectClient = new RedirectRpcClient('', RequestBehavior.getAllowedOrigin(this._endpoint));\n    }\n\n    public checkRedirectResponse() {\n        return this._redirectClient.init();\n    }\n\n    public on<T extends RequestType>(\n        command: T,\n        resolve: (result: ResultByRequestType<T>, state: any) => void,\n        reject?: (error: Error, state: any) => void,\n    ) {\n        this._redirectClient.onResponse(command,\n            // State is always an object containing at least the __command property\n            (result: ResultByRequestType<T>, rpcId, state) => resolve(result, state),\n            (error: Error, rpcId, state) => {\n                if (!reject) return;\n                reject(error, state);\n            },\n        );\n    }\n\n    /**\n     * Public API\n     */\n\n    public createCashlink<B extends BehaviorType = DB>(\n        request: Promise<CreateCashlinkRequest> | CreateCashlinkRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Cashlink> {\n        return this._request(requestBehavior, RequestType.CREATE_CASHLINK, [request]);\n    }\n\n    public manageCashlink<B extends BehaviorType = DB>(\n        request: Promise<ManageCashlinkRequest> | ManageCashlinkRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Cashlink> {\n        return this._request(requestBehavior, RequestType.MANAGE_CASHLINK, [request]);\n    }\n\n    public checkout<R extends CheckoutRequest, B extends BehaviorType = DB>(\n        request: Promise<R> | R,\n        requestBehavior: RequestBehavior<B> = this._checkoutDefaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT\n        ? void\n        : R extends { version: 2 }\n            ? SimpleResult | SignedTransaction\n            : SignedTransaction\n    > {\n        return this._request(requestBehavior, RequestType.CHECKOUT, [request]) as any;\n    }\n\n    public chooseAddress<B extends BehaviorType = DB>(\n        request: Promise<ChooseAddressRequest> | ChooseAddressRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : ChooseAddressResult> {\n        return this._request(requestBehavior, RequestType.CHOOSE_ADDRESS, [request]);\n    }\n\n    public signTransaction<B extends BehaviorType = DB>(\n        request: Promise<SignTransactionRequest> | SignTransactionRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : SignedTransaction> {\n        return this._request(requestBehavior, RequestType.SIGN_TRANSACTION, [request]);\n    }\n\n    public signMessage<B extends BehaviorType = DB>(\n        request: Promise<SignMessageRequest> | SignMessageRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : SignedMessage> {\n        return this._request(requestBehavior, RequestType.SIGN_MESSAGE, [request]);\n    }\n\n    public signBtcTransaction<B extends BehaviorType = DB>(\n        request: Promise<SignBtcTransactionRequest> | SignBtcTransactionRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : SignedBtcTransaction> {\n        return this._request(requestBehavior, RequestType.SIGN_BTC_TRANSACTION, [request]);\n    }\n\n    public setupSwap<B extends BehaviorType = DB>(\n        request: Promise<SetupSwapRequest> | SetupSwapRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : SetupSwapResult> {\n        return this._request(requestBehavior, RequestType.SETUP_SWAP, [request]);\n    }\n\n    public refundSwap<B extends BehaviorType = DB>(\n        request: Promise<RefundSwapRequest> | RefundSwapRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : SignedTransaction | SignedBtcTransaction> {\n        return this._request(requestBehavior, RequestType.REFUND_SWAP, [request]);\n    }\n\n    /**\n     * Account Management\n     *\n     * Only accessible from Nimiq domains.\n     */\n\n    public onboard<B extends BehaviorType = DB>(\n        request: Promise<OnboardRequest> | OnboardRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Account[]> {\n        return this._request(requestBehavior, RequestType.ONBOARD, [request]);\n    }\n\n    public signup<B extends BehaviorType = DB>(\n        request: Promise<BasicRequest> | BasicRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Account[]> {\n        return this._request(requestBehavior, RequestType.SIGNUP, [request]);\n    }\n\n    public login<B extends BehaviorType = DB>(\n        request: Promise<BasicRequest> | BasicRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Account[]> {\n        return this._request(requestBehavior, RequestType.LOGIN, [request]);\n    }\n\n    public logout<B extends BehaviorType = DB>(\n        request: Promise<SimpleRequest> | SimpleRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : SimpleResult> {\n        return this._request(requestBehavior, RequestType.LOGOUT, [request]);\n    }\n\n    public export<B extends BehaviorType = DB>(\n        request: Promise<ExportRequest> | ExportRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : ExportResult> {\n        return this._request(requestBehavior, RequestType.EXPORT, [request]);\n    }\n\n    public changePassword<B extends BehaviorType = DB>(\n        request: Promise<SimpleRequest> | SimpleRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : SimpleResult> {\n        return this._request(requestBehavior, RequestType.CHANGE_PASSWORD, [request]);\n    }\n\n    public addAddress<B extends BehaviorType = DB>(\n        request: Promise<SimpleRequest> | SimpleRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Address> {\n        return this._request(requestBehavior, RequestType.ADD_ADDRESS, [request]);\n    }\n\n    public rename<B extends BehaviorType = DB>(\n        request: Promise<RenameRequest> | RenameRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Account> {\n        return this._request(requestBehavior, RequestType.RENAME, [request]);\n    }\n\n    public addVestingContract<B extends BehaviorType = DB>(\n        request: Promise<BasicRequest> | BasicRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Account> {\n        return this._request(requestBehavior, RequestType.ADD_VESTING_CONTRACT, [request]);\n    }\n\n    public migrate<B extends BehaviorType = DB>(\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Account[]> {\n        return this._request(requestBehavior, RequestType.MIGRATE, [{ appName: 'Account list' }]);\n    }\n\n    public activateBitcoin<B extends BehaviorType = DB>(\n        request: Promise<SimpleRequest> | SimpleRequest,\n        requestBehavior: RequestBehavior<B> = this._defaultBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Account> {\n        return this._request(requestBehavior, RequestType.ACTIVATE_BITCOIN, [request]);\n    }\n\n    /**\n     * Only accessible in iframe from Nimiq domains.\n     */\n    public list<B extends BehaviorType = IB>(\n        requestBehavior: RequestBehavior<B> = this._iframeBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Account[]> {\n        return this._request(requestBehavior, RequestType.LIST, []);\n    }\n\n    public cashlinks<B extends BehaviorType = IB>(\n        requestBehavior: RequestBehavior<B> = this._iframeBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : Cashlink[]> {\n        return this._request(requestBehavior, RequestType.LIST_CASHLINKS, []);\n    }\n\n    public addBtcAddresses<B extends BehaviorType = IB>(\n        request: AddBtcAddressesRequest,\n        requestBehavior: RequestBehavior<B> = this._iframeBehavior as any,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : AddBtcAddressesResult> {\n        return this._request(requestBehavior, RequestType.ADD_BTC_ADDRESSES, [request]);\n    }\n\n    // END API\n\n    /* PRIVATE METHODS */\n\n    private _request<R extends RequestType, BT extends BehaviorType>(\n        behavior: RequestBehavior<BT>,\n        command: R,\n        args: Iterable<PromiseLike<any> | any>,\n    ) {\n        return behavior.request<R>(this._endpoint, command, args);\n    }\n}\n","import { PostMessageRpcClient, RedirectRpcClient } from '@nimiq/rpc';\nimport { BrowserDetection } from '@nimiq/utils';\nimport { ResultByRequestType, RequestType } from '../src/lib/PublicRequestTypes';\nimport translate from './i18n/i18n';\n\nexport abstract class RequestBehavior<B extends BehaviorType> {\n    public static getAllowedOrigin(endpoint: string) {\n        const url = new URL(endpoint);\n        return url.origin;\n    }\n\n    private readonly _type: B;\n\n    constructor(type: B) {\n        this._type = type;\n    }\n\n    public async request<R extends RequestType>(\n        endpoint: string,\n        command: R,\n        args: Iterable<PromiseLike<any> | any>,\n    ): Promise<B extends BehaviorType.REDIRECT ? void : ResultByRequestType<R>> {\n        throw new Error('Not implemented');\n    }\n}\n\nexport enum BehaviorType {\n    REDIRECT,\n    POPUP,\n    IFRAME,\n}\n\nexport class RedirectRequestBehavior extends RequestBehavior<BehaviorType.REDIRECT> {\n    public static withLocalState(localState: any) {\n        return new RedirectRequestBehavior(undefined, localState);\n    }\n\n    private readonly _returnUrl: string;\n    private readonly _localState: any;\n\n    constructor(returnUrl?: string, localState?: any) {\n        super(BehaviorType.REDIRECT);\n        const location = window.location;\n        this._returnUrl = returnUrl || `${location.origin}${location.pathname}`;\n        this._localState = localState || {};\n\n        // Reject local state with reserved property.\n        if (typeof this._localState.__command !== 'undefined') {\n            throw new Error('Invalid localState: Property \\'__command\\' is reserved');\n        }\n    }\n\n    public async request<R extends RequestType>(\n        endpoint: string,\n        command: R,\n        args: Iterable<PromiseLike<any> | any>,\n    ): Promise<void> {\n        const origin = RequestBehavior.getAllowedOrigin(endpoint);\n\n        const client = new RedirectRpcClient(endpoint, origin);\n        await client.init();\n\n        const state: object = Object.assign({}, this._localState, { __command: command });\n        client.callAndSaveLocalState(this._returnUrl, state, command, true, ...(await Promise.all(args)));\n    }\n}\n\nexport class PopupRequestBehavior extends RequestBehavior<BehaviorType.POPUP> {\n    private static DEFAULT_FEATURES = '';\n    private static DEFAULT_OPTIONS = {\n        overlay: true,\n    };\n    private _popupFeatures: typeof PopupRequestBehavior.DEFAULT_FEATURES;\n    private _options: typeof PopupRequestBehavior.DEFAULT_OPTIONS;\n\n    private shouldRetryRequest: boolean = false;\n    private popup: Window | undefined;\n    private client: PostMessageRpcClient | undefined;\n\n    constructor(\n        popupFeatures = PopupRequestBehavior.DEFAULT_FEATURES,\n        options?: typeof PopupRequestBehavior.DEFAULT_OPTIONS,\n    ) {\n        super(BehaviorType.POPUP);\n        this._popupFeatures = popupFeatures;\n        this._options = {\n            ...PopupRequestBehavior.DEFAULT_OPTIONS,\n            ...options,\n        };\n    }\n\n    public async request<R extends RequestType>(\n        endpoint: string,\n        command: R,\n        args: Iterable<PromiseLike<any> | any>,\n    ): Promise<ResultByRequestType<R>> {\n        const origin = RequestBehavior.getAllowedOrigin(endpoint);\n\n        // Add page overlay\n        const $overlay = this.appendOverlay();\n\n        do {\n            this.shouldRetryRequest = false;\n            this.popup = this.createPopup(endpoint);\n            this.client = new PostMessageRpcClient(this.popup, origin);\n\n            try {\n                await this.client.init();\n                return await this.client.call(command, ...(await Promise.all(args)));\n            } catch (e) {\n                if (!this.shouldRetryRequest) throw e;\n            } finally {\n                if (!this.shouldRetryRequest) {\n                    // Remove page overlay\n                    this.removeOverlay($overlay);\n\n                    this.client.close();\n                    this.popup.close();\n                }\n            }\n        } while (this.shouldRetryRequest);\n\n        // the code below should never be executed, unless unexpected things happend\n        if (this.popup) this.popup.close();\n        if (this.client) this.client.close();\n        if ($overlay) this.removeOverlay($overlay);\n        throw new Error('Unexpected error occurred');\n    }\n\n    public createPopup(url: string) {\n        const popup = window.open(url, 'NimiqAccounts', this._popupFeatures);\n        if (!popup) {\n            throw new Error('Failed to open popup');\n        }\n        return popup;\n    }\n\n    private appendOverlay(): HTMLDivElement | null {\n        if (!this._options.overlay) return null;\n\n        // Define DOM-method abstractions to allow better minification\n        const createElement = document.createElement.bind(document);\n        const appendChild = (node: Node, child: Node) => node.appendChild(child);\n\n        // Overlay background\n        const overlay = createElement('div');\n        overlay.id = 'nimiq-hub-overlay';\n        const overlayStyle = overlay.style;\n        overlayStyle.position = 'fixed';\n        overlayStyle.top = '0';\n        overlayStyle.right = '0';\n        overlayStyle.bottom = '0';\n        overlayStyle.left = '0';\n        overlayStyle.background = 'rgba(31, 35, 72, 0.8)';\n        overlayStyle.display = 'flex';\n        overlayStyle.flexDirection = 'column';\n        overlayStyle.alignItems = 'center';\n        overlayStyle.justifyContent = 'space-between';\n        overlayStyle.cursor = 'pointer';\n        overlayStyle.color = 'white';\n        overlayStyle.textAlign = 'center';\n        overlayStyle.opacity = '0';\n        overlayStyle.transition = 'opacity 0.6s ease';\n        overlayStyle.zIndex = '99999';\n        overlay.addEventListener('click', () => {\n            if (BrowserDetection.isIOS()) {\n                this.shouldRetryRequest = true;\n                if (this.popup) this.popup.close();\n                if (this.client) this.client.close();\n            } else {\n                if (this.popup) this.popup.focus();\n            }\n        });\n\n        // Top flex spacer\n        appendChild(overlay, createElement('div'));\n\n        // Explainer text\n        const text = createElement('div');\n        text.textContent = translate('popup-overlay');\n        const textStyle = text.style;\n        textStyle.padding = '20px';\n        // tslint:disable-next-line max-line-length\n        textStyle.fontFamily = 'Muli, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif';\n        textStyle.fontSize = '24px';\n        textStyle.fontWeight = '600';\n        textStyle.lineHeight = '40px';\n        textStyle.whiteSpace = 'pre-line';\n        appendChild(overlay, text);\n\n        // Logo\n        const logo = createElement('img');\n        // tslint:disable-next-line max-line-length\n        logo.src = 'data:image/svg+xml,<svg width=\"135\" height=\"32\" viewBox=\"0 0 135 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M35.6 14.5l-7.5-13A3 3 0 0025.5 0h-15a3 3 0 00-2.6 1.5l-7.5 13a3 3 0 000 3l7.5 13a3 3 0 002.6 1.5h15a3 3 0 002.6-1.5l7.5-13a3 3 0 000-3z\" fill=\"url(%23hub-overlay-nimiq-logo)\"/><path d=\"M62.25 6.5h3.26v19H63L52.75 12.25V25.5H49.5v-19H52l10.25 13.25V6.5zM72 25.5v-19h3.5v19H72zM97.75 6.5h2.75v19h-3V13.75L92.37 25.5h-2.25L85 13.75V25.5h-3v-19h2.75l6.5 14.88 6.5-14.88zM107 25.5v-19h3.5v19H107zM133.88 21.17a7.91 7.91 0 01-4.01 3.8c.16.38.94 1.44 1.52 2.05.59.6 1.2 1.23 1.98 1.86L131 30.75a15.91 15.91 0 01-4.45-5.02l-.8.02c-1.94 0-3.55-.4-4.95-1.18a7.79 7.79 0 01-3.2-3.4 11.68 11.68 0 01-1.1-5.17c0-2.03.37-3.69 1.12-5.17a7.9 7.9 0 013.2-3.4 9.8 9.8 0 014.93-1.18c1.9 0 3.55.4 4.94 1.18a7.79 7.79 0 013.2 3.4 11.23 11.23 0 011.1 5.17c0 2.03-.44 3.83-1.11 5.17zm-12.37.01a5.21 5.21 0 004.24 1.82 5.2 5.2 0 004.23-1.82c1.01-1.21 1.52-2.92 1.52-5.18 0-2.24-.5-4-1.52-5.2a5.23 5.23 0 00-4.23-1.8c-1.82 0-3.23.6-4.24 1.79-1 1.2-1.51 2.95-1.51 5.21s.5 3.97 1.51 5.18z\" fill=\"white\"/><defs><radialGradient id=\"hub-overlay-nimiq-logo\" cx=\"0\" cy=\"0\" r=\"1\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(-35.9969 0 0 -32 36 32)\"><stop stop-color=\"%23EC991C\"/><stop offset=\"1\" stop-color=\"%23E9B213\"/></radialGradient></defs></svg>';\n        logo.style.marginBottom = '56px';\n        appendChild(overlay, logo);\n\n        // Close button\n        const button = createElement('div');\n        const buttonStyle = button.style;\n        button.innerHTML = '&times;';\n        buttonStyle.position = 'absolute';\n        buttonStyle.top = '8px';\n        buttonStyle.right = '8px';\n        buttonStyle.fontSize = '24px';\n        buttonStyle.lineHeight = '32px';\n        buttonStyle.fontWeight = '600';\n        buttonStyle.width = '32px';\n        buttonStyle.height = '32px';\n        buttonStyle.opacity = '0.8';\n        button.addEventListener('click', (event) => {\n            if (this.popup) this.popup.close();\n            event.stopPropagation();\n        });\n        appendChild(overlay, button);\n\n        // The 100ms delay is not just because the DOM element needs to be rendered before it\n        // can be animated, but also because it actually feels better when there is a short\n        // delay between the opening popup and the background fading.\n        setTimeout(() => overlay.style.opacity = '1', 100);\n\n        return appendChild(document.body, overlay) as HTMLDivElement;\n    }\n\n    private removeOverlay($overlay: HTMLDivElement | null): void {\n        if (!$overlay) return;\n\n        $overlay.style.opacity = '0';\n        setTimeout(() => document.body.removeChild($overlay), 400);\n    }\n}\n\nexport class IFrameRequestBehavior extends RequestBehavior<BehaviorType.IFRAME> {\n    private static IFRAME_PATH_SUFFIX = '/iframe.html';\n\n    private _iframe: HTMLIFrameElement | null;\n    private _client: PostMessageRpcClient | null;\n\n    constructor() {\n        super(BehaviorType.IFRAME);\n        this._iframe = null;\n        this._client = null;\n    }\n\n    public async request<R extends RequestType>(\n        endpoint: string,\n        command: R,\n        args: Iterable<PromiseLike<any> | any>,\n    ): Promise<ResultByRequestType<R>> {\n        if (this._iframe && this._iframe.src !== `${endpoint}${IFrameRequestBehavior.IFRAME_PATH_SUFFIX}`) {\n            throw new Error('Hub iframe is already opened with another endpoint');\n        }\n\n        const origin = RequestBehavior.getAllowedOrigin(endpoint);\n\n        if (!this._iframe) {\n            this._iframe = await this.createIFrame(endpoint);\n        }\n        if (!this._iframe.contentWindow) {\n            throw new Error(`IFrame contentWindow is ${typeof this._iframe.contentWindow}`);\n        }\n\n        if (!this._client) {\n            this._client = new PostMessageRpcClient(this._iframe.contentWindow, origin);\n            await this._client.init();\n        }\n\n        return await this._client.call(command, ...(await Promise.all(args)));\n    }\n\n    public async createIFrame(endpoint: string): Promise<HTMLIFrameElement> {\n        return new Promise((resolve, reject) => {\n            const $iframe = document.createElement('iframe');\n            $iframe.name = 'NimiqAccountsIFrame';\n            $iframe.style.display = 'none';\n            document.body.appendChild($iframe);\n            $iframe.src = `${endpoint}${IFrameRequestBehavior.IFRAME_PATH_SUFFIX}`;\n            $iframe.onload = () => resolve($iframe);\n            $iframe.onerror = reject;\n        }) as Promise<HTMLIFrameElement>;\n    }\n}\n","// Import the languages you want to support. Note that the language files are not lazy loaded on purpose, as they are\n// pretty small.\nimport de from './de.json';\nimport en from './en.json';\nimport es from './es.json';\nimport fil from './fil.json';\nimport fr from './fr.json';\nimport nl from './nl.json';\nimport pl from './pl.json';\nimport pt from './pt.json';\nimport ru from './ru.json';\nimport tr from './tr.json';\nimport uk from './uk.json';\nimport zh from './zh.json';\n\nconst translations: { [lang: string]: { [id: string]: string } } = { de, en, es, fil, fr, nl, pl, pt, ru, tr, uk, zh };\n\nexport default function translate(id: string, language?: string) {\n    if (!language) {\n        // Note that third party apps won't have access to the language cookie and will use a fallback language.\n        const langMatch = document.cookie.match(/(^| )lang=([^;]+)/);\n        language = (langMatch && langMatch[2]) || navigator.language.split('-')[0];\n    }\n    return (translations[language] || en)[id] || (en as { [id: string]: string })[id];\n}\n","import { NETWORK_TEST } from '../lib/Constants';\nimport { BTC_NETWORK_TEST, NATIVE_SEGWIT } from '../lib/bitcoin/BitcoinConstants';\n\nexport default {\n    keyguardEndpoint: window.location.protocol + '//' + window.location.hostname + ':8000/src',\n    network: NETWORK_TEST,\n    networkEndpoint: 'https://network.nimiq-testnet.com',\n    privilegedOrigins: [ '*' ],\n    redirectTarget: window.location.protocol + '//' + window.location.hostname + ':8080/demos.html',\n    reportToSentry: false,\n    checkoutWithoutNimOrigins: [ '*' ],\n\n    enableBitcoin: true,\n    bitcoinNetwork: BTC_NETWORK_TEST,\n    bitcoinAddressType: NATIVE_SEGWIT,\n\n    fastspot: {\n        apiEndpoint: 'https://api.test.fastspot.io/fast/v1',\n        apiKey: 'd011aeea-41cf-4c05-a31d-436495bed9b7',\n    },\n};\n","var map = {\n\t\"./de.po\": [\n\t\t\"./src/i18n/de.po\",\n\t\t\"lang-de-po\"\n\t],\n\t\"./en.po\": [\n\t\t\"./src/i18n/en.po\",\n\t\t\"lang-en-po\"\n\t],\n\t\"./es.po\": [\n\t\t\"./src/i18n/es.po\",\n\t\t\"lang-es-po\"\n\t],\n\t\"./fr.po\": [\n\t\t\"./src/i18n/fr.po\",\n\t\t\"lang-fr-po\"\n\t],\n\t\"./nl.po\": [\n\t\t\"./src/i18n/nl.po\",\n\t\t\"lang-nl-po\"\n\t],\n\t\"./ru.po\": [\n\t\t\"./src/i18n/ru.po\",\n\t\t\"lang-ru-po\"\n\t],\n\t\"./uk.po\": [\n\t\t\"./src/i18n/uk.po\",\n\t\t\"lang-uk-po\"\n\t],\n\t\"./zh.po\": [\n\t\t\"./src/i18n/zh.po\",\n\t\t\"lang-zh-po\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/i18n lazy recursive ^\\\\.\\\\/.*\\\\.po$\";\nmodule.exports = webpackAsyncContext;","import Vue from 'vue';\nimport VueI18n from 'vue-i18n';\nimport { I18nMixin as VueComponentsI18n } from '@nimiq/vue-components';\nimport { Cookie } from '@nimiq/utils';\n\nVue.use(VueI18n);\n\nconst DEFAULT_LANGUAGE = 'en';\nconst SUPPORTED_LANGUAGES = [DEFAULT_LANGUAGE, 'de', 'es', 'fr', 'nl', 'ru', 'uk', 'zh'];\nconst LOADED_LANGUAGES: string[] = [];\n\nexport const i18n = new VueI18n({\n    locale: DEFAULT_LANGUAGE, // set locale (2 letters format: 'en')\n    fallbackLocale: DEFAULT_LANGUAGE, // If loaded. For webpack-i18n-tools not needed as fallback included in lang files\n    silentTranslationWarn: true, // disable the \"no translation found\" warning\n});\n\n// Asynchronously load a translation file for a specified language\n// and set this one as the active language\nexport async function setLanguage(lang: string) {\n    if (!SUPPORTED_LANGUAGES.includes(lang)) lang = DEFAULT_LANGUAGE;\n\n    VueComponentsI18n.setLanguage(lang);\n\n    // If the language was already loaded\n    if (LOADED_LANGUAGES.includes(lang)) {\n        i18n.locale = lang;\n        return lang;\n    }\n\n    // If the language hasn't been loaded yet\n    const messages = await import(/* webpackChunkName: \"lang-[request]\" */ `@/i18n/${lang}.po`);\n    i18n.setLocaleMessage(lang, messages.default || {});\n    LOADED_LANGUAGES.push(lang);\n    document.documentElement.setAttribute('lang', lang);\n    i18n.locale = lang;\n    return lang;\n}\n\n// Return the language stored in the `lang` cookie. Fallback to the browser language\nexport function detectLanguage() {\n    const langCookie = Cookie.getCookie('lang');\n    const fallbackLang = window.navigator.language.split('-')[0];\n\n    let lang = langCookie || fallbackLang;\n    // If the language is not supported set it to the default one\n    if (!SUPPORTED_LANGUAGES.includes(lang)) {\n        lang = DEFAULT_LANGUAGE;\n    }\n    return lang;\n}\n\n// If the user changed the language in another window/tab,\n// then ask him if he wants to reload the page to update non-reactive translations\nlet offerReload = true;\nfunction onTabFocus() {\n    if (!LOADED_LANGUAGES.length) {\n        // No language for which we'd need to update any translations has been loaded yet.\n        // Also we don't have any language loaded for translating the error message itself.\n        return;\n    }\n    const lang = detectLanguage();\n    if (i18n.locale !== lang) {\n        const question = i18n.t('The display language changed. Do you want to reload the page to update all '\n            + 'translations? Otherwise, some translations might not be updated automatically. ({oldLang} to {newLang})',\n            { oldLang: i18n.locale, newLang: lang }) as string;\n\n        if (offerReload && confirm(question)) {\n            location.reload();\n        } else {\n            setLanguage(detectLanguage());\n        }\n        offerReload = false; // only offer reload once to ignore the window focus on confirm-popup close\n    }\n}\n\n// Set a window/tab focus event to check if the user changed the language in another window/tab\nwindow.addEventListener('focus', onTabFocus);\n","import { Address } from './PublicRequestTypes';\nimport AddressUtils from './AddressUtils';\nimport { labelAddress } from './LabelingMachine';\n\nexport class AccountInfo {\n    public static fromObject(o: AccountInfoEntry): AccountInfo {\n        return new AccountInfo(\n            o.path,\n            o.label,\n            new Nimiq.Address(o.address),\n            o.balance,\n        );\n    }\n\n    public static objectToAddressType(o: AccountInfoEntry): Address {\n        return {\n            address: AddressUtils.toUserFriendlyAddress(o.address),\n            label: o.label,\n        };\n    }\n\n    public walletId?: string;\n    public isBackedUp?: boolean; /* Used for pre-migration  */\n\n    public constructor(\n        public path: string,\n        public label: string,\n        public address: Nimiq.Address,\n        public balance?: number,\n    ) {}\n\n    public get userFriendlyAddress(): string {\n        return this.address.toUserFriendlyAddress();\n    }\n\n    public get defaultLabel(): string {\n        return labelAddress(this.userFriendlyAddress);\n    }\n\n    public toObject(): AccountInfoEntry {\n        return {\n            path: this.path,\n            label: this.label,\n            address: new Uint8Array(this.address.serialize()),\n            balance: this.balance,\n        };\n    }\n\n    public toAddressType(): Address {\n        return {\n            address: this.userFriendlyAddress,\n            label: this.label,\n        };\n    }\n}\n\n/*\n * Database Types\n */\nexport interface AccountInfoEntry {\n    path: string;\n    label: string;\n    address: Uint8Array;\n    balance?: number;\n}\n","// tslint:disable no-bitwise\n\nexport default class AddressUtils {\n    // The following methods are taken from @nimiq/core source,\n    // namely Nimiq.Address and Nimiq.BufferUtils.\n\n    public static toUserFriendlyAddress(serializedAddress: Uint8Array, withSpaces = true): string {\n        const base32 = this._toBase32(serializedAddress);\n        // tslint:disable-next-line prefer-template\n        const check = ('00' + (98 - this._ibanCheck(base32 + this.CCODE + '00'))).slice(-2);\n        let res = this.CCODE + check + base32;\n        if (withSpaces) res = res.replace(/.{4}/g, '$& ').trim();\n        return res;\n    }\n\n    private static CCODE = 'NQ';\n    private static BASE32_ALPHABET_NIMIQ = '0123456789ABCDEFGHJKLMNPQRSTUVXY';\n\n    private static _ibanCheck(str: string): number {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substr(i * 6, 6), 10) % 97).toString();\n        }\n\n        return parseInt(tmp, 10);\n    }\n\n    private static _toBase32(buf: Uint8Array, alphabet = this.BASE32_ALPHABET_NIMIQ): string {\n        let shift = 3;\n        let carry = 0;\n        let symbol: number;\n        let res = '';\n\n        for (const byte of buf) {\n            symbol = carry | (byte >> shift);\n            res += alphabet[symbol & 0x1f];\n\n            if (shift > 5) {\n                shift -= 5;\n                symbol = byte >> shift;\n                res += alphabet[symbol & 0x1f];\n            }\n\n            shift = 5 - shift;\n            carry = byte << shift;\n            shift = 8 - shift;\n        }\n\n        if (shift !== 3) {\n            res += alphabet[carry & 0x1f];\n        }\n\n        while (res.length % 8 !== 0 && alphabet.length === 33) {\n            res += alphabet[32];\n        }\n\n        return res;\n    }\n}\n","import { Utf8Tools } from '@nimiq/utils';\nimport { DetailedPlainTransaction, NetworkClient } from '@nimiq/network-client';\nimport { loadNimiq } from './Helpers';\nimport { CashlinkState, CashlinkTheme } from './PublicRequestTypes';\n\nexport const CashlinkExtraData = {\n    FUNDING:  new Uint8Array([0, 130, 128, 146, 135]), // 'CASH'.split('').map(c => c.charCodeAt(0) + 63)\n    CLAIMING: new Uint8Array([0, 139, 136, 141, 138]), // 'LINK'.split('').map(c => c.charCodeAt(0) + 63)\n};\n\nexport interface CashlinkEntry {\n    address: string;\n    keyPair: Uint8Array;\n    value: number;\n    fee?: number;\n    message: string;\n    state: CashlinkState;\n    timestamp: number;\n    theme?: CashlinkTheme;\n    contactName?: string; /** unused for now */\n}\n\nclass Cashlink {\n    get value() {\n        return this._value || 0;\n    }\n\n    set value(value: number) {\n        if (this._value && (this._immutable || this.state !== CashlinkState.UNCHARGED)) {\n            throw new Error('Cannot set value, Cashlink is immutable');\n        }\n        if (!Nimiq.NumberUtils.isUint64(value) || value === 0) throw new Error('Malformed Cashlink value');\n        this._value = value;\n    }\n\n    set fee(fee: number) {\n        if (this.state === CashlinkState.CLAIMED) {\n            console.warn('Setting a fee will typically have no effect anymore as Cashlink is already claimed');\n        }\n        this._fee = fee;\n    }\n\n    get fee() {\n        return this._fee || 0;\n    }\n\n    get message() {\n        return Utf8Tools.utf8ByteArrayToString(this._messageBytes);\n    }\n\n    set message(message: string) {\n        if (this._messageBytes.byteLength && (this._immutable || this.state !== CashlinkState.UNCHARGED)) {\n            throw new Error('Cannot set message, Cashlink is immutable');\n        }\n        const messageBytes = Utf8Tools.stringToUtf8ByteArray(message);\n        if (!Nimiq.NumberUtils.isUint8(messageBytes.byteLength)) throw new Error('Cashlink message is too long');\n        this._messageBytes = messageBytes;\n    }\n\n    get theme() {\n        return this._theme || Cashlink.DEFAULT_THEME;\n    }\n\n    set theme(theme: CashlinkTheme) {\n        if (this._theme && (this._immutable || this.state !== CashlinkState.UNCHARGED)) {\n            throw new Error('Cannot set theme, Cashlink is immutable');\n        }\n        if (!Nimiq.NumberUtils.isUint8(theme)) {\n            throw new Error('Invalid Cashlink theme');\n        }\n        this._theme = !Object.values(CashlinkTheme).includes(theme)\n            ? CashlinkTheme.UNSPECIFIED // lenient fallback\n            : theme;\n    }\n\n    get hasEncodedTheme() {\n        return !!this._theme;\n    }\n\n    set networkClient(client: NetworkClient) {\n        this._networkClientResolver(client);\n    }\n\n    public static async create(): Promise<Cashlink> {\n        await loadNimiq();\n        const keyPair = Nimiq.KeyPair.derive(Nimiq.PrivateKey.generate());\n        return new Cashlink(keyPair, keyPair.publicKey.toAddress());\n    }\n\n    public static async parse(str: string): Promise<Cashlink | null> {\n        if (!str) return null;\n        try {\n            str = str.replace(/~/g, '').replace(/=*$/, (match) => new Array(match.length).fill('.').join(''));\n            const buf = Nimiq.BufferUtils.fromBase64Url(str);\n            await loadNimiq();\n            const keyPair = Nimiq.KeyPair.derive(Nimiq.PrivateKey.unserialize(buf));\n            const value = buf.readUint64();\n            let message: string;\n            if (buf.readPos === buf.byteLength) {\n                message = '';\n            } else {\n                const messageLength = buf.readUint8();\n                const messageBytes = buf.read(messageLength);\n                message = Utf8Tools.utf8ByteArrayToString(messageBytes);\n            }\n            let theme: CashlinkTheme | undefined;\n            if (buf.readPos < buf.byteLength) {\n                theme = buf.readUint8();\n            }\n\n            return new Cashlink(\n                keyPair,\n                keyPair.publicKey.toAddress(),\n                value,\n                undefined, // fee\n                message,\n                CashlinkState.UNKNOWN,\n                theme,\n            );\n        } catch (e) {\n            console.error('Error parsing Cashlink:', e);\n            return null;\n        }\n    }\n\n    public static fromObject(object: CashlinkEntry): Cashlink {\n        return new Cashlink(\n            Nimiq.KeyPair.unserialize(new Nimiq.SerialBuffer(object.keyPair)),\n            Nimiq.Address.fromString(object.address),\n            object.value,\n            object.fee,\n            object.message,\n            object.state,\n            object.theme,\n            // @ts-ignore `timestamp` was called `date` before and was live in the mainnet.\n            object.timestamp || object.date,\n            object.contactName,\n        );\n    }\n\n    /**\n     * Cashlink balance in luna\n     */\n    public balance: number | null = null;\n    public state: CashlinkState;\n\n    private _getNetwork: () => Promise<NetworkClient>;\n    private _networkClientResolver!: (client: NetworkClient) => void;\n    private _immutable: boolean;\n    private _eventListeners: {[type: string]: Array<(data: any) => void>} = {};\n    private _messageBytes: Uint8Array = new Uint8Array(0);\n    private _value: number | null = null;\n    private _fee: number | null = null;\n    private _theme: CashlinkTheme = CashlinkTheme.UNSPECIFIED; // note that UNSPECIFIED equals to 0 and is thus falsy\n    private _knownTransactions: DetailedPlainTransaction[] = [];\n\n    constructor(\n        public keyPair: Nimiq.KeyPair,\n        public address: Nimiq.Address,\n        value?: number,\n        fee?: number,\n        message?: string,\n        state: CashlinkState = CashlinkState.UNCHARGED,\n        theme?: CashlinkTheme,\n        public timestamp: number = Math.floor(Date.now() / 1000),\n        public contactName?: string, /** unused for now */\n    ) {\n        const networkPromise = new Promise<NetworkClient>((resolve) => {\n            // Safe resolver function for when the network client gets assigned\n            this._networkClientResolver = resolve;\n        });\n        this._getNetwork = () => networkPromise;\n\n        if (value) this.value = value;\n        if (fee) this.fee = fee;\n        if (message) this.message = message;\n        if (theme) this.theme = theme;\n        this.state = state;\n\n        this._immutable = !!(value || message || theme);\n\n        this._getNetwork().then((network: NetworkClient) => {\n            const userFriendlyAddress = this.address.toUserFriendlyAddress();\n\n            // When not yet established, the balance will be updated by the nano-api as soon\n            // as we have consensus, because subscribing (below) triggers a balance check.\n            if (network.consensusState === 'established') {\n                network.getBalance(userFriendlyAddress).then(this._onBalancesChanged.bind(this));\n            }\n\n            // Only listen for 'received' and 'mined' events, because 'relayed' events trigger a\n            // balance change in the nano-api, too, which triggers the state detection already.\n            network.on(NetworkClient.Events.TRANSACTION_PENDING, this._onTransactionReceivedOrMined.bind(this));\n            network.on(NetworkClient.Events.TRANSACTION_MINED, this._onTransactionReceivedOrMined.bind(this));\n            network.on(NetworkClient.Events.BALANCES_CHANGED, this._onBalancesChanged.bind(this));\n\n            // Triggers a BALANCES_CHANGED event if this is the first time this address is subscribed\n            network.subscribe(userFriendlyAddress);\n        });\n\n        // Run initial state detection (awaits consensus in detectState())\n        this.detectState();\n    }\n\n    public async detectState() {\n        await this._awaitConsensus();\n\n        const balance = await this._awaitBalance();\n        const pendingTransactions = [\n            ...(await this._getNetwork()).pendingTransactions,\n            ...(await this._getNetwork()).relayedTransactions,\n        ];\n\n        const address = this.address.toUserFriendlyAddress();\n\n        const pendingFundingTx = pendingTransactions.find(\n            (tx) => tx.recipient === address);\n        const pendingClaimingTx = pendingTransactions.find(\n            (tx) => tx.sender === address);\n\n        // Only exit if the cashlink is CLAIMED and not currently funded or being funded.\n        if (this.state === CashlinkState.CLAIMED && !balance && !pendingFundingTx) return;\n\n        const knownTransactionReceipts = new Map(this._knownTransactions.map((tx) => [tx.hash, tx.blockHash!]));\n\n        const transactionHistory = await (await this._getNetwork()).requestTransactionHistory(\n            address,\n            knownTransactionReceipts,\n        );\n        this._knownTransactions = this._knownTransactions.concat(transactionHistory.newTransactions);\n\n        let newState: CashlinkState = this.state;\n\n        const knownFundingTx = this._knownTransactions.find(\n            (tx) => tx.recipient === address);\n        const knownClaimingTx = this._knownTransactions.find(\n            (tx) => tx.sender === address);\n\n        switch (this.state) {\n            case CashlinkState.UNKNOWN:\n                if (!pendingFundingTx && !knownFundingTx) {\n                    newState = CashlinkState.UNCHARGED;\n                    break;\n                }\n            case CashlinkState.UNCHARGED:\n                if (pendingFundingTx) {\n                    newState = CashlinkState.CHARGING;\n                }\n            case CashlinkState.CHARGING:\n                if (!balance && !pendingFundingTx) {\n                    // Handle expired/replaced funding tx\n                    newState = CashlinkState.UNCHARGED;\n                    // Not break;ing here, because we need to see if the cashlink is already CLAIMED.\n                }\n                if (knownFundingTx) {\n                    newState = CashlinkState.UNCLAIMED;\n                } else break; // If no known transactions are found, no further checks are necessary\n            case CashlinkState.UNCLAIMED:\n                if (pendingClaimingTx) {\n                    newState = CashlinkState.CLAIMING;\n                }\n            case CashlinkState.CLAIMING:\n                if (balance) {\n                    // Handle recharged/reused cashlink\n                    if (!pendingClaimingTx) newState = CashlinkState.UNCLAIMED;\n                    break; // If a balance is detected on the cashlink, it cannot be in CLAIMED state.\n                }\n                if (knownClaimingTx) {\n                    newState = CashlinkState.CLAIMED;\n                }\n            case CashlinkState.CLAIMED:\n                // Detect cashlink re-use and chain rebranches\n                if (pendingFundingTx) newState = CashlinkState.CHARGING;\n                if (balance) newState = CashlinkState.UNCLAIMED;\n                if (pendingClaimingTx) newState = CashlinkState.CLAIMING;\n        }\n\n        if (newState !== this.state) this._updateState(newState);\n    }\n\n    public toObject(includeOptional: boolean = true): CashlinkEntry {\n        const result: CashlinkEntry = {\n            keyPair: new Uint8Array(this.keyPair.serialize()),\n            address: this.address.toUserFriendlyAddress(),\n            value: this.value,\n            message: this.message,\n            state: this.state,\n            theme: this._theme,\n            timestamp: this.timestamp,\n        };\n        if (includeOptional) {\n            result.fee = this.fee;\n            result.contactName = this.contactName;\n        }\n        return result;\n    }\n\n    public render() {\n        const buf = new Nimiq.SerialBuffer(\n            /*key*/ this.keyPair.privateKey.serializedSize +\n            /*value*/ 8 +\n            /*message length*/ (this._messageBytes.byteLength || this._theme ? 1 : 0) +\n            /*message*/ this._messageBytes.byteLength +\n            /*theme*/ (this._theme ? 1 : 0),\n        );\n\n        this.keyPair.privateKey.serialize(buf);\n        buf.writeUint64(this.value);\n        if (this._messageBytes.byteLength || this._theme) {\n            buf.writeUint8(this._messageBytes.byteLength);\n            buf.write(this._messageBytes);\n        }\n        if (this._theme) {\n            buf.writeUint8(this._theme);\n        }\n\n        let result = Nimiq.BufferUtils.toBase64Url(buf);\n        // replace trailing . by = because of URL parsing issues on iPhone.\n        result = result.replace(/\\./g, '=');\n        // iPhone also has a problem to parse long words with more then 300 chars in a URL in WhatsApp\n        // (and possibly others). Therefore we break the words by adding a ~ every 256 characters in long words.\n        result = result.replace(/[A-Za-z0-9_]{257,}/g, (match) => match.replace(/.{256}/g, '$&~'));\n\n        return result;\n    }\n\n    public getFundingDetails(): {\n        layout: 'cashlink',\n        recipient: Nimiq.Address,\n        value: number,\n        fee: number,\n        data: Uint8Array,\n        cashlinkMessage: string,\n    } {\n        return {\n            layout: 'cashlink',\n            recipient: this.address,\n            value: this.value,\n            fee: this.fee,\n            data: CashlinkExtraData.FUNDING,\n            cashlinkMessage: this.message,\n        };\n    }\n\n    public async claim(\n        recipientAddress: string,\n        recipientType: Nimiq.Account.Type = Nimiq.Account.Type.BASIC,\n        fee: number = this.fee,\n    ): Promise<void> {\n        if (this.state >= CashlinkState.CLAIMING) {\n            throw new Error('Cannot claim, Cashlink has already been claimed');\n        }\n\n        await loadNimiq();\n\n        // Only claim the amount specified in the cashlink (or the cashlink balance, if smaller)\n        const balance = Math.min(this.value, await this._awaitBalance());\n        if (!balance) {\n            throw new Error('Cannot claim, there is no balance in this link');\n        }\n        const recipient = Nimiq.Address.fromString(recipientAddress);\n        const transaction = new Nimiq.ExtendedTransaction(this.address, Nimiq.Account.Type.BASIC,\n            recipient, recipientType, balance - fee, fee, await this._getBlockchainHeight(),\n            Nimiq.Transaction.Flag.NONE, CashlinkExtraData.CLAIMING);\n\n        const keyPair = this.keyPair;\n        const signature = Nimiq.Signature.create(keyPair.privateKey, keyPair.publicKey, transaction.serializeContent());\n        const proof = Nimiq.SignatureProof.singleSig(keyPair.publicKey, signature).serialize();\n\n        transaction.proof = proof;\n\n        return this._sendTransaction(transaction);\n    }\n\n    public on(type: Cashlink.Events, callback: (data: any) => void): void {\n        if (!(type in this._eventListeners)) {\n            this._eventListeners[type] = [];\n        }\n        this._eventListeners[type].push(callback);\n    }\n\n    public off(type: Cashlink.Events, callback: (data: any) => void): void {\n        if (!(type in this._eventListeners)) {\n            return;\n        }\n        const index = this._eventListeners[type].indexOf(callback);\n        if (index === -1) {\n            return;\n        }\n        this._eventListeners[type].splice(index, 1);\n    }\n\n    public fire(type: Cashlink.Events, arg: any): void {\n        if (!(type in this._eventListeners)) {\n            return;\n        }\n        this._eventListeners[type].forEach((callback) => callback(arg));\n    }\n\n    private async _awaitConsensus(): Promise<void> {\n        if ((await this._getNetwork()).consensusState === 'established') return;\n        return new Promise(async (resolve) => {\n            const handler = async () => {\n                (await this._getNetwork()).off(NetworkClient.Events.CONSENSUS_ESTABLISHED, handler);\n                resolve();\n            };\n            (await this._getNetwork()).on(NetworkClient.Events.CONSENSUS_ESTABLISHED, handler);\n        });\n    }\n\n    private async _awaitBalance(): Promise<number> {\n        if (this.balance !== null) return this.balance;\n        return new Promise(async (resolve) => {\n            const handler = async (balance: number) => {\n                this.off(Cashlink.Events.BALANCE_CHANGE, handler);\n                resolve(balance);\n            };\n            this.on(Cashlink.Events.BALANCE_CHANGE, handler);\n        });\n    }\n\n    private async _sendTransaction(transaction: Nimiq.Transaction): Promise<void> {\n        await this._awaitConsensus();\n        try {\n            const proof = Nimiq.SignatureProof.unserialize(new Nimiq.SerialBuffer(transaction.proof));\n            await (await this._getNetwork()).relayTransaction({\n                sender: transaction.sender.toUserFriendlyAddress(),\n                senderPubKey: proof.publicKey.serialize(),\n                recipient: transaction.recipient.toUserFriendlyAddress(),\n                value: Nimiq.Policy.lunasToCoins(transaction.value),\n                fee: Nimiq.Policy.lunasToCoins(transaction.fee),\n                validityStartHeight: transaction.validityStartHeight,\n                signature: proof.signature.serialize(),\n                extraData: transaction.data,\n            });\n        } catch (e) {\n            console.error(e);\n            throw new Error('Failed to forward transaction to the network');\n        }\n    }\n\n    private async _getBlockchainHeight(): Promise<number> {\n        await this._awaitConsensus();\n        return (await this._getNetwork()).headInfo.height;\n    }\n\n    private async _onTransactionReceivedOrMined(transaction: DetailedPlainTransaction): Promise<void> {\n        if (transaction.recipient === this.address.toUserFriendlyAddress()\n            || transaction.sender === this.address.toUserFriendlyAddress()) {\n            // Always run state detection when a transaction comes in\n            // or an incoming or outgoing transaction was mined, as those\n            // events likely signal a state change of the cashlink.\n            this.detectState();\n        }\n    }\n\n    private _onBalancesChanged(balances: Map<string, number>) {\n        const address = this.address.toUserFriendlyAddress();\n\n        if (!balances.has(address)) return;\n\n        this.balance = Nimiq.Policy.coinsToLunas(balances.get(address)!);\n        this.fire(Cashlink.Events.BALANCE_CHANGE, this.balance);\n        // Always run state detection when the balance changes,\n        // to catch state changes even when the transaction events\n        // have not been recognized (can happen when an incoming\n        // transaction gets mined before it's pending state is\n        // broadcasted to this client).\n        this.detectState();\n    }\n\n    private _updateState(state: CashlinkState) {\n        this.state = state;\n        this.fire(Cashlink.Events.STATE_CHANGE, this.state);\n    }\n}\n\nnamespace Cashlink {\n    export enum Events {\n        BALANCE_CHANGE = 'balance-change',\n        STATE_CHANGE = 'state-change',\n    }\n\n    // To be updated with the seasons.\n    export const DEFAULT_THEME = Date.now() < new Date('Tue, 13 Apr 2020 23:59:00 GMT-12').valueOf()\n        ? CashlinkTheme.EASTER\n        : CashlinkTheme.STANDARD;\n}\n\nexport default Cashlink;\n","import Cashlink, { CashlinkEntry } from '@/lib/Cashlink';\nimport { Store } from '@/lib/Store';\n\nexport class CashlinkStore extends Store<Cashlink, CashlinkEntry> {\n    private static instance: CashlinkStore | null = null;\n\n    protected get DB_NAME(): string {\n        return 'nimiq-cashlinks';\n    }\n\n    protected get DB_STORE_NAME(): string {\n        return 'cashlinks';\n    }\n\n    protected get DB_VERSION(): number {\n        return 1;\n    }\n\n    public static get Instance(): CashlinkStore {\n        if (!CashlinkStore.instance) CashlinkStore.instance = new CashlinkStore();\n        return CashlinkStore.instance;\n    }\n\n    protected upgrade(request: any, event: IDBVersionChangeEvent): void {\n        const db = request.result;\n        if (event.oldVersion < 1) {\n            // Version 1 is the first version of the database.\n            db.createObjectStore(this.DB_STORE_NAME, { keyPath: 'address' });\n        }\n    }\n\n    protected toEntry(cashlink: Cashlink): CashlinkEntry {\n        // Exclude contactName and fee when writing to store to save some data. contactName is currently unused and fee\n        // can be safely omitted as it is only used at Cashlink creation time which is also when the entry gets stored.\n        return cashlink.toObject(/*includeOptional*/ false);\n    }\n\n    protected fromEntry(cashlinkEntry: CashlinkEntry): Cashlink {\n        return Cashlink.fromObject(cashlinkEntry);\n    }\n}\n","/**\n * Sorted by context and alphabetically\n */\n\nexport enum WalletType {\n    LEGACY = 1,\n    BIP39 = 2,\n    LEDGER = 3,\n}\n\n// Addresses\nexport const DEFAULT_KEY_PATH = `m/44'/242'/0'/0'`;\n\n// Transactions\nexport const TX_MIN_VALIDITY_DURATION = 10;\nexport const TX_VALIDITY_WINDOW = 120;\nexport const CASHLINK_FUNDING_DATA = new Uint8Array([0, 130, 128, 146, 135]);\n\n// Labels\nexport const LABEL_MAX_LENGTH = 63; // in bytes\n\n// Accounts\nexport const ACCOUNT_BIP32_BASE_PATH_KEYGUARD = `m/44'/242'/0'/`;\nexport const ACCOUNT_MAX_ALLOWED_ADDRESS_GAP = 20;\n\n// Compatibility\nexport const LEGACY_GROUPING_ACCOUNT_ID = 'LEGACY';\n\n// Networks\ntype NetworkType = 'test' | 'main' | 'dev';\nexport const NETWORK_TEST: NetworkType = 'test';\nexport const NETWORK_MAIN: NetworkType = 'main';\nexport const NETWORK_DEV: NetworkType = 'dev';\n\n// Errors\nexport const ERROR_CANCELED = 'CANCELED';\nexport const ERROR_INVALID_NETWORK = 'Invalid network name';\nexport const ERROR_TRANSACTION_RECEIPTS = 'Failed to retrieve transaction receipts for';\nexport const ERROR_COOKIE_SPACE = 'Not enough cookie space';\nexport const ERROR_REQUEST_TIMED_OUT = 'REQUEST_TIMED_OUT';\n\n// Input\nexport const MOBILE_MAX_WIDTH = 600; // px\n\n// History state\nexport const HISTORY_KEY_SELECTED_CURRENCY = 'selected-currency';\n","import { VestingContract, HashedTimeLockedContract, Contract } from './PublicRequestTypes';\nimport AddressUtils from './AddressUtils';\nimport { labelAddress } from './LabelingMachine';\n\nexport class ContractInfoHelper {\n    public static fromObject(o: ContractInfoEntry): VestingContractInfo | HashedTimeLockedContractInfo {\n        switch (o.type) {\n            case Nimiq.Account.Type.VESTING:\n                return VestingContractInfo.fromObject(o);\n            case Nimiq.Account.Type.HTLC:\n                return HashedTimeLockedContractInfo.fromObject(o);\n            // @ts-ignore Property 'type' does not exist on type 'never'.\n            default: throw new Error('Unknown contract type: ' + o.type);\n        }\n    }\n\n    // Used in iframe\n    public static objectToContractType(o: ContractInfoEntry): VestingContract | HashedTimeLockedContract {\n        switch (o.type) {\n            case 1 /* Nimiq.Account.Type.VESTING */:\n                return VestingContractInfo.objectToContractType(o);\n            case 2 /* Nimiq.Account.Type.HTLC */:\n                return HashedTimeLockedContractInfo.objectToContractType(o);\n            // @ts-ignore Property 'type' does not exist on type 'never'.\n            default: throw new Error('Unknown contract type: ' + o.type);\n        }\n    }\n}\n\nexport class VestingContractInfo {\n    public static fromObject(o: VestingContractInfoEntry): VestingContractInfo {\n        return new VestingContractInfo(\n            o.label,\n            new Nimiq.Address(o.address),\n            new Nimiq.Address(o.owner),\n            o.start,\n            o.stepAmount,\n            o.stepBlocks,\n            o.totalAmount,\n            o.balance,\n        );\n    }\n\n    // Used in iframe\n    public static objectToContractType(o: VestingContractInfoEntry): VestingContract {\n        return {\n            type: 1 /* Nimiq.Account.Type.VESTING */,\n            label: o.label,\n            address: AddressUtils.toUserFriendlyAddress(o.address),\n            owner: AddressUtils.toUserFriendlyAddress(o.owner),\n            start: o.start,\n            stepAmount: o.stepAmount,\n            stepBlocks: o.stepBlocks,\n            totalAmount: o.totalAmount,\n        };\n    }\n\n    public type = Nimiq.Account.Type.VESTING;\n    public walletId?: string;\n\n    public constructor(\n        public label: string,\n        public address: Nimiq.Address,\n        public owner: Nimiq.Address,\n        public start: number,\n        public stepAmount: number,\n        public stepBlocks: number,\n        public totalAmount: number,\n        public balance?: number,\n    ) {}\n\n    public get userFriendlyAddress(): string {\n        return this.address.toUserFriendlyAddress();\n    }\n\n    public get defaultLabel(): string {\n        return labelAddress(this.userFriendlyAddress);\n    }\n\n    public toObject(): VestingContractInfoEntry {\n        return {\n            type: this.type,\n            label: this.label,\n            address: new Uint8Array(this.address.serialize()),\n            owner: new Uint8Array(this.owner.serialize()),\n            start: this.start,\n            stepAmount: this.stepAmount,\n            stepBlocks: this.stepBlocks,\n            totalAmount: this.totalAmount,\n            balance: this.balance,\n        };\n    }\n\n    public toContractType(): VestingContract {\n        return {\n            type: this.type,\n            label: this.label,\n            address: this.userFriendlyAddress,\n            owner: this.owner.toUserFriendlyAddress(),\n            start: this.start,\n            stepAmount: this.stepAmount,\n            stepBlocks: this.stepBlocks,\n            totalAmount: this.totalAmount,\n        };\n    }\n\n    /**\n     * Calculates the available amount of a vesting contract for a given blockchain height\n     *\n     * First, an explanation of the parameters of a vesting contract:\n     * totalAmount: The total value of a vesting contract (fixed during creation, cannot be changed).\n     * stepAmount: How much value is released at every vesting step. The total amount does not have\n     *             to devide evenly through this amount. The last vesting step amount can be smaller\n     *             then the previous steps.\n     * stepBlocks: The number of blocks between step amount releases.\n     * start: The block height at which the first step starts to count.\n     *\n     * To calculate the amount available, we start by dividing the number of blocks passed since\n     * the contract's start height through its stepBlocks, to determine how many vesting steps have\n     * passed. The floored number of steps gets muliplied by the stepAmount to calculate all so far\n     * released value:\n     *      Math.floor((height - this.start) / this.stepBlocks)) * this.stepAmount\n     *\n     * Because the vested amount cannot be negative (in case start block height is higher than the\n     * blockchain height), the above calculation is set to at least 0:\n     *      Math.max(0, <previous result>)\n     *\n     * Because the last step of a vesting contract is always the remainder and can be smaller than\n     * stepAmount, we safeguard the maximum possible released value by taking the smaller of\n     * the above calculated released amount and the contract's totalAmount:\n     *      Math.min(this.totalAmount, <previous result>)\n     *\n     * Finally, the available amount needs to account for already withrawn funds. (The balance\n     * reported by the network represents the balance of the contract, including not-yet-released\n     * funds.) The amount already withdrawn is the difference between the totalAmount (inital balance)\n     * and currentBalance. The withdrawn amount is simply subtracted from the released amount:\n     *      <previous result> - (this.totalAmount - currentBalance)\n     */\n    public calculateAvailableAmount(height: number, currentBalance = this.totalAmount) {\n        return Math.min(\n            this.totalAmount,\n            Math.max(0, Math.floor((height - this.start) / this.stepBlocks)) * this.stepAmount,\n        ) - (this.totalAmount - currentBalance);\n    }\n}\n\nexport class HashedTimeLockedContractInfo {\n    public static fromObject(o: HashedTimeLockedContractInfoEntry): HashedTimeLockedContractInfo {\n        return new HashedTimeLockedContractInfo(\n            o.label,\n            new Nimiq.Address(o.address),\n            new Nimiq.Address(o.sender),\n            new Nimiq.Address(o.recipient),\n            new Nimiq.Hash(o.hashRoot),\n            o.hashCount,\n            o.timeout,\n            o.totalAmount,\n            o.balance,\n        );\n    }\n\n    // Used in iframe\n    public static objectToContractType(o: HashedTimeLockedContractInfoEntry): HashedTimeLockedContract {\n        return {\n            type: 2 /* Nimiq.Account.Type.HTLC */,\n            label: o.label,\n            address: AddressUtils.toUserFriendlyAddress(o.address),\n            sender: AddressUtils.toUserFriendlyAddress(o.sender),\n            recipient: AddressUtils.toUserFriendlyAddress(o.recipient),\n            hashRoot: Array.from(o.hashRoot).map((byte) => {\n                const hex = byte.toString(16);\n                return `${hex.length < 2 ? '0' : ''}${hex}`;\n            }).join(''),\n            hashCount: o.hashCount,\n            timeout: o.timeout,\n            totalAmount: o.totalAmount,\n        };\n    }\n\n    public type = Nimiq.Account.Type.HTLC;\n    public walletId?: string;\n\n    public constructor(\n        public label: string,\n        public address: Nimiq.Address,\n        public sender: Nimiq.Address,\n        public recipient: Nimiq.Address,\n        public hashRoot: Nimiq.Hash,\n        public hashCount: number,\n        public timeout: number,\n        public totalAmount: number,\n        public balance?: number,\n    ) {}\n\n    public get userFriendlyAddress(): string {\n        return this.address.toUserFriendlyAddress();\n    }\n\n    public get defaultLabel(): string {\n        return labelAddress(this.userFriendlyAddress);\n    }\n\n    public toObject(): HashedTimeLockedContractInfoEntry {\n        return {\n            type: this.type,\n            label: this.label,\n            address: new Uint8Array(this.address.serialize()),\n            sender: new Uint8Array(this.sender.serialize()),\n            recipient: new Uint8Array(this.recipient.serialize()),\n            hashRoot: new Uint8Array(this.hashRoot.serialize()),\n            hashCount: this.hashCount,\n            timeout: this.timeout,\n            totalAmount: this.totalAmount,\n            balance: this.balance,\n        };\n    }\n\n    public toContractType(): HashedTimeLockedContract {\n        return {\n            type: Nimiq.Account.Type.HTLC,\n            label: this.label,\n            address: this.userFriendlyAddress,\n            sender: this.sender.toUserFriendlyAddress(),\n            recipient: this.recipient.toUserFriendlyAddress(),\n            hashRoot: this.hashRoot.toHex(),\n            hashCount: this.hashCount,\n            timeout: this.timeout,\n            totalAmount: this.totalAmount,\n        };\n    }\n}\n\nexport type ContractInfo = VestingContractInfo | HashedTimeLockedContractInfo;\n\n/*\n * Database Types\n */\nexport interface VestingContractInfoEntry {\n    type: Nimiq.Account.Type.VESTING;\n    label: string;\n    address: Uint8Array;\n    owner: Uint8Array;\n    start: number;\n    stepAmount: number;\n    stepBlocks: number;\n    totalAmount: number;\n    balance?: number;\n}\n\nexport interface HashedTimeLockedContractInfoEntry {\n    type: Nimiq.Account.Type.HTLC;\n    label: string;\n    address: Uint8Array;\n    sender: Uint8Array;\n    recipient: Uint8Array;\n    hashRoot: Uint8Array;\n    hashCount: number;\n    timeout: number;\n    totalAmount: number;\n    balance?: number;\n}\n\nexport type ContractInfoEntry = VestingContractInfoEntry | HashedTimeLockedContractInfoEntry;\n","// tslint:disable no-bitwise no-shadowed-variable\n\nimport { WalletInfoEntry } from './WalletInfo';\nimport { LABEL_MAX_LENGTH, WalletType } from '../lib/Constants';\nimport {\n    labelAddress,\n    labelKeyguardAccount,\n    labelVestingContract,\n    labelHashedTimeLockedContract,\n    labelLedgerAccount,\n} from './LabelingMachine';\nimport { ContractInfoEntry, VestingContractInfoEntry } from './ContractInfo';\nimport { AccountInfoEntry } from './AccountInfo';\nimport { Utf8Tools } from '@nimiq/utils';\nimport { decodeBase58 } from './bitcoin/Base58';\n\nclass CookieJar {\n    public static readonly VERSION = 3;\n    public static readonly MAX_COOKIE_SIZE = 3000; // byte, 4*(n/3)=4000 is space taken after base64 encoding\n\n    public static readonly ENCODED_ACCOUNT_SIZE =\n           1 // account type + label length\n        +  1 // status byte\n        +  6 // account id\n        + 63 // account label (not included if default label, but not checked during renaming)\n        +  1 // number of addresses\n        +  1 // address label length\n        + 63 // address label (not included if default label, but not checked during renaming)\n        + 20 // address\n        +  1 // xpub type\n        + 78 // xpub length\n    ;\n\n    public static XPUB_TYPES = [\n        '0488b21e', // xpub - BIP44 Mainnet\n        '043587cf', // tpub - BIP44 Testnet\n        '049d7cb2', // ypub - BIP49 Mainnet\n        '044a5262', // upub - BIP49 Testnet\n        '04b24746', // zpub - BIP84 Mainnet\n        '045f1cf6', // vpub - BIP84 Testnet\n    ];\n\n    public static fill(wallets: WalletInfoEntry[]) {\n        const maxAge = 60 * 60 * 24 * 365; // 1 year\n        const encodedWallets = this.encodeCookie(wallets);\n        // Add 'Secure;' if we are not in a test environment\n        const secure = location.protocol === 'https:' ? 'Secure;' : '';\n\n        document.cookie = `w=${encodedWallets};max-age=${maxAge.toString()};${secure}SameSite=strict`;\n        const storedValue = this.getCookieContents();\n        if (encodedWallets !== storedValue) {\n            console.warn('Cookie could not be updated.');\n        }\n    }\n\n    public static async eat(): Promise<WalletInfoEntry[]> {\n        const encodedWallets = this.getCookieContents();\n        return encodedWallets ? this.decodeCookie(encodedWallets) : [];\n    }\n\n    public static encodeCookie(wallets: WalletInfoEntry[]) {\n        const bytes: number[] = [];\n\n        // Cookie version\n        bytes.push(CookieJar.VERSION);\n\n        for (const wallet of wallets) {\n            bytes.push.apply(bytes, this.encodeWallet(wallet));\n        }\n\n        return Nimiq.BufferUtils.toBase64(new Uint8Array(bytes));\n    }\n\n    public static async decodeCookie(str: string): Promise<WalletInfoEntry[]> {\n        const module = await import(/* webpackChunkName: \"cookie-decoder\" */ './CookieDecoder');\n        return module.CookieDecoder.decode(str);\n    }\n\n    public static canFitNewAccount(): boolean {\n        return (this.MAX_COOKIE_SIZE - this.getCookieSize()) >= this.ENCODED_ACCOUNT_SIZE;\n    }\n\n    public static async canFitNewWallets(wallets?: WalletInfoEntry[]): Promise<boolean> {\n        let sizeNeeded = 0;\n\n        if (!wallets) {\n            const dummyAddressHumanReadable = 'NQ86 6D3H 6MVD 2JV4 N77V FNA5 M9BL 2QSP 1P64';\n            const dummyAddressSerialized = new Uint8Array([51, 71, 19, 87, 173, 20, 186, 75, 28, 253, 125,\n                                                           148, 90, 165, 116, 22, 53, 112, 220, 196]);\n            const dummyWallet = {\n                id: '0fe6067b138f',\n                keyId: 'D+YGexOP0yDjr3Uf6WwO9a2/WjhNbZFLrRwdLfuvz9c=',\n                label: 'Some long label 2 represent a long label, I would say max length', // 63 bytes === max length\n                accounts: new Map<string, AccountInfoEntry>([\n                    [\n                        dummyAddressHumanReadable,\n                        {\n                            path: 'm/44\\'/242\\'/0\\'/0\\'',\n                            label: 'MyAddress1',\n                            address: dummyAddressSerialized,\n                        },\n                    ],\n                ]),\n                contracts: [],\n                type: WalletType.BIP39,\n                keyMissing: true,\n                fileExported: false,\n                wordsExported: false,\n                btcXPub: 'xpub6H1LXWLaKsWFhvm6RVpEL9P4KfRZSW7abD2ttkWP3SSQvnyA8FSVqNTEcYFgJS2UaFcxupHiYkro49S8yGasTvXEYBVPamhGW6cFJodrTHy',\n                btcAddresses: { internal: [], external: [] },\n            };\n            sizeNeeded += this.encodeWallet(dummyWallet).length;\n        } else {\n            const existingWallets = await this.eat();\n            for (const wallet of wallets) {\n                const existingWallet = existingWallets.find((w) => w.id === wallet.id);\n                // new wallet might be larger or even smaller, for example if labels became shorter\n                const currentSize = existingWallet ? this.encodeWallet(existingWallet).length : 0;\n                const newSize = this.encodeWallet(wallet).length;\n                sizeNeeded += newSize - currentSize;\n            }\n        }\n\n        return (this.MAX_COOKIE_SIZE - this.getCookieSize()) >= sizeNeeded;\n    }\n\n    public static encodeAndCutLabel(label: string): Uint8Array {\n        const labelBytes = Utf8Tools.stringToUtf8ByteArray(label);\n        const { result, didTruncate } = Utf8Tools.truncateToUtf8ByteLength(labelBytes, LABEL_MAX_LENGTH);\n        if (didTruncate && typeof global === 'undefined') {\n            // Warn when not running in NodeJS environment (running tests)\n            console.warn('Label was shortened for cookie:', label);\n        }\n        return result;\n    }\n\n    private static checkWalletDefaultLabel(firstAddress: Uint8Array, label: string, type: WalletType): string {\n        if (type === WalletType.LEDGER) {\n            if (label === labelLedgerAccount()) return '';\n            return label;\n        }\n\n        const userFriendlyAddress = new Nimiq.Address(firstAddress).toUserFriendlyAddress();\n        const defaultLabel = labelKeyguardAccount(userFriendlyAddress);\n        if (label === defaultLabel) return '';\n        return label;\n    }\n\n    private static checkAccountDefaultLabel(address: Uint8Array, label: string): string {\n        const userFriendlyAddress = new Nimiq.Address(address).toUserFriendlyAddress();\n        const defaultLabel = labelAddress(userFriendlyAddress);\n        if (label === defaultLabel) return '';\n        return label;\n    }\n\n    private static checkContractDefaultLabel(type: Nimiq.Account.Type, label: string): string {\n        switch (type) {\n            case Nimiq.Account.Type.VESTING: return label === labelVestingContract() ? '' : label;\n            case Nimiq.Account.Type.HTLC: return label === labelHashedTimeLockedContract() ? '' : label;\n            default: return label;\n        }\n    }\n\n    private static encodeWallet(wallet: WalletInfoEntry) {\n        const bytes: number[] = [];\n\n        // The check<Account|Wallet>DefaultLabel functions omit the label when it's the default label\n        const firstAccount = wallet.accounts.values().next().value;\n        const label = wallet.type === WalletType.LEGACY\n            ? this.checkAccountDefaultLabel(\n                firstAccount.address,\n                firstAccount.label,\n            )\n            : this.checkWalletDefaultLabel(\n                firstAccount.address,\n                wallet.label,\n                wallet.type,\n            );\n\n        const labelBytes = this.encodeAndCutLabel(label);\n\n        // Combined label length & wallet type\n        bytes.push((labelBytes.length << 2) | wallet.type);\n\n        // Status\n        let statusByte: number = 0;\n        statusByte = statusByte\n                | (wallet.keyMissing ? CookieJar.StatusFlags.KEY_MISSING : CookieJar.StatusFlags.NONE)\n                | (wallet.fileExported ? CookieJar.StatusFlags.FILE_EXPORTED : CookieJar.StatusFlags.NONE)\n                | (wallet.wordsExported ? CookieJar.StatusFlags.WORDS_EXPORTED : CookieJar.StatusFlags.NONE)\n                | (wallet.contracts.length ? CookieJar.StatusFlags.HAS_CONTRACTS : CookieJar.StatusFlags.NONE)\n                | (wallet.btcXPub ? CookieJar.StatusFlags.HAS_XPUB : CookieJar.StatusFlags.NONE)\n        ;\n        bytes.push(statusByte);\n\n        // Wallet ID\n        const walletIdChunks = wallet.id.match(/.{2}/g);\n        for (const chunk of walletIdChunks!) {\n            bytes.push(parseInt(chunk, 16));\n        }\n\n        // Label\n        bytes.push.apply(bytes, Array.from(labelBytes));\n\n        // Legacy account information\n        if (wallet.type === WalletType.LEGACY) {\n            const account = wallet.accounts.values().next().value;\n\n            // Account address\n            bytes.push.apply(bytes, Array.from(account.address));\n\n            this.encodeContracts(wallet.contracts, bytes);\n\n            return bytes;\n        }\n\n        // Regular label and account information\n\n        // Wallet number of accounts\n        bytes.push(wallet.accounts.size);\n\n        // Wallet accounts\n        const accounts = Array.from(wallet.accounts.values());\n        for (const account of accounts) {\n            const label = this.checkAccountDefaultLabel(account.address, account.label);\n            const labelBytes = this.encodeAndCutLabel(label);\n\n            // Account label length\n            bytes.push(labelBytes.length);\n\n            // Account label\n            bytes.push.apply(bytes, Array.from(labelBytes));\n\n            // Account address\n            bytes.push.apply(bytes, Array.from(account.address));\n        }\n\n        this.encodeContracts(wallet.contracts, bytes);\n\n        this.encodeXPub(wallet.btcXPub, bytes);\n\n        return bytes;\n    }\n\n    private static encodeContracts(contracts: ContractInfoEntry[], bytes: number[]) {\n        if (!contracts.length) return;\n\n        bytes.push(contracts.length);\n\n        for (const contract of contracts) {\n            const label = this.checkContractDefaultLabel(contract.type, contract.label);\n            const labelBytes = this.encodeAndCutLabel(label);\n\n            // Combined contract label length and type\n            bytes.push((labelBytes.length << 2) | contract.type);\n\n            // Contract label\n            bytes.push.apply(bytes, Array.from(labelBytes));\n\n            // Contract address\n            bytes.push.apply(bytes, Array.from(contract.address));\n\n            switch (contract.type) {\n                case Nimiq.Account.Type.VESTING:\n                    const data = contract as VestingContractInfoEntry;\n                    bytes.push.apply(bytes, Array.from(data.owner));\n                    bytes.push.apply(bytes, this.toBase256(data.start, 4)); // Uint32\n                    bytes.push.apply(bytes, this.toBase256(data.stepAmount, 8)); // Uint64\n                    bytes.push.apply(bytes, this.toBase256(data.stepBlocks, 4)); // Uint32\n                    bytes.push.apply(bytes, this.toBase256(data.totalAmount, 8)); // Uint64\n                    break;\n                case Nimiq.Account.Type.HTLC:\n                    throw new Error('HTLC encoding is not yet implemented');\n                default:\n                    // @ts-ignore Property 'type' does not exist on type 'never'.\n                    throw new Error('Unknown contract type: ' + contract.type);\n            }\n        }\n\n        return bytes;\n    }\n\n    private static encodeXPub(xpub: string | undefined, bytes: number[]) {\n        if (!xpub) return;\n\n        const xpubBytes = decodeBase58(xpub);\n        const xpubType = CookieJar.XPUB_TYPES.indexOf(Nimiq.BufferUtils.toHex(new Uint8Array(xpubBytes.slice(0, 4))));\n        const xpubBody = xpubBytes.slice(4);\n\n        bytes.push(xpubType);\n        bytes.push.apply(bytes, xpubBody);\n\n        return bytes;\n    }\n\n    private static getCookieContents(): string | null {\n        const match = document.cookie.match(new RegExp('w=([^;]+)'));\n        return match && match[1];\n    }\n\n    private static getCookieSize(): number {\n        const encodedWallets = this.getCookieContents() || '';\n        return Nimiq.BufferUtils.fromBase64(encodedWallets).length;\n    }\n\n    private static toBase256(value: number, padToBytes?: number) {\n        let bits = value.toString(2);\n\n        if (padToBytes) {\n            bits = bits.padStart(padToBytes * 8, '0');\n        }\n\n        // Reverse so we can split into 8s from the end\n        const reverseBits = bits.split('').reverse().join('');\n\n        // Split into chunks of 8 bits\n        const reverseBytes = reverseBits.match(/.{1,8}/g) as RegExpMatchArray;\n\n        // Reverse chunks, parse as base2 int, reverse array\n        const bytes = reverseBytes.map((revByte) => parseInt(revByte.split('').reverse().join(''), 2)).reverse();\n        return bytes;\n    }\n}\n\nnamespace CookieJar {\n    export enum StatusFlags {\n        NONE           = 0,\n        KEY_MISSING    = 1 << 0,\n        FILE_EXPORTED  = 1 << 1,\n        WORDS_EXPORTED = 1 << 2,\n        HAS_CONTRACTS  = 1 << 3,\n        HAS_XPUB       = 1 << 4,\n    }\n}\n\nexport default CookieJar;\n","import Config from 'config';\nimport {\n    NETWORK_TEST,\n    NETWORK_DEV,\n    NETWORK_MAIN,\n    ERROR_INVALID_NETWORK,\n    MOBILE_MAX_WIDTH,\n} from './Constants';\n\nexport function setHistoryStorage(key: string, data: any) {\n    // Note that data can be anything that can be structurally cloned:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    history.replaceState({\n        ...history.state,\n        [key]: data,\n    }, '');\n}\n\nexport function getHistoryStorage(key: string): any | undefined {\n    return history.state ? history.state[key] : undefined;\n}\n\nexport const loadNimiq = async () => {\n    await Nimiq.WasmHelper.doImport();\n    let genesisConfigInitialized = true;\n    try {\n        Nimiq.GenesisConfig.NETWORK_ID; // tslint:disable-line:no-unused-expression\n    } catch (e) {\n        genesisConfigInitialized = false;\n    }\n    if (!genesisConfigInitialized) {\n        switch (Config.network) {\n            case NETWORK_TEST:\n                Nimiq.GenesisConfig.test();\n                break;\n            case NETWORK_MAIN:\n                Nimiq.GenesisConfig.main();\n                break;\n            case NETWORK_DEV:\n                Nimiq.GenesisConfig.dev();\n                break;\n            default:\n                throw new Error(ERROR_INVALID_NETWORK);\n        }\n    }\n};\n\nexport function includesOrigin(list: string[], origin: string) {\n    return list.includes(origin) || list.includes('*');\n}\n\nexport function isDesktop() {\n    return (window.innerWidth\n        || document.documentElement.clientWidth\n        || document.body.clientWidth) > MOBILE_MAX_WIDTH;\n}\n\nexport function isMilliseconds(time: number) {\n    /*\n     * 1568577148 = timestamp at time of writing\n     * 100000000000 ~ 11/16/5138\n     */\n    return time > 100000000000;\n}\n","// @ts-ignore Could not find a declaration file for module '@nimiq/iqons'.\nimport { getBackgroundColorName } from '@nimiq/iqons';\n// @ts-ignore Could not find a declaration file for module '@nimiq/iqons/dist/iqons-name.min.js'.\nimport { name } from '@nimiq/iqons/dist/iqons-name.min.js';\nimport { i18n } from '../i18n/i18n-setup';\n\nexport function labelAddress(address: string): string {\n    return name(address);\n}\n\nexport function labelKeyguardAccount(firstAddress: string): string {\n    const color = translateColor(getBackgroundColorName(firstAddress));\n    return i18n.t('{color} Account', { color }) as string;\n}\n\nexport function labelLedgerAccount(): string {\n    return i18n.t('Ledger Account') as string;\n}\n\nexport function labelLegacyAccount(): string {\n    return i18n.t('Legacy Account') as string;\n}\n\nexport function labelVestingContract(): string {\n    return i18n.t('Vesting Contract') as string;\n}\n\nexport function labelHashedTimeLockedContract(): string {\n    return 'HTLC';\n}\n\nexport function labelLegacyAccountGroup(): string {\n    return i18n.t('Single Accounts') as string;\n}\n\nfunction translateColor(color: string): string {\n    switch (color) {\n        // Specifically list all colors for the i18n:extract script\n        case 'Orange': return i18n.t('Orange') as string;\n        case 'Red': return i18n.t('Red') as string;\n        case 'Yellow': return i18n.t('Yellow') as string;\n        case 'Indigo': return i18n.t('Indigo') as string;\n        case 'Blue': return i18n.t('Blue') as string;\n        case 'Purple': return i18n.t('Purple') as string;\n        case 'Teal': return i18n.t('Teal') as string;\n        case 'Pink': return i18n.t('Pink') as string;\n        case 'Green': return i18n.t('Green') as string;\n        case 'Brown': return i18n.t('Brown') as string;\n        default: throw new Error(`Missing translation for color: ${color}`);\n    }\n}\n","import type { WalletType } from './Constants';\n\nimport type { NimiqSpecifics } from './paymentOptions/NimiqPaymentOptions';\nimport type { NimiqDirectPaymentOptions } from './paymentOptions/NimiqPaymentOptions';\nimport type { BitcoinSpecifics } from './paymentOptions/BitcoinPaymentOptions';\nimport type { BitcoinDirectPaymentOptions } from './paymentOptions/BitcoinPaymentOptions';\nimport type { EtherSpecifics } from './paymentOptions/EtherPaymentOptions';\nimport type { EtherDirectPaymentOptions } from './paymentOptions/EtherPaymentOptions';\n\nexport enum RequestType {\n    LIST = 'list',\n    LIST_CASHLINKS = 'list-cashlinks',\n    MIGRATE = 'migrate',\n    CHECKOUT = 'checkout',\n    SIGN_MESSAGE = 'sign-message',\n    SIGN_TRANSACTION = 'sign-transaction',\n    ONBOARD = 'onboard',\n    SIGNUP = 'signup',\n    LOGIN = 'login',\n    EXPORT = 'export',\n    CHANGE_PASSWORD = 'change-password',\n    LOGOUT = 'logout',\n    ADD_ADDRESS = 'add-address',\n    RENAME = 'rename',\n    ADD_VESTING_CONTRACT = 'add-vesting-contract',\n    CHOOSE_ADDRESS = 'choose-address',\n    CREATE_CASHLINK = 'create-cashlink',\n    MANAGE_CASHLINK = 'manage-cashlink',\n    SIGN_BTC_TRANSACTION = 'sign-btc-transaction',\n    ADD_BTC_ADDRESSES = 'add-btc-addresses',\n    ACTIVATE_BITCOIN = 'activate-bitcoin',\n    SETUP_SWAP = 'setup-swap',\n    REFUND_SWAP = 'refund-swap',\n}\n\nexport type Bytes = Uint8Array | string;\n\nexport interface BasicRequest {\n    appName: string;\n}\n\nexport interface SimpleRequest extends BasicRequest {\n    accountId: string;\n}\n\nexport interface SimpleResult {\n    success: true;\n}\n\nexport interface OnboardRequest extends BasicRequest {\n    disableBack?: boolean;\n}\n\nexport interface ChooseAddressRequest extends BasicRequest {\n    returnBtcAddress?: boolean;\n    minBalance?: number;\n    disableContracts?: boolean;\n    disableLegacyAccounts?: boolean;\n    disableBip39Accounts?: boolean;\n    disableLedgerAccounts?: boolean;\n}\n\nexport interface ChooseAddressResult extends Address {\n    btcAddress?: string;\n}\n\nexport interface SignTransactionRequest extends BasicRequest {\n    sender: string;\n    recipient: string;\n    recipientType?: Nimiq.Account.Type;\n    recipientLabel?: string;\n    value: number;\n    fee?: number;\n    extraData?: Bytes;\n    flags?: number;\n    validityStartHeight: number; // FIXME To be made optional when hub has its own network\n}\n\nexport interface NimiqCheckoutRequest extends BasicRequest {\n    version?: 1;\n    shopLogoUrl?: string;\n    sender?: string;\n    forceSender?: boolean;\n    recipient: string;\n    recipientType?: Nimiq.Account.Type;\n    value: number;\n    fee?: number;\n    extraData?: Bytes;\n    flags?: number;\n    validityDuration?: number;\n    disableDisclaimer?: boolean; // only allowed for privileged origins\n}\n\nexport enum PaymentType {\n    DIRECT,\n    OASIS,\n}\n\nexport enum Currency {\n    NIM = 'nim',\n    BTC = 'btc',\n    ETH = 'eth',\n}\n\nexport type ProtocolSpecificsForCurrency<C extends Currency> =\n    C extends Currency.NIM ? NimiqSpecifics\n    : C extends Currency.BTC ? BitcoinSpecifics\n    : C extends Currency.ETH ? EtherSpecifics\n    : undefined;\n\nexport enum PaymentState {\n    NOT_FOUND = 'NOT_FOUND',\n    PAID = 'PAID',\n    UNDERPAID = 'UNDERPAID',\n    OVERPAID = 'OVERPAID',\n}\n\nexport interface PaymentOptions<C extends Currency, T extends PaymentType> {\n    type: T;\n    currency: C;\n    expires?: number;\n    /**\n     * Amount in the smallest unit of the currency specified as `currency`.\n     * i.e Luna for Currency.NIM and Satoshi for Currency.BTC\n     */\n    amount: string;\n    /**\n     * Crypto payment markup contained in `amount` that the vendor charges. Relative value, e.g. .01 for 1%.\n     * Can be negative to describe a discount.\n     */\n    vendorMarkup?: number;\n    protocolSpecific: ProtocolSpecificsForCurrency<C>;\n}\n\nexport type AvailablePaymentOptions = NimiqDirectPaymentOptions\n                                    | EtherDirectPaymentOptions\n                                    | BitcoinDirectPaymentOptions;\n\nexport type PaymentOptionsForCurrencyAndType<C extends Currency, T extends PaymentType> =\n    T extends PaymentType.DIRECT ?\n        C extends Currency.NIM ? NimiqDirectPaymentOptions\n        : C extends Currency.BTC ? BitcoinDirectPaymentOptions\n        : C extends Currency.ETH ? EtherDirectPaymentOptions\n        : PaymentOptions<C, T>\n    : PaymentOptions<C, T>;\n\nexport interface MultiCurrencyCheckoutRequest extends BasicRequest {\n    version: 2;\n    /**\n     * Must be located on the same origin as the one the request is sent from.\n     */\n    shopLogoUrl: string;\n    /**\n     * TODO description of the api the callback needs to provide.\n     * Input is {currency, type} alongside the order identifying parameters in the url.\n     * the called url must return a PaymentOptions<currency, type> object\n     */\n    callbackUrl?: string;\n    /**\n     * A CSRF token, that will be transmitted in all requests to the callback url.\n     */\n    csrf?: string;\n    /**\n     * The data to be included in the transaction. Ignored for `Currenct.BTC` and `Currency.ETH`.\n     * @deprecated use NimiqDirectPaymentOptions.protocolSpecific.extraData instead.\n     */\n    extraData?: Bytes;\n    /**\n     * Current time in seconds or milliseconds\n     */\n    time: number;\n    /**\n     * ISO 4217 Code (three letters) of the fiat currency used on the calling site.\n     */\n    fiatCurrency: string;\n    /**\n     * Amount in the currency specified by `fiatCurrency`\n     */\n    fiatAmount: number;\n    /**\n     * Array of available payment options.\n     * Each currency can only be present once, and a Currency.NIM option must exist.\n     */\n    paymentOptions: AvailablePaymentOptions[];\n    /**\n     * Enable UI adaptions for the use as point of sale. Paying directly from logged-in hub accounts and buttons to open\n     * local wallets get disabled.\n     */\n    isPointOfSale?: boolean;\n    /**\n     * Option to disable the disclaimer at the bottom of the checkout page. Only allowed for privileged origins.\n     */\n    disableDisclaimer?: boolean; // only allowed for privileged origins\n}\n\nexport type CheckoutRequest = NimiqCheckoutRequest | MultiCurrencyCheckoutRequest;\n\nexport interface SignedTransaction {\n    serializedTx: string; // HEX\n    hash: string; // HEX\n\n    raw: {\n        signerPublicKey: Uint8Array;\n        signature: Uint8Array;\n\n        sender: string; // Userfriendly address\n        senderType: Nimiq.Account.Type;\n        recipient: string; // Userfriendly address\n        recipientType: Nimiq.Account.Type;\n        value: number; // Luna\n        fee: number; // Luna\n        validityStartHeight: number;\n        extraData: Uint8Array;\n        flags: number;\n        networkId: number;\n        proof: Uint8Array;\n    };\n}\n\nexport interface NimiqHtlcCreationInstructions {\n    type: 'NIM';\n    sender: string; // My address, must be redeem address of HTLC, or if contract, its owner must be redeem address\n    value: number; // Luna\n    fee: number; // Luna\n    validityStartHeight: number;\n}\n\nexport interface BitcoinHtlcCreationInstructions {\n    type: 'BTC';\n    inputs: Array<{\n        address: string,\n        transactionHash: string,\n        outputIndex: number,\n        outputScript: string,\n        value: number, // Sats\n        sequence?: number,\n    }>;\n    output: {\n        value: number, // Sats\n    };\n    changeOutput?: {\n        address: string,\n        value: number, // Sats\n    };\n    refundAddress: string;\n    locktime?: number;\n}\n\nexport interface EuroHtlcCreationInstructions {\n    type: 'EUR';\n    value: number; // Eurocents\n    fee: number; // Eurocents\n    bankLabel?: string;\n}\n\nexport interface NimiqHtlcSettlementInstructions {\n    type: 'NIM';\n    recipient: string; // My address, must be redeem address of HTLC\n    value: number; // Luna\n    fee: number; // Luna\n    extraData?: Bytes;\n    validityStartHeight: number;\n}\n\nexport interface BitcoinHtlcSettlementInstructions {\n    type: 'BTC';\n    input: {\n        // transactionHash: string,\n        // outputIndex: number,\n        // outputScript: string,\n        value: number, // Sats\n    };\n    output: {\n        address: string, // My address, must be redeem address of HTLC\n        value: number, // Sats\n    };\n}\n\nexport interface EuroHtlcSettlementInstructions {\n    type: 'EUR';\n    value: number; // Eurocents\n    fee: number; // Eurocents\n    bankLabel?: string;\n    settlement: {\n        type: 'sepa',\n        recipient: {\n            name: string,\n            iban: string,\n            bic: string,\n        },\n    } | {\n        type: 'mock',\n    };\n}\n\nexport interface NimiqHtlcRefundInstructions {\n    type: 'NIM';\n    sender: string; // HTLC address\n    recipient: string; // My address, must be refund address of HTLC\n    value: number; // Luna\n    fee: number; // Luna\n    extraData?: Bytes;\n    validityStartHeight: number;\n}\n\nexport interface BitcoinHtlcRefundInstructions {\n    type: 'BTC';\n    input: {\n        transactionHash: string,\n        outputIndex: number,\n        outputScript: string,\n        value: number, // Sats\n        witnessScript: string,\n    };\n    output: {\n        address: string, // My address\n        value: number, // Sats\n    };\n    refundAddress: string; // My address, must be refund address of HTLC\n}\n\nexport type HtlcCreationInstructions =\n    NimiqHtlcCreationInstructions\n    | BitcoinHtlcCreationInstructions\n    | EuroHtlcCreationInstructions;\n\nexport type HtlcSettlementInstructions =\n    NimiqHtlcSettlementInstructions\n    | BitcoinHtlcSettlementInstructions\n    | EuroHtlcSettlementInstructions;\n\nexport type HtlcRefundInstructions =\n    NimiqHtlcRefundInstructions\n    | BitcoinHtlcRefundInstructions;\n\nexport interface SetupSwapRequest extends SimpleRequest {\n    swapId: string;\n    fund: HtlcCreationInstructions;\n    redeem: HtlcSettlementInstructions;\n\n    // Data needed for display\n    fiatCurrency: string;\n    fundingFiatRate: number;\n    redeemingFiatRate: number;\n    fundFees: { // In the currency that gets funded\n        processing: number,\n        redeeming: number,\n    };\n    redeemFees: { // In the currency that gets redeemed\n        funding: number,\n        processing: number,\n    };\n    serviceSwapFee: number; // Luna or Sats, depending which one gets funded\n    layout?: 'standard' | 'slider';\n    nimiqAddresses?: Array<{\n        address: string,\n        balance: number, // Luna\n    }>;\n    bitcoinAccount?: {\n        balance: number, // Sats\n    };\n}\n\nexport interface SetupSwapResult {\n    nim?: SignedTransaction;\n    nimProxy?: SignedTransaction;\n    btc?: SignedBtcTransaction;\n    eur?: string; // When funding EUR: empty string, when redeeming EUR: JWS of the settlement instructions\n    refundTx?: string;\n}\n\nexport interface RefundSwapRequest extends SimpleRequest {\n    refund: HtlcRefundInstructions;\n}\n\nexport interface SignMessageRequest extends BasicRequest {\n    signer?: string;\n    message: string | Uint8Array;\n}\n\nexport interface SignedMessage {\n    signer: string; // Userfriendly address\n    signerPublicKey: Uint8Array;\n    signature: Uint8Array;\n}\n\nexport interface Address {\n    address: string; // Userfriendly address\n    label: string;\n}\n\nexport interface VestingContract {\n    type: Nimiq.Account.Type.VESTING;\n    address: string; // Userfriendly address\n    label: string;\n\n    owner: string; // Userfriendly address\n    start: number;\n    stepAmount: number;\n    stepBlocks: number;\n    totalAmount: number;\n}\n\nexport interface HashedTimeLockedContract {\n    type: Nimiq.Account.Type.HTLC;\n    address: string; // Userfriendly address\n    label: string;\n\n    sender: string;  // Userfriendly address\n    recipient: string;  // Userfriendly address\n    hashRoot: string; // HEX\n    hashCount: number;\n    timeout: number;\n    totalAmount: number;\n}\n\nexport type Contract = VestingContract | HashedTimeLockedContract;\n\nexport interface Account {\n    accountId: string;\n    label: string;\n    type: WalletType;\n    fileExported: boolean;\n    wordsExported: boolean;\n    addresses: Address[];\n    contracts: Contract[];\n    btcAddresses: {\n        internal: string[],\n        external: string[],\n    };\n    uid: string;\n}\n\nexport interface ExportRequest extends SimpleRequest {\n    fileOnly?: boolean;\n    wordsOnly?: boolean;\n}\n\nexport interface ExportResult {\n    fileExported: boolean;\n    wordsExported: boolean;\n}\n\nexport interface RenameRequest extends SimpleRequest {\n    address?: string; // Userfriendly address\n}\n\nexport enum CashlinkState {\n    UNKNOWN = -1,\n    UNCHARGED = 0,\n    CHARGING = 1,\n    UNCLAIMED = 2,\n    CLAIMING = 3,\n    CLAIMED = 4,\n}\n\nexport enum CashlinkTheme {\n    UNSPECIFIED, // Equivalent to theme being omitted\n    STANDARD,\n    CHRISTMAS,\n    LUNAR_NEW_YEAR,\n    EASTER,\n    GENERIC,\n    BIRTHDAY,\n    // Temporary themes that might be retracted in the future should be listed counting down from 255\n}\n\nexport interface Cashlink {\n    address: string; // Userfriendly address\n    message: string;\n    value: number;\n    status: CashlinkState;\n    theme: CashlinkTheme;\n    link?: string;\n}\n\nexport type CreateCashlinkRequest = BasicRequest & {\n    value?: number,\n    theme?: CashlinkTheme,\n    fiatCurrency?: string,\n} & (\n    {} | {\n        message: string,\n        autoTruncateMessage?: boolean,\n    }\n) & (\n    {} | {\n        senderAddress: string,\n        senderBalance?: number,\n    }\n) & ({\n        returnLink?: false,\n    } | {\n        returnLink: true,\n        skipSharing?: boolean,\n    }\n);\n\nexport interface ManageCashlinkRequest extends BasicRequest {\n    cashlinkAddress: string;\n}\n\n/**\n * Bitcoin\n */\n\nexport interface SignBtcTransactionRequest extends SimpleRequest {\n    inputs: Array<{\n        address: string,\n        transactionHash: string,\n        outputIndex: number,\n        outputScript: string, // hex or base64\n        value: number,\n        witnessScript?: string, // Custom witness script for p2wsh input. hex or base64.\n        sequence?: number,\n    }>;\n    output: {\n        address: string,\n        value: number,\n        label?: string,\n    };\n    changeOutput?: {\n        address: string,\n        value: number,\n    };\n    locktime?: number;\n}\n\nexport interface SignedBtcTransaction {\n    serializedTx: string; // HEX\n    hash: string; // HEX\n}\n\nexport interface AddBtcAddressesRequest extends SimpleRequest {\n    chain: 'internal' | 'external';\n    firstIndex: number;\n}\n\nexport interface AddBtcAddressesResult {\n    addresses: string[];\n}\n\nexport type RpcRequest = SignTransactionRequest\n                       | CreateCashlinkRequest\n                       | ManageCashlinkRequest\n                       | CheckoutRequest\n                       | BasicRequest\n                       | SimpleRequest\n                       | ChooseAddressRequest\n                       | OnboardRequest\n                       | RenameRequest\n                       | SignMessageRequest\n                       | ExportRequest\n                       | SignBtcTransactionRequest\n                       | AddBtcAddressesRequest\n                       | SetupSwapRequest\n                       | RefundSwapRequest;\n\nexport type RpcResult = SignedTransaction\n                      | Account\n                      | Account[]\n                      | SimpleResult\n                      | ChooseAddressResult\n                      | Address\n                      | Cashlink\n                      | Cashlink[]\n                      | SignedMessage\n                      | ExportResult\n                      | SignedBtcTransaction\n                      | AddBtcAddressesResult\n                      | SetupSwapResult;\n\nexport type ResultByRequestType<T> =\n    T extends RequestType.RENAME ? Account :\n    T extends RequestType.ONBOARD | RequestType.SIGNUP | RequestType.LOGIN\n            | RequestType.MIGRATE | RequestType.LIST ? Account[] :\n    T extends RequestType.LIST_CASHLINKS ? Cashlink[] :\n    T extends RequestType.CHOOSE_ADDRESS | RequestType.ADD_ADDRESS ? Address :\n    T extends RequestType.SIGN_TRANSACTION ? SignedTransaction :\n    T extends RequestType.CHECKOUT ? SignedTransaction | SimpleResult :\n    T extends RequestType.SIGN_MESSAGE ? SignedMessage :\n    T extends RequestType.LOGOUT | RequestType.CHANGE_PASSWORD ? SimpleResult :\n    T extends RequestType.EXPORT ? ExportResult :\n    T extends RequestType.CREATE_CASHLINK | RequestType.MANAGE_CASHLINK ? Cashlink :\n    T extends RequestType.SIGN_BTC_TRANSACTION ? SignedBtcTransaction :\n    T extends RequestType.ACTIVATE_BITCOIN ? Account :\n    T extends RequestType.ADD_BTC_ADDRESSES ? AddBtcAddressesResult :\n    T extends RequestType.SETUP_SWAP ? SetupSwapResult :\n    never;\n","import { init as initSentry, captureException } from '@sentry/vue';\nimport Config from 'config';\n\nexport function startSentry(Vue: any) {\n    if (Config.reportToSentry) {\n        initSentry({\n            dsn: 'https://92f2289fc2ac4c809dfa685911f865c2@o208918.ingest.sentry.io/1330855',\n            Vue,\n            environment: Config.network,\n            attachProps: true,\n        });\n        Vue.prototype.$captureException = captureException;\n    }\n}\n\n// Types\ndeclare module 'vue/types/vue' {\n    interface Vue {\n        $captureException?: typeof captureException;\n    }\n}\n","export abstract class Store<Info, Entry> {\n    private static INDEXEDDB_IMPLEMENTATION = window.indexedDB;\n\n    private _dbPromise: Promise<IDBDatabase> | null;\n    private _indexedDB: IDBFactory;\n\n    protected abstract get DB_NAME(): string;\n    protected abstract get DB_STORE_NAME(): string;\n    protected abstract get DB_VERSION(): number;\n\n    protected constructor() {\n        this._dbPromise = null;\n        this._indexedDB = Store.INDEXEDDB_IMPLEMENTATION;\n    }\n\n    public async get(id: string): Promise<Info | null> {\n        const db = await this.connect();\n        const transaction = db.transaction(this.DB_STORE_NAME, 'readonly');\n        const request = transaction.objectStore(this.DB_STORE_NAME).get(id);\n        const result = await this._requestAsPromise(request, transaction);\n        return result ? this.fromEntry(result) : result;\n    }\n\n    public async put(value: Info) {\n        const db = await this.connect();\n        const transaction = db.transaction(this.DB_STORE_NAME, 'readwrite');\n        const request = transaction.objectStore(this.DB_STORE_NAME).put(this.toEntry(value));\n        return this._requestAsPromise(request, transaction);\n    }\n\n    public async remove(id: string) {\n        const db = await this.connect();\n        const transaction = db.transaction(this.DB_STORE_NAME, 'readwrite');\n        const request = transaction.objectStore(this.DB_STORE_NAME).delete(id);\n        return this._requestAsPromise(request, transaction);\n    }\n\n    public async list(): Promise<Entry[]> {\n        const db = await this.connect();\n        const request = db.transaction(this.DB_STORE_NAME, 'readonly')\n            .objectStore(this.DB_STORE_NAME)\n            .openCursor();\n        return this._readAllFromCursor(request);\n    }\n\n    public async close() {\n        if (!this._dbPromise) {\n            return;\n        }\n        // If failed to open database (i.e. dbPromise rejects) we don't need to close the db\n        const db = await this._dbPromise.catch(() => null);\n        this._dbPromise = null;\n        if (db) {\n            db.close();\n        }\n    }\n\n    protected abstract upgrade(request: IDBOpenDBRequest, event: IDBVersionChangeEvent): void;\n\n    protected abstract toEntry(info: Info): Entry;\n\n    protected abstract fromEntry(entry: Entry): Info;\n\n    private async connect(): Promise<IDBDatabase> {\n        if (this._dbPromise) {\n            return this._dbPromise;\n        }\n\n        this._dbPromise = new Promise((resolve, reject) => {\n            const request = this._indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n            request.onupgradeneeded = (event) => this.upgrade(request, event);\n        });\n        return this._dbPromise;\n    }\n\n    private async _requestAsPromise(request: IDBRequest, transaction: IDBTransaction): Promise<any> {\n        return Promise.all([\n            new Promise((resolve, reject) => {\n                request.onsuccess = () => resolve(request.result);\n                request.onerror = () => reject(request.error);\n            }),\n            new Promise((resolve, reject) => {\n                transaction.oncomplete = () => resolve();\n                transaction.onabort = () => reject(transaction.error);\n                transaction.onerror = () => reject(transaction.error);\n            }),\n        ])\n        // Promise.all returns an array of resolved promises, but we are only\n        // interested in the request.result, which is the first item.\n        .then((result) => result[0]);\n    }\n\n    private _readAllFromCursor(request: IDBRequest): Promise<Entry[]> {\n        return new Promise((resolve, reject) => {\n            const results: any[] = [];\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    results.push(cursor.value);\n                    cursor.continue();\n                } else {\n                    resolve(results);\n                }\n            };\n            request.onerror = () => reject(request.error);\n        });\n    }\n}\n","/**\n * The UID is used for the purpose of tracking Fastspot swap limits per user. It is generated from\n * two deterministic values. The keyId of an account and its first NIM address, wich are always the same.\n *\n * The `keyId` is never passed to outside the Hub, so can be seen as a secret value. This way\n * it is impossible for anyone who gets access to the UID alone to determine the user's address.\n */\nexport async function makeUid(keyId: string, firstAddress: string): Promise<string> {\n    return toHex(await sha256(fromAscii(`Nimiq UID: ${keyId} ${firstAddress}`)));\n}\n\n/**\n * This method uses only browser-native APIs to avoid loading the Nimiq or Bitcoin library, as this\n * method is also used in the iframe.\n */\nasync function sha256(buffer: Uint8Array): Promise<Uint8Array> {\n    return new Uint8Array(await window.crypto.subtle.digest('SHA-256', buffer));\n}\n\n/**\n * Conversion functions taken from Nimiq.BufferUtils.\n */\n\nfunction fromAscii(ascii: string): Uint8Array {\n    const buf = new Uint8Array(ascii.length);\n    for (let i = 0; i < ascii.length; ++i) { // tslint:disable-line:prefer-for-of\n        buf[i] = ascii.charCodeAt(i);\n    }\n    return buf;\n}\n\nfunction toHex(buffer: Uint8Array) {\n    const HEX_ALPHABET = '0123456789abcdef';\n    let hex = '';\n    for (let i = 0; i < buffer.length; i++) { // tslint:disable-line:prefer-for-of\n        const code = buffer[i];\n        hex += HEX_ALPHABET[code >>> 4]; // tslint:disable-line:no-bitwise\n        hex += HEX_ALPHABET[code & 0x0F]; // tslint:disable-line:no-bitwise\n    }\n    return hex;\n}\n","import { AccountInfo, AccountInfoEntry } from './AccountInfo';\nimport { BtcAddressInfo, BtcAddressInfoEntry } from './bitcoin/BtcAddressInfo';\nimport {\n    ContractInfo,\n    ContractInfoEntry,\n    ContractInfoHelper,\n} from './ContractInfo';\nimport { Account } from './PublicRequestTypes';\nimport { labelKeyguardAccount } from './LabelingMachine';\nimport WalletInfoCollector from './WalletInfoCollector';\nimport { WalletStore } from '../lib/WalletStore';\nimport { WalletType } from './Constants';\nimport { makeUid } from './Uid';\nimport AddressUtils from './AddressUtils';\n\nexport class WalletInfo {\n    public static fromObject(o: WalletInfoEntry): WalletInfo {\n        const accounts = new Map<string, AccountInfo>();\n        o.accounts.forEach((accountInfoEntry, userFriendlyAddress) => {\n            accounts.set(userFriendlyAddress, AccountInfo.fromObject(accountInfoEntry));\n        });\n        const contracts = o.contracts.map((contract) => ContractInfoHelper.fromObject(contract));\n\n        // Polyfill BTC address lists for pre-BTC wallets\n        if (!o.btcAddresses) o.btcAddresses = { internal: [], external: [] };\n\n        const btcAddresses = {\n            internal: o.btcAddresses.internal\n                .map((btcAddressInfoEntry) => BtcAddressInfo.fromObject(btcAddressInfoEntry)),\n            external: o.btcAddresses.external\n                .map((btcAddressInfoEntry) => BtcAddressInfo.fromObject(btcAddressInfoEntry)),\n        };\n\n        return new WalletInfo(o.id, o.keyId, o.label, accounts, contracts, o.type,\n            o.keyMissing, o.fileExported, o.wordsExported, o.btcXPub, btcAddresses);\n    }\n\n    public static async objectToAccountType(o: WalletInfoEntry): Promise<Account> {\n        // Polyfill BTC address lists for pre-BTC wallets\n        if (!o.btcAddresses) o.btcAddresses = { internal: [], external: [] };\n\n        const accountInfoEntries = Array.from(o.accounts.values());\n\n        return {\n            accountId: o.id,\n            label: o.label,\n            type: o.type,\n            fileExported: o.fileExported,\n            wordsExported: o.wordsExported,\n            addresses: accountInfoEntries.map((entry) => AccountInfo.objectToAddressType(entry)),\n            contracts: o.contracts.map((contract) => ContractInfoHelper.objectToContractType(contract)),\n            btcAddresses: {\n                internal: o.btcAddresses.internal.map((entry) => BtcAddressInfo.objectToBtcAddressType(entry)),\n                external: o.btcAddresses.external.map((entry) => BtcAddressInfo.objectToBtcAddressType(entry)),\n            },\n            uid: o.keyId\n                ? await makeUid(o.keyId, AddressUtils.toUserFriendlyAddress(accountInfoEntries[0].address))\n                : '',\n        };\n    }\n\n    private _uid: string | undefined;\n\n    public constructor(\n        public id: string,\n        public keyId: string,\n        public label: string,\n        public accounts: Map</*address*/ string, AccountInfo>,\n        public contracts: ContractInfo[],\n        public type: WalletType,\n        public keyMissing: boolean = false,\n        public fileExported: boolean = false,\n        public wordsExported: boolean = false,\n        public btcXPub?: string,\n        public btcAddresses: {\n            internal: BtcAddressInfo[],\n            external: BtcAddressInfo[],\n        } = {\n            internal: [],\n            external: [],\n        },\n    ) {}\n\n    public get defaultLabel(): string {\n        return labelKeyguardAccount(this.accounts.keys().next().value);\n    }\n\n    public get labelForKeyguard(): string | undefined {\n        return this.type !== WalletType.LEGACY ? this.label : undefined;\n    }\n\n    public findContractByAddress(address: Nimiq.Address): ContractInfo | undefined {\n        return this.contracts.find((contract) => contract.address.equals(address));\n    }\n\n    public findContractsByOwner(address: Nimiq.Address): ContractInfo[] {\n        return this.contracts.filter((contract) => {\n            switch (contract.type) {\n                case Nimiq.Account.Type.VESTING: return contract.owner.equals(address);\n                case Nimiq.Account.Type.HTLC:\n                    return contract.sender.equals(address)\n                        || contract.recipient.equals(address);\n                default: return false;\n            }\n        });\n    }\n\n    public findSignerForAddress(address: Nimiq.Address): AccountInfo | null {\n        const addressInfo: AccountInfo | undefined = this.accounts.get(address.toUserFriendlyAddress());\n        if (addressInfo) return addressInfo; // regular address\n        // address belongs to a contract\n        const contract = this.findContractByAddress(address);\n        if (!contract) return null;\n        if (contract.type !== Nimiq.Account.Type.VESTING) {\n            throw new Error('Currently only Vesting contracts are supported');\n        }\n        return this.accounts.get(contract.owner.toUserFriendlyAddress()) || null;\n    }\n\n    public findBtcAddressInfo(\n        address: string,\n        deriveIfNotFound = true,\n    ): BtcAddressInfo | null | Promise<BtcAddressInfo | null> {\n        const addressInfo = this.btcAddresses.internal.find((ai) => ai.address === address)\n            || this.btcAddresses.external.find((ai) => ai.address === address)\n            || null;\n\n        if (addressInfo || !deriveIfNotFound) return addressInfo;\n\n        return new Promise<BtcAddressInfo | null>(async (resolve, reject) => {\n            try {\n                // Derive new addresses starting from the last used index\n                let index = Math.min(this.btcAddresses.external.length, this.btcAddresses.internal.length) - 1;\n                let lastExternalUsed = 0;\n                let lastInternalUsed = 0;\n                for (; index >= 0; index--) {\n                    if (!lastExternalUsed && this.btcAddresses.external[index].used) lastExternalUsed = index;\n                    if (!lastInternalUsed && this.btcAddresses.internal[index].used) lastInternalUsed = index;\n                    if (lastExternalUsed && lastInternalUsed) break;\n                }\n                index = Math.min(lastExternalUsed, lastInternalUsed);\n\n                const newAddresses = await WalletInfoCollector.detectBitcoinAddresses(this.btcXPub!, index + 1);\n\n                let i = index + 1;\n                for (const external of newAddresses.external) {\n                    this.btcAddresses.external[i] = external;\n                    i += 1;\n                }\n                i = index + 1;\n                for (const internal of newAddresses.internal) {\n                    this.btcAddresses.internal[i] = internal;\n                    i += 1;\n                }\n\n                await WalletStore.Instance.put(this);\n\n                resolve(this.findBtcAddressInfo(address, false) as BtcAddressInfo | null);\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    public setContract(updatedContract: ContractInfo) {\n        const index = this.contracts.findIndex((contract) => contract.address.equals(updatedContract.address));\n        if (index < 0) {\n            // Is new contract\n            this.contracts.push(updatedContract);\n            return;\n        }\n\n        this.contracts.splice(index, 1, updatedContract);\n    }\n\n    public toObject(): WalletInfoEntry {\n        const accountEntries = new Map<string, AccountInfoEntry>();\n        this.accounts.forEach((accountInfo, userFriendlyAddress) => {\n            accountEntries.set(userFriendlyAddress, accountInfo.toObject());\n        });\n        const contractEntries = this.contracts.map((contract) => contract.toObject());\n        return {\n            id: this.id,\n            keyId: this.keyId,\n            label: this.label,\n            accounts: accountEntries,\n            contracts: contractEntries,\n            type: this.type,\n            keyMissing: this.keyMissing,\n            fileExported: this.fileExported,\n            wordsExported: this.wordsExported,\n            btcXPub: this.btcXPub,\n            btcAddresses: {\n                internal: this.btcAddresses.internal.map((btcAddressInfo) => btcAddressInfo.toObject()),\n                external: this.btcAddresses.external.map((btcAddressInfo) => btcAddressInfo.toObject()),\n            },\n        };\n    }\n\n    public async toAccountType(): Promise<Account> {\n        return {\n            accountId: this.id,\n            label: this.label,\n            type: this.type,\n            fileExported: this.fileExported,\n            wordsExported: this.wordsExported,\n            addresses: Array.from(this.accounts.values()).map((address) => address.toAddressType()),\n            contracts: this.contracts.map((contract) => contract.toContractType()),\n            btcAddresses: {\n                internal: this.btcAddresses.internal.map((btcAddressInfo) => btcAddressInfo.toBtcAddressType()),\n                external: this.btcAddresses.external.map((btcAddressInfo) => btcAddressInfo.toBtcAddressType()),\n            },\n            uid: await this.getUid(),\n        };\n    }\n\n    public async getUid(): Promise<string> {\n        return this._uid\n            || (this._uid = await makeUid(this.keyId, Array.from(this.accounts.values())[0].userFriendlyAddress));\n    }\n}\n\n/*\n * Database Types\n */\nexport interface WalletInfoEntry {\n    id: string;\n    keyId: string;\n    label: string;\n    accounts: Map</*address*/ string, AccountInfoEntry>;\n    contracts: ContractInfoEntry[];\n    type: WalletType;\n    keyMissing: boolean;\n    fileExported: boolean;\n    wordsExported: boolean;\n    btcXPub?: string;\n    btcAddresses: {\n        internal: BtcAddressInfoEntry[],\n        external: BtcAddressInfoEntry[],\n    };\n}\n","import { NetworkClient } from '@nimiq/network-client';\nimport { KeyguardClient, SimpleResult as KeyguardSimpleResult } from '@nimiq/keyguard-client';\nimport { AccountInfo } from '@/lib/AccountInfo';\nimport { WalletStore } from '@/lib/WalletStore';\nimport { WalletInfo } from '@/lib/WalletInfo';\n// TODO import only when needed\nimport LedgerApi, { Coin, getBip32Path, RequestTypeNimiq as LedgerApiRequestType } from '@nimiq/ledger-api';\nimport { ACCOUNT_BIP32_BASE_PATH_KEYGUARD, ACCOUNT_MAX_ALLOWED_ADDRESS_GAP } from '@/lib/Constants';\nimport Config from 'config';\nimport { ERROR_TRANSACTION_RECEIPTS, WalletType } from '../lib/Constants';\nimport {\n    labelAddress,\n    labelKeyguardAccount,\n    labelLedgerAccount,\n    labelLegacyAccount,\n    labelVestingContract,\n} from './LabelingMachine';\nimport { VestingContractInfo } from './ContractInfo';\nimport { BtcAddressInfo } from './bitcoin/BtcAddressInfo';\nimport { loadBitcoinJS } from './bitcoin/BitcoinJSLoader';\nimport { getElectrumClient } from './bitcoin/ElectrumClient';\nimport { Receipt as BtcReceipt } from '@nimiq/electrum-client';\nimport {\n    EXTERNAL_INDEX,\n    INTERNAL_INDEX,\n    BTC_ACCOUNT_MAX_ALLOWED_ADDRESS_GAP,\n    BTC_ACCOUNT_KEY_PATH,\n    NESTED_SEGWIT,\n    NATIVE_SEGWIT,\n} from './bitcoin/BitcoinConstants';\nimport { deriveAddressesFromXPub, getBtcNetwork, publicKeyToPayment } from './bitcoin/BitcoinUtils';\n\nexport type BasicAccountInfo = {\n    address: string,\n    path: string,\n};\n\nexport type WalletCollectionResultLedger = {\n    walletInfo: WalletInfo,\n    receiptsError?: Error, // if there is an incomplete result due to failed requestTxReceipts requests\n    hasActivity: boolean, // whether the wallet has a transaction history or a balance or owns a contract\n};\nexport type WalletCollectionResultKeyguard = WalletCollectionResultLedger & {\n    releaseKey: (removeKey?: boolean) => Promise<KeyguardSimpleResult | void>,\n};\n\nconst TEMPORARY_ACCOUNT_LABEL_KEYGUARD = '~~~TEMP~~~';\n\nexport default class WalletInfoCollector {\n    public static async collectBip39WalletInfo(\n        keyId: string,\n        initialAccounts: BasicAccountInfo[],\n        // tslint:disable-next-line:no-empty\n        onUpdate: (walletInfo: WalletInfo, currentlyCheckedAccounts: BasicAccountInfo[]) => void = () => {},\n        skipActivityCheck = false,\n        bitcoinXPub?: string,\n    ): Promise<WalletCollectionResultKeyguard> {\n        return WalletInfoCollector._collectLedgerOrBip39WalletInfo(WalletType.BIP39, initialAccounts, onUpdate,\n            skipActivityCheck, keyId, bitcoinXPub) as Promise<WalletCollectionResultKeyguard>;\n    }\n\n    public static async collectLedgerWalletInfo(\n        initialAccounts: BasicAccountInfo[],\n        // tslint:disable-next-line:no-empty\n        onUpdate: (walletInfo: WalletInfo, currentlyCheckedAccounts: BasicAccountInfo[]) => void = () => {},\n        skipActivityCheck = false,\n    ): Promise<WalletCollectionResultLedger> {\n        return WalletInfoCollector._collectLedgerOrBip39WalletInfo(WalletType.LEDGER, initialAccounts, onUpdate,\n            skipActivityCheck);\n    }\n\n    public static async collectLegacyWalletInfo(\n        keyId: string,\n        singleAccount: BasicAccountInfo,\n        // tslint:disable-next-line:no-empty\n        onUpdate: (walletInfo: WalletInfo, currentlyCheckedAccounts: BasicAccountInfo[]) => void = () => {},\n        skipActivityCheck = false,\n    ): Promise<WalletCollectionResultKeyguard> {\n        // Kick off loading dependencies\n        WalletInfoCollector._initializeDependencies(WalletType.LEGACY);\n\n        // Get or create the walletInfo instance\n        const walletInfo = await WalletInfoCollector._getWalletInfoInstance(WalletType.LEGACY, keyId);\n        const singleAccountAsArray = [singleAccount];\n\n        WalletInfoCollector._addAccounts(walletInfo, singleAccountAsArray);\n        onUpdate(walletInfo, singleAccountAsArray);\n\n        const contracts = await WalletInfoCollector._addVestingContracts(walletInfo, singleAccount, onUpdate);\n        let hasActivity = contracts.length > 0;\n\n        if (!skipActivityCheck && !hasActivity) {\n            const balances = await WalletInfoCollector._getBalances([singleAccount]);\n            WalletInfoCollector._addAccounts(walletInfo, singleAccountAsArray, balances);\n            onUpdate(walletInfo, []);\n            hasActivity = balances.get(singleAccount.address)! > 0\n                || (await WalletInfoCollector._networkInitializationPromise!\n                    .then(() => NetworkClient.Instance.requestTransactionReceipts(singleAccount.address, 1)))\n                    .length > 0;\n        }\n\n        return {\n            walletInfo,\n            hasActivity,\n            releaseKey: async (removeKey?) => {\n                if (!WalletInfoCollector._keyguardClient) {\n                    if (removeKey) {\n                        // make sure to create a keyguardClient to be able to remove the key\n                        WalletInfoCollector._initializeKeyguardClient();\n                    } else {\n                        // Simply return as legacy keys don't neccessarily need to be released.\n                        // Only a temporary flag in the keyguard session storage is left over by not releasing.\n                        return;\n                    }\n                }\n                return WalletInfoCollector._keyguardClient!.releaseKey(keyId, removeKey);\n            },\n        };\n    }\n\n    public static async detectBitcoinAddresses(xpub: string, startIndex = 0): Promise<{\n        internal: BtcAddressInfo[],\n        external: BtcAddressInfo[],\n    }> {\n        const [electrum] = await Promise.all([\n            getElectrumClient(),\n            loadBitcoinJS(),\n        ]);\n\n        const xPubType = ['ypub', 'upub'].includes(xpub.substr(0, 4)) ? NESTED_SEGWIT : NATIVE_SEGWIT;\n\n        const network = getBtcNetwork(xPubType);\n        const extendedKey = BitcoinJS.bip32.fromBase58(xpub, network);\n\n        /**\n         * According to https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#account-discovery\n         * wallets should only scan external addresses for activity, as internal addresses can only receive\n         * transactions from external addresses of the same wallet anyway and will thus be discovered when\n         * parsing the external tx history. Since we only check for receipts in this address detection step,\n         * we cannot find out which internal addresses specifically have been used yet.\n         * At the end of the detection, we will simply return the same number of internal addresses as we\n         * return external ones, and the wallet can then find out which of those have been used by checking\n         * the actual transactions against the internal addresses. The wallet can then derive additional\n         * internal addresses via the iframe request if necessary.\n         */\n\n        const addresses: [BtcAddressInfo[], BtcAddressInfo[]] = [[], []];\n\n        for (const INDEX of [EXTERNAL_INDEX, INTERNAL_INDEX]) {\n            const baseKey = extendedKey.derive(INDEX);\n            const basePath = `${BTC_ACCOUNT_KEY_PATH[xPubType][Config.bitcoinNetwork]}/${INDEX}`;\n\n            let gap = 0;\n            let i = startIndex;\n\n            while (gap < BTC_ACCOUNT_MAX_ALLOWED_ADDRESS_GAP) {\n                const pubKey = baseKey.derive(i).publicKey;\n\n                const address = publicKeyToPayment(pubKey, xPubType).address;\n                if (!address) throw new Error(`Cannot create external address for ${xpub} index ${i}`);\n\n                // Check address balance\n                const balances = await electrum.getBalance(address);\n                const balance = balances.confirmed + balances.unconfirmed;\n\n                // If no balance, then check tx activity\n                const receipts = !balance\n                    ? await electrum.getTransactionReceiptsByAddress(address)\n                    : [] as BtcReceipt[];\n\n                const used = balance > 0 || receipts.length > 0;\n\n                addresses[INDEX].push(new BtcAddressInfo(\n                    `${basePath}/${i}`,\n                    address,\n                    used,\n                    balance,\n                ));\n\n                if (used) {\n                    gap = 0;\n                } else {\n                    gap += 1;\n                }\n\n                i += 1;\n            }\n        }\n\n        return {\n            internal: addresses[INTERNAL_INDEX],\n            external: addresses[EXTERNAL_INDEX],\n        };\n    }\n\n    private static _keyguardClient?: KeyguardClient; // TODO avoid the need to create another KeyguardClient here\n    private static _networkInitializationPromise?: Promise<void>;\n\n    private static async _collectLedgerOrBip39WalletInfo(\n        walletType: WalletType,\n        initialAccounts: BasicAccountInfo[] = [],\n        // tslint:disable-next-line:no-empty\n        onUpdate: (walletInfo: WalletInfo, currentlyCheckedAccounts: BasicAccountInfo[]) => void,\n        skipActivityCheck: boolean,\n        keyId?: string,\n        bitcoinXPub?: string,\n    ): Promise<WalletCollectionResultKeyguard | WalletCollectionResultLedger> {\n        if (walletType !== WalletType.LEDGER && walletType !== WalletType.BIP39) {\n            throw new Error('Unsupported wallet type');\n        }\n\n        // Kick off loading dependencies\n        WalletInfoCollector._initializeDependencies(walletType);\n\n        if (!keyId && walletType === WalletType.LEDGER) {\n            keyId = await LedgerApi.Nimiq.getWalletId();\n        }\n\n        // Kick off first round of account derivation\n        let startIndex = 0;\n        let derivedAccountsPromise = WalletInfoCollector._deriveAccounts(startIndex,\n            ACCOUNT_MAX_ALLOWED_ADDRESS_GAP, walletType, keyId);\n\n        try {\n            await loadBitcoinJS();\n            // Start BTC address detection\n            const bitcoinAddresses: {\n                internal: BtcAddressInfo[],\n                external: BtcAddressInfo[],\n            } = bitcoinXPub ? {\n                external: deriveAddressesFromXPub(\n                    bitcoinXPub,\n                    [EXTERNAL_INDEX],\n                    0,\n                    BTC_ACCOUNT_MAX_ALLOWED_ADDRESS_GAP,\n                ),\n                internal: deriveAddressesFromXPub(\n                    bitcoinXPub,\n                    [INTERNAL_INDEX],\n                    0,\n                    BTC_ACCOUNT_MAX_ALLOWED_ADDRESS_GAP,\n                ),\n            } : {\n                external: [],\n                internal: [],\n            };\n\n            // Get or create the walletInfo instance and derive the first set of derived accounts\n            const [walletInfo, firstSetOfDerivedAccounts] = await Promise.all([\n                WalletInfoCollector._getWalletInfoInstance(walletType, keyId!),\n                derivedAccountsPromise,\n            ]);\n\n            // Add initial accounts to the walletInfo\n            if (initialAccounts.length > 0) {\n                WalletInfoCollector._addAccounts(walletInfo, initialAccounts);\n            }\n            onUpdate(walletInfo, firstSetOfDerivedAccounts);\n\n            // This path is only called for LEDGER or BIP39 accounts, but\n            // BIP39 accounts cannot have vesting contracts because they\n            // did not exist at mainnet launch.\n            const contracts = walletType === WalletType.LEDGER\n                ? await WalletInfoCollector._addVestingContracts(walletInfo, firstSetOfDerivedAccounts[0], onUpdate)\n                : [];\n            let hasActivity = contracts.length > 0;\n\n            // Label Keyguard BIP39 accounts according to their first identicon background color\n            if (walletType === WalletType.BIP39 && walletInfo.label === TEMPORARY_ACCOUNT_LABEL_KEYGUARD) {\n                walletInfo.label = labelKeyguardAccount(firstSetOfDerivedAccounts[0].address);\n            }\n\n            let foundAccounts: BasicAccountInfo[];\n            let receiptsError;\n            do {\n                const derivedAccounts = await derivedAccountsPromise;\n\n                // already start deriving next accounts\n                // By always advancing in groups of MAX_ALLOWED_GAP addresses per round, it often happens that more\n                // addresses are derived and checked for activity than the BIP44 address gap limit\n                // (https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#address-gap-limit) stipulates,\n                // because whenever an active address in a group of addresses is found, the next full group is also\n                // derived. Thus the actual gap limit of this implementation is up to (2 x MAX_ALLOWED_GAP) - 1.\n                // We argue that this is good UX for users, as potentially more of their active addresses are found,\n                // even if they haven't strictly followed to the standard - at only a relatively small cost to the\n                // network. For example, if the user adds the accounts derived with indices 0, 19, 39 to his wallet but\n                // then only ends up using accounts 0 and 39, the account at index 19 will not be found anymore on\n                // reimport. With the current implementation however, at least the account 39 would be found, while an\n                // implementation strictly following the specification would stop the search at index 19.\n                startIndex += ACCOUNT_MAX_ALLOWED_ADDRESS_GAP;\n                derivedAccountsPromise = WalletInfoCollector._deriveAccounts(startIndex,\n                    ACCOUNT_MAX_ALLOWED_ADDRESS_GAP, walletType, keyId);\n\n                // Already add addresses that are in the initialAccounts\n                foundAccounts = derivedAccounts.filter((derived) =>\n                    initialAccounts.some((initial) => initial.address === derived.address));\n                let accountsToCheck = skipActivityCheck || hasActivity\n                    ? derivedAccounts.filter((derived) =>\n                        !initialAccounts.some((initial) => initial.address === derived.address))\n                    : derivedAccounts;\n\n                const balances = await WalletInfoCollector._getBalances(accountsToCheck);\n                for (const account of accountsToCheck) {\n                    const balance = balances.get(account.address);\n                    if (balance !== undefined && balance !== 0) {\n                        foundAccounts.push(account);\n                        hasActivity = true;\n                    }\n                }\n\n                // for accounts with balance 0 check if there are transactions\n                accountsToCheck = skipActivityCheck || hasActivity\n                    ? accountsToCheck.filter((account) =>\n                        !foundAccounts.some((foundAccount) => foundAccount.address === account.address))\n                    : accountsToCheck; // did not find any activity, have to check all accounts\n                await Promise.all(\n                    accountsToCheck.map(async (account) => {\n                        try {\n                            await WalletInfoCollector._networkInitializationPromise;\n                            const receipts = await NetworkClient.Instance\n                                .requestTransactionReceipts(account.address, 1);\n                            if (receipts.length > 0) {\n                                foundAccounts.push(account);\n                                hasActivity = true;\n                            }\n                        } catch (error) {\n                            if (!error.message.startsWith(ERROR_TRANSACTION_RECEIPTS)) {\n                                throw error;\n                            }\n                            receiptsError = error;\n                            console.debug(error);\n                        }\n                    }),\n                );\n\n                if (foundAccounts.length > 0) {\n                    WalletInfoCollector._addAccounts(walletInfo, foundAccounts, balances);\n                    onUpdate(walletInfo, await derivedAccountsPromise);\n                }\n            } while (foundAccounts.length > 0);\n\n            const releaseKey = walletType === WalletType.BIP39\n                ? (removeKey?: boolean) => WalletInfoCollector._keyguardClient!.releaseKey(keyId!, removeKey)\n                : undefined;\n\n            // Note that for Bitcoin we don't catch sync errors as receiptErrors which are only to be handled optionally\n            // but throw instead as for Bitcoin it is important to complete a full sync to avoid address re-use.\n            walletInfo.btcXPub = bitcoinXPub;\n            walletInfo.btcAddresses = bitcoinAddresses;\n            hasActivity = hasActivity || bitcoinAddresses.external.some((btcAddressInfo) => btcAddressInfo.used);\n\n            return {\n                walletInfo,\n                receiptsError,\n                releaseKey,\n                hasActivity,\n            };\n        } finally {\n            // cancel derivation of addresses that we don't need anymore if we're finished or an exception occurred\n            if (walletType === WalletType.LEDGER) {\n                derivedAccountsPromise.catch(() => undefined); // to avoid uncaught promise rejection on cancel\n                LedgerApi.disconnect(\n                    /* cancelRequest */ true,\n                    /* requestTypesToDisconnect */ [\n                        LedgerApiRequestType.GET_WALLET_ID,\n                        LedgerApiRequestType.DERIVE_ADDRESSES,\n                    ],\n                );\n            }\n        }\n    }\n\n    private static _initializeDependencies(walletType: WalletType): void {\n        WalletInfoCollector._networkInitializationPromise = WalletInfoCollector._networkInitializationPromise\n            || (NetworkClient.hasInstance()\n                    ? NetworkClient.Instance.init() // initialize in case it's not initialized yet\n                    : NetworkClient.createInstance(Config.networkEndpoint).init()\n            );\n        WalletInfoCollector._networkInitializationPromise\n            .catch(() => delete WalletInfoCollector._networkInitializationPromise);\n        if (walletType === WalletType.BIP39) this._initializeKeyguardClient();\n    }\n\n    private static _initializeKeyguardClient() {\n        WalletInfoCollector._keyguardClient = WalletInfoCollector._keyguardClient\n            || new KeyguardClient(Config.keyguardEndpoint);\n    }\n\n    private static async _getWalletInfoInstance(walletType: WalletType, keyId: string): Promise<WalletInfo> {\n        const walletId = await WalletStore.Instance.deriveId(keyId);\n\n        const existingWalletInfo = await WalletStore.Instance.get(walletId);\n        if (existingWalletInfo) {\n            existingWalletInfo.keyMissing = false;\n            return existingWalletInfo;\n        }\n\n        const label = walletType === WalletType.LEGACY\n            ? labelLegacyAccount()\n            : walletType === WalletType.BIP39\n                ? TEMPORARY_ACCOUNT_LABEL_KEYGUARD\n                : labelLedgerAccount();\n        return new WalletInfo(\n            walletId,\n            keyId,\n            label,\n            new Map<string, AccountInfo>(),\n            [],\n            walletType,\n            false,\n        );\n    }\n\n    private static async _deriveAccounts(startIndex: number, count: number, walletType: WalletType, keyId?: string)\n        : Promise<BasicAccountInfo[]> {\n        switch (walletType) {\n            case WalletType.LEGACY:\n                throw new Error('Legacy Wallets can not derive accounts.');\n            case WalletType.BIP39:\n                if (!keyId) throw new Error('keyId required for Keyguard account derivation.');\n                return WalletInfoCollector._deriveKeyguardAccounts(startIndex, count, keyId);\n            case WalletType.LEDGER:\n                return WalletInfoCollector._deriveLedgerAccounts(startIndex, count);\n            default:\n                throw new Error('Unsupported walletType.');\n        }\n    }\n\n    private static async _deriveKeyguardAccounts(startIndex: number, count: number, keyId: string)\n        : Promise<BasicAccountInfo[]> {\n        const pathsToDerive = [];\n        for (let index = startIndex; index < startIndex + count; ++index) {\n            pathsToDerive.push(`${ACCOUNT_BIP32_BASE_PATH_KEYGUARD}${index}'`);\n        }\n        const derivedAddresses = await WalletInfoCollector._keyguardClient!.deriveAddresses(keyId, pathsToDerive);\n        const userFriendlyAddresses = derivedAddresses.map((derivedAddress) =>\n            new Nimiq.Address(derivedAddress.address).toUserFriendlyAddress());\n        const accounts = [];\n        for (let i = 0; i < pathsToDerive.length; ++i) {\n            accounts.push({\n                path: pathsToDerive[i],\n                address: userFriendlyAddresses[i],\n            });\n        }\n        return accounts;\n    }\n\n    private static async _deriveLedgerAccounts(startIndex: number, count: number): Promise<BasicAccountInfo[]> {\n        const pathsToDerive = [];\n        for (let index = startIndex; index < startIndex + count; ++index) {\n            pathsToDerive.push(getBip32Path({\n                coin: Coin.NIMIQ,\n                addressIndex: index,\n            }));\n        }\n        return (await LedgerApi.Nimiq.deriveAddresses(pathsToDerive)).map((address) => ({\n            path: address.keyPath,\n            address: address.address,\n        }));\n    }\n\n    private static async _getBalances(accounts: BasicAccountInfo[]): Promise<Map<string, number>> {\n        const userFriendlyAddresses = accounts.map((account) => account.address);\n        await WalletInfoCollector._networkInitializationPromise;\n        const balances = await NetworkClient.Instance.getBalance(userFriendlyAddresses);\n        for (const [address, balance] of balances) {\n            balances.set(address, Nimiq.Policy.coinsToSatoshis(balance));\n        }\n        return balances;\n    }\n\n    private static _addAccounts(\n        walletInfo: WalletInfo,\n        newAccounts: BasicAccountInfo[],\n        balances?: Map<string, number>,\n    ): void {\n        for (const newAccount of newAccounts) {\n            const existingAccountInfo = walletInfo.accounts.get(newAccount.address);\n            const balance = balances ? balances.get(newAccount.address) : undefined;\n            const accountInfo = existingAccountInfo || new AccountInfo(\n                newAccount.path,\n                labelAddress(newAccount.address),\n                Nimiq.Address.fromString(newAccount.address),\n            );\n            if (balance !== undefined) accountInfo.balance = balance;\n            walletInfo.accounts.set(newAccount.address, accountInfo);\n        }\n    }\n\n    private static async _addVestingContracts(\n        walletInfo: WalletInfo,\n        potentialOwner: BasicAccountInfo,\n        onUpdate: (walletInfo: WalletInfo, currentlyCheckedAccounts: BasicAccountInfo[]) => void,\n    ): Promise<VestingContractInfo[]> {\n        if (walletInfo.type !== WalletType.LEGACY && walletInfo.type !== WalletType.LEDGER) {\n            // Only legacy or a first Ledger addresses can be owners of genesis vesting contracts\n            return [];\n        }\n\n        await WalletInfoCollector._networkInitializationPromise;\n        const genesisVestingContracts = (await NetworkClient.Instance.getGenesisVestingContracts())\n            .map((contract) => new VestingContractInfo(\n                labelVestingContract(),\n                Nimiq.Address.fromString(contract.address),\n                Nimiq.Address.fromString(contract.owner),\n                contract.start,\n                Nimiq.Policy.coinsToSatoshis(contract.stepAmount),\n                contract.stepBlocks,\n                Nimiq.Policy.coinsToSatoshis(contract.totalAmount),\n            ));\n\n        const potentialVestingOwnerAddress = Nimiq.Address.fromString(potentialOwner.address);\n        const contracts = genesisVestingContracts\n            .filter((contract) => contract.owner.equals(potentialVestingOwnerAddress));\n\n        for (const newContract of contracts) {\n            const existingContract = walletInfo.findContractByAddress(newContract.address);\n            if (!existingContract) {\n                walletInfo.contracts.push(newContract);\n            }\n        }\n\n        if (contracts.length > 0) {\n            // make sure the vesting owner is added to the account too\n            WalletInfoCollector._addAccounts(walletInfo, [potentialOwner]);\n            onUpdate(walletInfo, []);\n        }\n\n        return contracts;\n    }\n}\n","import { WalletInfo, WalletInfoEntry } from '@/lib/WalletInfo';\nimport { Store } from '@/lib/Store';\n\n/**\n * With two ObjectStores sharing the same Database, types inside the Store are not well defined.\n * To the outside however, that is completely transparent.\n */\nexport class WalletStore extends Store<any, WalletInfoEntry> {\n    public static readonly DB_ACCOUNTS_STORE_NAME = 'accounts';\n    public static readonly DB_META_DATA_STORE_NAME = 'meta-data';\n\n    public static readonly WALLET_ID_LENGTH = 6;\n    public static readonly SALT_LENGTH = 16;\n\n    private static instance: WalletStore | null = null;\n    private _storeName: string = WalletStore.DB_ACCOUNTS_STORE_NAME;\n\n    protected get DB_NAME(): string {\n        return 'nimiq-hub';\n    }\n\n    protected get DB_STORE_NAME(): string {\n        return this._storeName;\n    }\n\n    protected get DB_VERSION(): number {\n        return 1;\n    }\n\n    public static get Instance(): WalletStore {\n        if (!WalletStore.instance) WalletStore.instance = new WalletStore();\n        return WalletStore.instance;\n    }\n\n    public async deriveId(keyId: string): Promise<string> {\n        const wallets = await this.list();\n        const existingWallet = wallets.find((wallet) => wallet.keyId === keyId);\n        if (existingWallet) return existingWallet.id;\n\n        const existingIds = wallets.map((wallet) => wallet.id);\n        const keyIdBytes = Nimiq.BufferUtils.fromBase64(keyId);\n\n        // Hashing with a random salt that does not leave the hub to avoid that an external app can derive wallet id's\n        // from public keys (Legacy and Ledger accounts) or get a hint for private key guessing / brute forcing (for\n        // BIP39) as hashing the private key is cheaper than deriving the public key.\n        const salt = await this._getSalt();\n        const saltedKeyIdBytes = new Uint8Array(keyIdBytes.length + salt.length);\n        saltedKeyIdBytes.set(keyIdBytes, 0);\n        saltedKeyIdBytes.set(salt, keyIdBytes.length);\n        await Nimiq.WasmHelper.doImport();\n        const keyIdHash = Nimiq.Hash.computeBlake2b(saltedKeyIdBytes);\n\n        for (let i = 0; i <= (keyIdHash.length - WalletStore.WALLET_ID_LENGTH); i++) {\n            const id = Nimiq.BufferUtils.toHex(keyIdHash.subarray(i, i + WalletStore.WALLET_ID_LENGTH));\n            if (existingIds.indexOf(id) === -1) return id;\n        }\n\n        // Could not find an available wallet ID in the searched space.\n        // Recurse with the hashed value.\n        return this.deriveId(Nimiq.BufferUtils.toBase64(keyIdHash));\n    }\n\n    public async get(id: string): Promise<WalletInfo | null> {\n        this._storeName = WalletStore.DB_ACCOUNTS_STORE_NAME;\n        const result = await super.get(id);\n        return result ? WalletInfo.fromObject(result) : result;\n    }\n\n    public async put(walletInfo: WalletInfo) {\n        this._storeName = WalletStore.DB_ACCOUNTS_STORE_NAME;\n        return super.put(walletInfo.toObject());\n    }\n\n    public async remove(id: string) {\n        this._storeName = WalletStore.DB_ACCOUNTS_STORE_NAME;\n        return super.remove(id);\n    }\n\n    public async list(): Promise<WalletInfoEntry[]> {\n        this._storeName = WalletStore.DB_ACCOUNTS_STORE_NAME;\n        return super.list() as Promise<WalletInfoEntry[]>;\n    }\n\n    protected upgrade(request: any, event: IDBVersionChangeEvent): void {\n        const db = request.result;\n        if (event.oldVersion < 1) {\n            // Version 1 is the first version of the database.\n            db.createObjectStore(WalletStore.DB_ACCOUNTS_STORE_NAME, { keyPath: 'id' });\n            db.createObjectStore(WalletStore.DB_META_DATA_STORE_NAME, { keyPath: 'name' });\n        }\n    }\n\n    protected toEntry<T>(walletInfoOrMetaData: T): T {\n        return walletInfoOrMetaData;\n    }\n\n    protected fromEntry<T>(walletEntryOrMetaDataEntry: T): T {\n        return walletEntryOrMetaDataEntry;\n    }\n\n    private async _getMetaData(name: string): Promise<any> {\n        this._storeName = WalletStore.DB_META_DATA_STORE_NAME;\n        const result = await super.get(name);\n        return result ? result.value : null;\n    }\n\n    private async _putMetaData(name: string, value: any): Promise<void> {\n        this._storeName = WalletStore.DB_META_DATA_STORE_NAME;\n        return super.put({value, name});\n    }\n\n    private async _getSalt() {\n        let salt: Uint8Array = await this._getMetaData('salt');\n        if (salt) return salt;\n        salt = new Uint8Array(WalletStore.SALT_LENGTH);\n        window.crypto.getRandomValues(salt);\n        await this._putMetaData('salt', salt);\n        return salt;\n    }\n}\n","/* tslint:disable:no-bitwise */\n\n// Adapted from https://github.com/45678/Base58\n\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\nexport function encodeBase58(bytes: number[] | Uint8Array): string {\n    if (bytes.length === 0) {\n        return '';\n    }\n    const digits = [0];\n    let i = 0;\n    while (i < bytes.length) {\n        let j = 0;\n        while (j < digits.length) {\n            digits[j] <<= 8;\n            j++;\n        }\n        digits[0] += bytes[i];\n        let carry = 0;\n        j = 0;\n        while (j < digits.length) {\n            digits[j] += carry;\n            carry = (digits[j] / 58) | 0;\n            digits[j] %= 58;\n            ++j;\n        }\n        while (carry) {\n            digits.push(carry % 58);\n            carry = (carry / 58) | 0;\n        }\n        i++;\n    }\n    i = 0;\n    while (bytes[i] === 0 && i < bytes.length - 1) {\n        digits.push(0);\n        i++;\n    }\n    return digits.reverse().map((digit) => ALPHABET[digit]).join('');\n}\n\nexport function decodeBase58(text: string): number[] {\n    const ALPHABET_MAP: {[letter: string]: number} = {};\n    for (let n = 0; n < ALPHABET.length; n++) {\n        ALPHABET_MAP[ALPHABET.charAt(n)] = n;\n    }\n\n    if (text.length === 0) {\n        return [];\n    }\n    const bytes = [0];\n    let i = 0;\n    while (i < text.length) {\n        const c = text[i];\n        if (!(c in ALPHABET_MAP)) {\n            throw new Error('Base58.decode received unacceptable input. Character \\'' + c + '\\' is not in the Base58 alphabet.');\n        }\n        let j = 0;\n        while (j < bytes.length) {\n            bytes[j] *= 58;\n            j++;\n        }\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n        j = 0;\n        while (j < bytes.length) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n            ++j;\n        }\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n        i++;\n    }\n    i = 0;\n    while (text[i] === '1' && i < text.length - 1) {\n        bytes.push(0);\n        i++;\n    }\n    return bytes.reverse();\n}\n","export const SATOSHIS_PER_COIN = 1e8;\n\ntype BtcAddressType = 'BIP49' | 'BIP84';\nexport const BIP49: BtcAddressType = 'BIP49'; // Nested SegWit\nexport const BIP84: BtcAddressType = 'BIP84'; // Native SegWit\nexport const NESTED_SEGWIT: BtcAddressType = BIP49;\nexport const NATIVE_SEGWIT: BtcAddressType = BIP84;\n\ntype BtcNetworkType = 'TEST' | 'MAIN';\nexport const BTC_NETWORK_TEST: BtcNetworkType = 'TEST';\nexport const BTC_NETWORK_MAIN: BtcNetworkType = 'MAIN';\n\nexport const BTC_ACCOUNT_KEY_PATH = {\n    BIP49: {\n        MAIN: `m/49'/0'/0'`,\n        TEST: `m/49'/1'/0'`,\n    },\n    BIP84: {\n        MAIN: `m/84'/0'/0'`,\n        TEST: `m/84'/1'/0'`,\n    },\n};\n\nexport const BTC_ACCOUNT_MAX_ALLOWED_ADDRESS_GAP = 10; // FIXME: Set to the standard 20 after testing\n\n// https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#change\nexport const EXTERNAL_INDEX = 0;\nexport const INTERNAL_INDEX = 1;\n\nexport const EXTENDED_KEY_PREFIXES = {\n    // See https://github.com/satoshilabs/slips/blob/master/slip-0132.md#registered-hd-version-bytes\n    BIP49: {\n        MAIN: {\n            public: 0x049d7cb2, // ypub\n            private: 0x049d7878, // yprv\n        },\n        TEST: {\n            public: 0x044a5262, // upub\n            private: 0x044a4e28, // uprv\n        },\n    },\n    BIP84: {\n        MAIN: {\n            public: 0x04b24746, // zpub\n            private: 0x04b2430c, // zprv\n        },\n        TEST: {\n            public: 0x045f1cf6, // vpub\n            private: 0x045f18bc, // vprv\n        },\n    },\n};\n\nexport const BIP49_ADDRESS_VERSIONS = {\n    // See https://en.bitcoin.it/wiki/List_of_address_prefixes\n    MAIN: [0, 5], // 0 = BIP44, 5 = BIP49\n    TEST: [111, 196], // 111 = BIP44, 196 = BIP49\n};\n\nexport const BIP84_ADDRESS_PREFIX = {\n    // See https://en.bitcoin.it/wiki/List_of_address_prefixes\n    MAIN: 'bc',\n    TEST: 'tb',\n};\n\nexport const ERROR_NO_XPUB = 'NO_XPUB';\n","let bitcoinJsPromise: Promise<boolean> | null = null;\n\nexport async function loadBitcoinJS(): Promise<boolean> {\n    return bitcoinJsPromise || (\n        bitcoinJsPromise = new Promise<boolean>((resolve, reject) => {\n            const script = document.createElement('script');\n            script.addEventListener('load', async () => {\n                // Wait for script to be parsed: check if global 'BitcoinJS' variable is available yet\n                while (typeof BitcoinJS === 'undefined') {\n                    await new Promise((res) => setTimeout(res, 100));\n                }\n                resolve(true);\n            });\n            script.addEventListener('error', reject);\n            script.integrity = process.env.VUE_APP_BITCOIN_JS_INTEGRITY_HASH!; // defined in vue.config.js\n            script.crossOrigin = 'anonymous';\n            script.src = '/bitcoin/BitcoinJS.min.js';\n            document.body.appendChild(script);\n        })\n    );\n}\n","import Config from 'config';\nimport {\n    BTC_NETWORK_MAIN,\n    BTC_NETWORK_TEST,\n    NESTED_SEGWIT,\n    NATIVE_SEGWIT,\n    BIP49_ADDRESS_VERSIONS,\n    BIP84_ADDRESS_PREFIX,\n    SATOSHIS_PER_COIN,\n    EXTENDED_KEY_PREFIXES,\n    BTC_ACCOUNT_KEY_PATH,\n    BTC_ACCOUNT_MAX_ALLOWED_ADDRESS_GAP,\n} from './BitcoinConstants';\nimport { BtcAddressInfo } from './BtcAddressInfo';\n\nexport function getBtcNetwork(addressType = Config.bitcoinAddressType) {\n    let network: BitcoinJS.Network;\n    switch (Config.bitcoinNetwork) {\n        case BTC_NETWORK_MAIN:\n            network = BitcoinJS.networks.bitcoin;\n            break;\n        case BTC_NETWORK_TEST:\n            network = BitcoinJS.networks.testnet;\n            break;\n        default:\n            throw new Error('Invalid bitcoinNetwork configuration');\n    }\n\n    return {\n        ...network,\n        // Adjust the first bytes of xpubs to the respective BIP we are using, to ensure correct xpub parsing\n        bip32: EXTENDED_KEY_PREFIXES[addressType][Config.bitcoinNetwork],\n    };\n}\n\nexport function publicKeyToPayment(publicKey: Buffer, addressType = Config.bitcoinAddressType) {\n    switch (addressType) {\n        case NESTED_SEGWIT:\n            return BitcoinJS.payments.p2sh({\n                redeem: BitcoinJS.payments.p2wpkh({\n                    pubkey: publicKey,\n                    network: getBtcNetwork(),\n                }),\n            });\n        case NATIVE_SEGWIT:\n            return BitcoinJS.payments.p2wpkh({\n                pubkey: publicKey,\n                network: getBtcNetwork(),\n            });\n        default:\n            throw new Error('Invalid address type');\n    }\n}\n\nexport function parseBipFromDerivationPath(path: string) {\n    if (path.startsWith('m/49\\'/')) return NESTED_SEGWIT;\n    if (path.startsWith('m/84\\'/')) return NATIVE_SEGWIT;\n    throw new Error(`Could not parse BIP from derivation path: ${path}`);\n}\n\nexport function validateAddress(address: string) {\n    try {\n        const parsedAddress = BitcoinJS.address.fromBase58Check(address);\n        return BIP49_ADDRESS_VERSIONS[Config.bitcoinNetwork].includes(parsedAddress.version);\n    } catch (error) {\n        // Ignore, try Bech32 format below\n    }\n\n    try {\n        const parsedAddress = BitcoinJS.address.fromBech32(address);\n        return BIP84_ADDRESS_PREFIX[Config.bitcoinNetwork] === parsedAddress.prefix;\n    } catch (error) {\n        return false;\n    }\n}\n\nexport function coinsToSatoshis(coins: number) {\n    return Math.round(coins * SATOSHIS_PER_COIN);\n}\n\nexport function satoshisToCoins(satoshis: number) {\n    return satoshis / SATOSHIS_PER_COIN;\n}\n\nexport function deriveAddressesFromXPub(\n    xpub: BitcoinJS.BIP32Interface | string,\n    derivationPath: number[],\n    startIndex = 0,\n    count = BTC_ACCOUNT_MAX_ALLOWED_ADDRESS_GAP,\n    addressType = Config.bitcoinAddressType,\n): BtcAddressInfo[] {\n    let extendedKey: BitcoinJS.BIP32Interface;\n    if (typeof xpub === 'string') {\n        const network = getBtcNetwork(addressType);\n        extendedKey = BitcoinJS.bip32.fromBase58(xpub, network);\n    } else {\n        extendedKey = xpub;\n    }\n\n    let baseKey = extendedKey;\n    for (const index of derivationPath) {\n        baseKey = baseKey.derive(index);\n    }\n\n    const path = BTC_ACCOUNT_KEY_PATH[addressType][Config.bitcoinNetwork]\n        + (derivationPath.length > 0 ? '/' : '')\n        + derivationPath.join('/');\n\n    const addresses: BtcAddressInfo[] = [];\n\n    for (let i = startIndex; i < startIndex + count; i++) {\n        const pubKey = baseKey.derive(i).publicKey;\n\n        const address = publicKeyToPayment(pubKey, addressType).address;\n        if (!address) throw new Error(`Cannot create external address for ${extendedKey.toBase58()} index ${i}`);\n\n        addresses.push(new BtcAddressInfo(\n            `${path}/${i}`,\n            address,\n            false,\n        ));\n    }\n\n    return addresses;\n}\n","export class BtcAddressInfo {\n    public static fromObject(o: BtcAddressInfoEntry): BtcAddressInfo {\n        return new BtcAddressInfo(\n            o.path,\n            o.address,\n            o.used,\n            o.balance,\n        );\n    }\n\n    public static objectToBtcAddressType(o: BtcAddressInfoEntry): string {\n        return o.address;\n    }\n\n    public walletId?: string;\n\n    public constructor(\n        public path: string,\n        public address: string,\n        public used: boolean,\n        public balance?: number,\n    ) {}\n\n    public toObject(): BtcAddressInfoEntry {\n        return {\n            path: this.path,\n            address: this.address,\n            used: this.used,\n            balance: this.balance,\n        };\n    }\n\n    public toBtcAddressType(): string {\n        return this.address;\n    }\n}\n\n/*\n * Database Types\n */\nexport interface BtcAddressInfoEntry {\n    path: string;\n    address: string;\n    used: boolean;\n    balance?: number;\n}\n","import Config from 'config';\nimport { BTC_NETWORK_MAIN } from './BitcoinConstants';\nimport { loadBitcoinJS } from './BitcoinJSLoader';\n\n// Import only types to avoid bundling of lazy-loaded libs.\nimport type { ElectrumClient, ElectrumClientOptions } from '@nimiq/electrum-client';\nimport type { Transaction as BitcoinJsTransaction } from 'bitcoinjs-lib';\n\nlet electrumClientPromise: Promise<ElectrumClient> | null = null;\n\n/**\n * Get a singleton Electrum client. This singleton should be used throughout the whole app, such that consensus has\n * only to be established once. The Electrum client library is lazy-loaded on demand. Optionally wait for consensus.\n */\nexport async function getElectrumClient(waitForConsensus: boolean = true) {\n    electrumClientPromise = electrumClientPromise || (async () => {\n        // @nimiq/electrum-client already depends on a globally available BitcoinJS,\n        // so we need to load it first.\n        // TODO (pre)load electrum client in parallel\n        await loadBitcoinJS();\n\n        const { GenesisConfig, Network, ElectrumClient: Client } = await import(\n            /*webpackChunkName: \"electrum-client\"*/ '@nimiq/electrum-client');\n\n        try {\n            GenesisConfig[Config.bitcoinNetwork === BTC_NETWORK_MAIN ? 'main' : 'test']();\n        } catch (e) {\n            // GenesisConfig already initialized. Check whether it's for the correct network.\n            if ((Config.bitcoinNetwork === BTC_NETWORK_MAIN) !== (GenesisConfig.NETWORK_NAME === Network.MAIN)) {\n                throw new Error('Wrong Electrum client GenesisConfig initialized.');\n            }\n        }\n\n        const options: Partial<ElectrumClientOptions> = Config.bitcoinNetwork === BTC_NETWORK_MAIN ? {\n            extraSeedPeers: [{\n                host: 'electrumx.nimiq.com',\n                wssPath: 'electrumx',\n                ports: { wss: 443, ssl: 50002, tcp: 50001 },\n                ip: '',\n                version: '',\n                highPriority: true,\n            }, {\n                host: 'btccore-main.bdnodes.net',\n                ports: { wss: null, ssl: 50002, tcp: null },\n                ip: '',\n                version: '',\n            }],\n            websocketProxy: {\n                tcp: 'wss://electrum.nimiq.com:50001',\n                ssl: 'wss://electrum.nimiq.com:50002',\n            },\n        } : {};\n\n        return new Client(options);\n    })();\n\n    let client: ElectrumClient;\n    try {\n        client = await electrumClientPromise;\n    } catch (e) {\n        electrumClientPromise = null;\n        throw e;\n    }\n\n    if (waitForConsensus) {\n        await client.waitForConsensusEstablished();\n        console.log('BTC Consensus established');\n    }\n\n    return client;\n}\n\nexport async function fetchTransaction(transactionHash: string): Promise<BitcoinJsTransaction> {\n    const [electrum, transactionFromPlain] = await Promise.all([\n        getElectrumClient(),\n        import(/*webpackChunkName: \"electrum-client\"*/ '@nimiq/electrum-client')\n            .then((module) => module.transactionFromPlain),\n    ]);\n\n    const fetchedTransaction = await electrum.getTransaction(transactionHash);\n    return transactionFromPlain(fetchedTransaction);\n}\n","import Vue from 'vue';\nimport Vuex, { StoreOptions } from 'vuex';\nimport { Result as KeyguardResult } from '@nimiq/keyguard-client';\nimport { WalletInfo } from '@/lib/WalletInfo';\nimport { WalletStore } from '@/lib/WalletStore';\nimport { AccountInfo } from '@/lib/AccountInfo';\nimport { labelLegacyAccountGroup } from '@/lib/LabelingMachine';\nimport { LEGACY_GROUPING_ACCOUNT_ID, WalletType } from '@/lib/Constants';\nimport { ContractInfo } from './lib/ContractInfo';\n\nVue.use(Vuex);\n\nexport interface RootState {\n    isRequestLoaded: boolean;\n    wallets: WalletInfo[]; // TODO: this is not JSON compatible, is this a problem?\n    keyguardResult: KeyguardResult | Error | null;\n    chosenWalletLabel: string | null;\n    activeWalletId: string | null;\n    activeUserFriendlyAddress: string | null;\n}\n\nconst store: StoreOptions<RootState> = {\n    state: {\n        isRequestLoaded: false,\n        wallets: [],\n        keyguardResult: null, // undefined is not reactive\n        chosenWalletLabel: null,\n        activeWalletId: null,\n        activeUserFriendlyAddress: null,\n    },\n    mutations: {\n        setRequestLoaded(state, payload: boolean) {\n            state.isRequestLoaded = payload;\n        },\n        initWallets(state, wallets: WalletInfo[]) {\n            state.wallets = wallets;\n        },\n        addWallet(state, walletInfo: WalletInfo) {\n            const existingWallet = state.wallets.find((wallet) => wallet.id === walletInfo.id);\n            if (!existingWallet) {\n                state.wallets.push(walletInfo);\n                return;\n            }\n\n            const index = state.wallets.indexOf(existingWallet);\n            state.wallets.splice(index, 1, walletInfo);\n        },\n        setKeyguardResult(state, payload: KeyguardResult | Error) {\n            state.keyguardResult = payload;\n        },\n        setActiveAccount(state, payload: { walletId: string, userFriendlyAddress: string }) {\n            state.activeWalletId = payload.walletId;\n            state.activeUserFriendlyAddress = payload.userFriendlyAddress;\n            // Store as recent account for next requests\n            localStorage.setItem('_recentAccount', JSON.stringify(payload));\n        },\n        setWalletLabel(state, label: string) {\n            state.chosenWalletLabel = label;\n        },\n    },\n    actions: {\n        initWallets({ state, commit }) {\n            // Fetch data from store\n            return WalletStore.Instance.list().then((walletInfoEntries) => {\n                const wallets = walletInfoEntries.map((walletInfoEntry) => WalletInfo.fromObject(walletInfoEntry));\n                commit('initWallets', wallets);\n\n                if (wallets.length === 0) return;\n\n                // Try loading active\n                let activeWallet: WalletInfo | undefined;\n                let activeUserFriendlyAddress: string | null = null;\n\n                const storedRecentAccount = localStorage.getItem('_recentAccount');\n                if (storedRecentAccount) {\n                    try {\n                        const recentAccount = JSON.parse(storedRecentAccount);\n                        activeWallet = state.wallets.find((x) => x.id === recentAccount.walletId);\n                        activeUserFriendlyAddress = recentAccount.userFriendlyAddress;\n                    } catch (err) {\n                        // Do nothing\n                    }\n                }\n\n                if (!activeWallet) {\n                    // If none found, pre-select the first available\n                    activeWallet = state.wallets[0];\n                }\n\n                // Validate that the address exists on the active wallet\n                if (activeUserFriendlyAddress) {\n                    const activeAccount = activeWallet.accounts.get(activeUserFriendlyAddress);\n                    if (!activeAccount) activeUserFriendlyAddress = null;\n                }\n\n                if (!activeUserFriendlyAddress) {\n                    // If none found, pre-select the first available\n                    const account = activeWallet.accounts.values().next().value;\n                    if (!account) return; // No addresses on this wallet\n                    activeUserFriendlyAddress = account.userFriendlyAddress;\n                }\n\n                commit('setActiveAccount', {\n                    walletId: activeWallet.id,\n                    userFriendlyAddress: activeUserFriendlyAddress,\n                });\n            });\n        },\n        addWalletAndSetActive({ commit }, walletInfo: WalletInfo) {\n            commit('addWallet', walletInfo);\n            commit('setActiveAccount', {\n                walletId: walletInfo.id,\n                userFriendlyAddress: walletInfo.accounts.values().next().value.userFriendlyAddress,\n            });\n        },\n    },\n    getters: {\n        findWallet: (state) => (id: string): WalletInfo | undefined => {\n            return state.wallets.find((wallet) => wallet.id === id);\n        },\n        findWalletByAddress: (state) => (address: string, includeContracts: boolean): WalletInfo | undefined => {\n            const foundWallet = state.wallets.find((wallet) => wallet.accounts.has(address));\n            if (foundWallet || !includeContracts) return foundWallet;\n            return state.wallets.find((wallet) => wallet.contracts.some((contract) => {\n                return contract.address.toUserFriendlyAddress() === address;\n            }));\n        },\n        findWalletByKeyId: (state) => (keyId: string): WalletInfo | undefined => {\n            return state.wallets.find((wallet) => wallet.keyId === keyId);\n        },\n        activeWallet: (state, getters): WalletInfo | undefined => {\n            if (!state.activeWalletId) return undefined;\n            return getters.findWallet(state.activeWalletId);\n        },\n        activeAccount: (state, getters): AccountInfo | undefined => {\n            if (!state.activeUserFriendlyAddress) return undefined;\n            const wallet: WalletInfo | undefined = getters.activeWallet;\n            if (!wallet) return undefined;\n            return wallet.accounts.get(state.activeUserFriendlyAddress);\n        },\n        hasWallets: (state): boolean => {\n            return state.wallets.length > 0;\n        },\n        processedWallets: (state) => {\n            const singleAccounts = new Map<string, AccountInfo>();\n            const singleContracts: ContractInfo[] = [];\n\n            const processedWallets = state.wallets.filter((wallet) => {\n                if (wallet.keyMissing) return false;\n                if (wallet.type !== WalletType.LEGACY) return true;\n\n                const [singleAccountAddress, singleAccountInfo] = Array.from(wallet.accounts.entries())[0];\n                singleAccountInfo.walletId = wallet.id;\n                singleAccounts.set(singleAccountAddress, singleAccountInfo);\n\n                for (const contract of wallet.contracts) {\n                    contract.walletId = wallet.id;\n                    singleContracts.push(contract);\n                }\n\n                return false;\n            });\n\n            if (singleAccounts.size > 0) {\n                processedWallets.push(new WalletInfo(\n                    LEGACY_GROUPING_ACCOUNT_ID,\n                    /* keyId */ '',\n                    labelLegacyAccountGroup(),\n                    singleAccounts,\n                    singleContracts,\n                    WalletType.LEGACY,\n                ));\n            }\n\n            return processedWallets;\n        },\n        addressCount: (state) => {\n            return state.wallets.reduce((count, wallet) => count + wallet.accounts.size + wallet.contracts.length, 0);\n        },\n    },\n};\n\nexport default new Vuex.Store<RootState>(store);\n"],"sourceRoot":""}